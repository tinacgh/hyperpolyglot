<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="content-type" content="text/html;charset=UTF-8"/>
<link rel="icon" type="image/gif" href="/favicon.gif"/>
<link rel="apple-touch-icon" sizes="120x120" href="touch-icon-iphone-retina.png" />
<link rel="apple-touch-icon" sizes="152x152" href="touch-icon-ipad-retina.png" />
<title>Version Control - Hyperpolyglot</title>
<style type="text/css" id="internal-style">
@import url(hyperpolyglot.css);
</style>
<meta http-equiv="content-type" content="text/html;charset=UTF-8"/>
<meta http-equiv="content-language" content="en"/>
</head>
<body>
<div id="container-wrap-wrap">
  <div id="container-wrap">
    <div id="container">
      <div id="header">
        <h1><a href="/"><span>Hyperpolyglot</span></a></h1>
      </div>
      <div id="content-wrap">
        <div id="main-content">
<div id="page-title">
                            Version Control
                        </div>
<div id="page-content">
                        

<table class="wiki-content-table"><tr><th></th>
<th colspan="3">distributed</th>
<th colspan="3">client-server</th>
<th colspan="2">local</th>
</tr><tr><th></th>
<th><a href="#git">git</a> (2005)</th>
<th><a href="#hg">hg</a> (2005)</th>
<th><a href="#bzr">bzr</a> (2005)</th>
<th><a href="#svn">svn</a> (2000)</th>
<th><a href="#perforce">p4</a> (1995)</th>
<th><a href="#cvs">cvs</a> (1990)</th>
<th><a href="#rcs">rcs</a> (1982)</th>
<th><a href="#sccs">sccs</a> (1972)</th>
</tr><tr><td>put file under version control</td>
<td><a href="#git-add">add</a></td>
<td><a href="#hg-add">add</a></td>
<td><a href="http://doc.bazaar.canonical.com/bzr.2.4/en/user-reference/add-help.html">add</a></td>
<td><a href="http://svnbook.red-bean.com/en/1.7/svn.ref.svn.c.add.html">add</a></td>
<td><a href="http://www.perforce.com/perforce/doc.091/manuals/cmdref/add.html">add</a></td>
<td><a href="http://ximbiot.com/cvs/manual/cvs-1.11.23/cvs_7.html#IDX133">add</a></td>
<td></td>
<td></td>
</tr><tr><td>annotate lines of source code with commit info</td>
<td><a href="#git-blame">blame</a></td>
<td><a href="#hg-annotate">annotate</a></td>
<td><a href="http://doc.bazaar.canonical.com/bzr.2.4/en/user-reference/annotate-help.html">annotate</a>/<a href="http://doc.bazaar.canonical.com/bzr.2.4/en/user-reference/annotate-help.html">ann</a></td>
<td><a href="http://svnbook.red-bean.com/en/1.7/svn.ref.svn.c.blame.html">blame</a>/<a href="http://svnbook.red-bean.com/en/1.7/svn.ref.svn.c.blame.html">ann</a></td>
<td><a href="http://www.perforce.com/perforce/doc.091/manuals/cmdref/annotate.html">annotate</a></td>
<td><a href="http://ximbiot.com/cvs/manual/cvs-1.11.23/cvs_16.html#SEC126">annotate</a></td>
<td></td>
<td></td>
</tr><tr><td>create a git-style branch</td>
<td><a href="#git-branch">branch</a></td>
<td><a href="#hg-bookmarks">bookmarks</a></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr><tr><td>create an svn-style branch</td>
<td></td>
<td><a href="#hg-branch">branch</a>(<a href="#hg-branches">es</a>)</td>
<td><a href="http://doc.bazaar.canonical.com/bzr.2.4/en/user-reference/branch-help.html">branch</a></td>
<td><a href="http://svnbook.red-bean.com/en/1.7/svn.ref.svn.c.copy.html">copy</a>/<a href="http://svnbook.red-bean.com/en/1.7/svn.ref.svn.c.copy.html">cp</a></td>
<td><a href="http://www.perforce.com/perforce/doc.091/manuals/cmdref/branch.html">branch</a>(<a href="http://www.perforce.com/perforce/doc.091/manuals/cmdref/branches.html">es)</a></td>
<td><a href="http://ximbiot.com/cvs/manual/cvs-1.11.23/cvs_4.html#SEC49">tag -b</a></td>
<td></td>
<td></td>
</tr><tr><td>update working directory to most recent version of a branch</td>
<td><a href="#git-checkout">checkout</a></td>
<td><a href="#hg-update">update</a>/<a href="#hg-update">up</a></td>
<td><a href="http://doc.bazaar.canonical.com/bzr.2.4/en/user-reference/checkout-help.html">checkout</a>/<a href="http://doc.bazaar.canonical.com/bzr.2.4/en/user-reference/checkout-help.html">co</a></td>
<td><a href="http://svnbook.red-bean.com/en/1.7/svn.ref.svn.c.update.html">update</a>/<a href="http://svnbook.red-bean.com/en/1.7/svn.ref.svn.c.update.html">up</a></td>
<td><a href="http://www.perforce.com/perforce/doc.091/manuals/cmdref/sync.html">sync</a></td>
<td><a href="http://ximbiot.com/cvs/manual/cvs-1.11.23/cvs_16.html#SEC165">update</a></td>
<td><a href="http://linux.die.net/man/1/co">co -l</a></td>
<td><a href="http://www.lehman.cuny.edu/cgi-bin/man-cgi?sccs-get+1">get -e</a></td>
</tr><tr><td>get local copy of repository from server or existing repository</td>
<td><a href="#git-clone">clone</a></td>
<td><a href="#hg-clone">clone</a></td>
<td><a href="http://doc.bazaar.canonical.com/bzr.2.4/en/user-reference/branch-help.html">branch</a></td>
<td><a href="http://svnbook.red-bean.com/en/1.7/svn.ref.svn.c.checkout.html">checkout</a>/<a href="http://svnbook.red-bean.com/en/1.7/svn.ref.svn.c.checkout.html">co</a></td>
<td><a href="http://www.perforce.com/perforce/doc.091/manuals/cmdref/sync.html">sync</a></td>
<td><a href="http://ximbiot.com/cvs/manual/cvs-1.11.23/cvs_16.html#SEC129">checkout</a>/<a href="http://ximbiot.com/cvs/manual/cvs-1.11.23/cvs_16.html#SEC129">co</a></td>
<td></td>
<td></td>
</tr><tr><td>create a new commit</td>
<td><a href="#git-commit">commit</a></td>
<td><a href="#hg-commit">commit</a>/<a href="#hg-commit">ci</a></td>
<td><a href="http://doc.bazaar.canonical.com/bzr.2.4/en/user-reference/commit-help.html">commit</a>/<a href="http://doc.bazaar.canonical.com/bzr.2.4/en/user-reference/commit-help.html">ci</a></td>
<td><a href="http://svnbook.red-bean.com/en/1.7/svn.ref.svn.c.commit.html">commit</a>/<a href="http://svnbook.red-bean.com/en/1.7/svn.ref.svn.c.commit.html">ci</a></td>
<td><a href="http://www.perforce.com/perforce/doc.091/manuals/cmdref/submit.html">submit</a></td>
<td><a href="http://ximbiot.com/cvs/manual/cvs-1.11.23/cvs_16.html#SEC132">commit</a>/<a href="http://ximbiot.com/cvs/manual/cvs-1.11.23/cvs_16.html#SEC132">ci</a></td>
<td><a href="http://linux.die.net/man/1/ci">ci</a></td>
<td><a href="http://www.lehman.cuny.edu/cgi-bin/man-cgi?sccs-delta+1">delta</a></td>
</tr><tr><td>show difference between file in working directory and most recent commit</td>
<td><a href="#git-diff">diff</a></td>
<td><a href="#hg-diff">diff</a></td>
<td><a href="http://doc.bazaar.canonical.com/bzr.2.4/en/user-reference/diff-help.html">diff</a>/<a href="http://doc.bazaar.canonical.com/bzr.2.4/en/user-reference/diff-help.html">di</a></td>
<td><a href="http://svnbook.red-bean.com/en/1.7/svn.ref.svn.c.diff.html">diff</a>/<a href="http://svnbook.red-bean.com/en/1.7/svn.ref.svn.c.diff.html">di</a></td>
<td><a href="http://www.perforce.com/perforce/doc.091/manuals/cmdref/diff.html">diff</a></td>
<td><a href="http://ximbiot.com/cvs/manual/cvs-1.11.23/cvs_16.html#SEC137">diff</a></td>
<td><a href="http://linux.die.net/man/1/rcsdiff">rcsdiff</a></td>
<td><a href="http://www.lehman.cuny.edu/cgi-bin/man-cgi?sccs-sccsdiff">sccsdiff</a></td>
</tr><tr><td>show commits available to be pulled<br /><span style="color: gray"><em>git: pull changes into remote branches; don't modify local branches</em></span></td>
<td><a href="#git-fetch">fetch</a></td>
<td><a href="#hg-incoming">incoming</a>/<a href="#hg-incoming">in</a></td>
<td><a href="http://doc.bazaar.canonical.com/bzr.2.4/en/user-reference/missing-help.html">missing</a></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr><tr><td>online documentation</td>
<td><a href="#git-help">help</a></td>
<td><a href="#hg-help">help</a></td>
<td><a href="http://doc.bazaar.canonical.com/bzr.2.4/en/user-reference/help-help.html">help</a></td>
<td><a href="http://svnbook.red-bean.com/en/1.7/svn.ref.svn.c.help.html">help</a></td>
<td><a href="http://www.perforce.com/perforce/doc.091/manuals/cmdref/help.html">help</a></td>
<td></td>
<td></td>
<td></td>
</tr><tr><td>create a repository from</td>
<td><a href="#git-init">init</a></td>
<td><a href="#hg-init">init</a></td>
<td><a href="http://doc.bazaar.canonical.com/bzr.2.4/en/user-reference/init-help.html">init</a></td>
<td></td>
<td></td>
<td><a href="http://ximbiot.com/cvs/manual/cvs-1.11.23/cvs_2.html#IDX63">init</a></td>
<td><a href="http://linux.die.net/man/1/ci">ci</a></td>
<td><a href="http://www.lehman.cuny.edu/cgi-bin/man-cgi?sccs-admin+1">admin</a></td>
</tr><tr><td>show commit information for current branch in reverse chronological order</td>
<td><a href="#git-log">log</a></td>
<td><a href="#hg-log">log</a></td>
<td><a href="http://doc.bazaar.canonical.com/bzr.2.4/en/user-reference/log-help.html">log</a></td>
<td><a href="http://svnbook.red-bean.com/en/1.7/svn.ref.svn.c.log.html">log</a></td>
<td><a href="http://www.perforce.com/perforce/doc.091/manuals/cmdref/filelog.html">filelog</a></td>
<td><a href="http://ximbiot.com/cvs/manual/cvs-1.11.23/cvs_16.html#SEC150">log</a></td>
<td><a href="http://linux.die.net/man/1/rlog">rlog</a></td>
<td></td>
</tr><tr><td>merge branches</td>
<td><a href="#git-merge">merge</a></td>
<td><a href="#hg-merge">merge</a></td>
<td><a href="http://doc.bazaar.canonical.com/bzr.2.4/en/user-reference/merge-help.html">merge</a></td>
<td><a href="http://svnbook.red-bean.com/en/1.7/svn.ref.svn.c.merge.html">merge</a></td>
<td><a href="http://www.perforce.com/perforce/doc.091/manuals/cmdref/integrate.html">integrate</a></td>
<td></td>
<td></td>
<td></td>
</tr><tr><td>change the name of a file under version control</td>
<td><a href="#git-mv">mv</a></td>
<td><a href="#hg-rename">rename</a>/<a href="#hg-rename">mv</a></td>
<td><a href="http://doc.bazaar.canonical.com/bzr.2.4/en/user-reference/mv-help.html">mv</a></td>
<td><a href="http://svnbook.red-bean.com/en/1.7/svn.ref.svn.c.move.html">move</a>/<a href="http://svnbook.red-bean.com/en/1.7/svn.ref.svn.c.move.html">mv</a></td>
<td><a href="http://www.perforce.com/perforce/doc.091/manuals/cmdref/move.html">move</a></td>
<td></td>
<td></td>
<td></td>
</tr><tr><td>get commits from a remote repository</td>
<td><a href="#git-pull">pull</a></td>
<td><a href="#hg-pull">pull</a></td>
<td><a href="http://doc.bazaar.canonical.com/bzr.2.4/en/user-reference/pull-help.html">pull</a></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr><tr><td>push commits to a remote repository</td>
<td><a href="#git-push">push</a></td>
<td><a href="#hg-push">push</a></td>
<td><a href="http://doc.bazaar.canonical.com/bzr.2.4/en/user-reference/push-help.html">push</a></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr><tr><td>move the commits on a branch to the end of another branch</td>
<td><a href="#git-rebase">rebase</a></td>
<td><a href="#hg-rebase">rebase</a></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr><tr><td>show remote repositories</td>
<td><a href="#git-remote">remote -v show</a></td>
<td><a href="#hg-paths">paths</a></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr><tr><td>make the working directory match the most recent commit</td>
<td><a href="#git-reset">reset</a></td>
<td><a href="#hg-revert">revert</a></td>
<td></td>
<td><a href="http://svnbook.red-bean.com/en/1.7/svn.ref.svn.c.revert.html">revert</a></td>
<td><a href="http://www.perforce.com/perforce/doc.091/manuals/cmdref/revert.html">revert</a></td>
<td></td>
<td></td>
<td></td>
</tr><tr><td>create a commit which undoes the result of a previous commit</td>
<td><a href="#git-revert">revert</a></td>
<td><a href="#hg-backout">backout</a></td>
<td><a href="http://doc.bazaar.canonical.com/bzr.2.4/en/user-reference/revert-help.html">revert</a></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr><tr><td>mark a file with merge conflicts as resolved</td>
<td><a href="#git-add">add</a></td>
<td><a href="#hg-resolve">resolve</a></td>
<td><a href="http://doc.bazaar.canonical.com/bzr.2.4/en/user-reference/resolve-help.html">resolve</a></td>
<td><a href="http://svnbook.red-bean.com/en/1.7/svn.ref.svn.c.resolve.html">resolve</a></td>
<td><a href="http://www.perforce.com/perforce/doc.091/manuals/cmdref/resolve.html">resolve</a></td>
<td></td>
<td></td>
<td></td>
</tr><tr><td>mark a file as not present in the next commit</td>
<td><a href="#git-rm">rm</a></td>
<td><a href="#hg-remove">remove</a>/<a href="#hg-remove">rm</a></td>
<td><a href="http://doc.bazaar.canonical.com/bzr.2.4/en/user-reference/remove-help.html">remove</a>/<a href="http://doc.bazaar.canonical.com/bzr.2.4/en/user-reference/remove-help.html">rm</a></td>
<td><a href="http://svnbook.red-bean.com/en/1.7/svn.ref.svn.c.delete.html">delete</a>/<a href="http://svnbook.red-bean.com/en/1.7/svn.ref.svn.c.delete.html">rm</a></td>
<td><a href="http://www.perforce.com/perforce/doc.091/manuals/cmdref/delete.html">delete</a></td>
<td><a href="http://ximbiot.com/cvs/manual/cvs-1.11.23/cvs_16.html#SEC160">remove</a></td>
<td></td>
<td></td>
</tr><tr><td>write contents of a file version to standard out</td>
<td><a href="#git-show">show</a></td>
<td><a href="#hg-cat">cat</a></td>
<td><a href="http://doc.bazaar.canonical.com/bzr.2.4/en/user-reference/cat-help.html">cat</a></td>
<td><a href="http://svnbook.red-bean.com/en/1.7/svn.ref.svn.c.cat.html">cat</a></td>
<td><a href="http://www.perforce.com/perforce/doc.091/manuals/cmdref/print.html">print</a></td>
<td><a href="http://ximbiot.com/cvs/manual/cvs-1.11.23/cvs_16.html#SEC132">checkout -p</a></td>
<td><a href="http://linux.die.net/man/1/co">co</a></td>
<td><a href="http://www.lehman.cuny.edu/cgi-bin/man-cgi?sccs-get+1">get -p</a></td>
</tr><tr><td>store uncommitted working directory changes in a temporary location</td>
<td><a href="#git-stash">stash</a></td>
<td><a href="#hg-shelve">shelve</a></td>
<td><a href="http://doc.bazaar.canonical.com/bzr.2.4/en/user-reference/shelve-help.html">shelve</a></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr><tr><td>show files in working directory which don't match the most recent commit</td>
<td><a href="#git-status">status</a></td>
<td><a href="#hg-status">status</a>/<a href="#hg-status">st</a></td>
<td><a href="http://doc.bazaar.canonical.com/bzr.2.4/en/user-reference/status-help.html">status</a>/<a href="http://doc.bazaar.canonical.com/bzr.2.4/en/user-reference/status-help.html">st</a></td>
<td><a href="http://svnbook.red-bean.com/en/1.7/svn.ref.svn.c.status.html">status</a>/<a href="http://svnbook.red-bean.com/en/1.7/svn.ref.svn.c.status.html">st</a></td>
<td><a href="http://www.perforce.com/perforce/doc.091/manuals/cmdref/changes.html">changes</a></td>
<td><a href="http://www.lodestar2.com/people/dyork/talks/2001/ols/frames/foil23.html">status</a></td>
<td></td>
<td></td>
</tr><tr><td>give a name to a commit</td>
<td><a href="#git-tag">tag</a></td>
<td><a href="#hg-tag">tag</a>(<a href="#hg-tags">s</a>)</td>
<td><a href="http://doc.bazaar.canonical.com/bzr.2.4/en/user-reference/tag-help.html">tag</a>(<a href="http://doc.bazaar.canonical.com/bzr.2.4/en/user-reference/tags-help.html">s</a>)</td>
<td><a href="http://svnbook.red-bean.com/en/1.7/svn.ref.svn.c.copy.html">copy</a>/<a href="http://svnbook.red-bean.com/en/1.7/svn.ref.svn.c.copy.html">cp</a></td>
<td><a href="http://www.perforce.com/perforce/doc.091/manuals/cmdref/tag.html">tag</a></td>
<td><a href="http://ximbiot.com/cvs/manual/cvs-1.11.23/cvs_4.html#SEC49">tag</a></td>
<td></td>
<td></td>
</tr></table><p><strong>archiving and patching tools:</strong> <a href="#diff">diff</a> | <a href="#cpio">cpio</a> | <a href="#diff3">diff3</a> | <a href="#ar">ar</a> | <a href="#tar">tar</a> | <a href="#patch">patch</a> | <a href="#zip">zip</a> | <a href="#jar">jar</a> | <a href="#rsync">rsync</a></p>
<p><a name="dvc" id="dvc"></a></p>
<h1 id="toc0"><span>Distributed Version Control</span></h1>
<p><strong>git and hg compared:</strong> <a href="#repo-version">repositories and versions</a> | <a href="#file-dir-commit">files, directories, and commits</a> | <a href="#branch-tag-merge">branches, tags, and merges</a> | <a href="#renamed-files">renamed files</a> | <a href="#identifiers">identifiers</a> | <a href="#repo-url">repository urls</a> | <a href="#config-file">config files</a> | <a href="#ignore-file">ignore files</a> | <a href="#hook">hooks</a> | <a href="#metasyntactic-var">metasyntactic variables</a></p>
<table class="wiki-content-table"><tr><th><a href="#git">git</a> usage</th>
<th><a href="#git">git</a> description</th>
<th><a href="#hg">hg</a> usage</th>
<th><a href="#hg">hg</a> description</th>
</tr><tr><td><span class="fixed"><a name="git-add" id="git-add"></a><a href="http://schacon.github.com/git/git-add.html">add</a> <a href="#PATH">PATH</a> …<br /><a href="http://schacon.github.com/git/git-add.html">add</a> -e <a href="#FILE">FILE</a><br /><a href="http://schacon.github.com/git/git-add.html">add</a> -i <a href="#FILE">FILE</a> …<br /><a href="http://schacon.github.com/git/git-add.html">add</a> -u <a href="#PATH">PATH</a> …</span></td>
<td>Add file contents to the index. If PATH is a directory it is added with all its contents recursively. Error if no arguments are provided.<br /><br />
Add a portion of a change to the index by editing the diff.<br /><br />
Add file contents to the index interactively.<br /><br />
Only add file contents to the index which are already tracked. Newly created files will never be added to the index when the -u flag is used.</td>
<td><a name="hg-add" id="hg-add"></a><a href="http://www.selenic.com/mercurial/hg.1.html#add">add</a> <span style="white-space: pre-wrap;">[</span><a href="#HG-PATH">PATH</a>] …</td>
<td>Put files under version control. If no argument is provided all files in the working directory are put under version control; equivalent to<br /><br /><span style="white-space: pre-wrap;">  </span>git add .<br /><span style="white-space: pre-wrap;"> </span><br /><span style="color: gray"><em>Under</em> hg <em>a file must be added only once, before it is first committed. Under</em> git <em>a file must be added each time it is modified.</em> hg add <em>is used to notify Mercurial that a file is being tracked by the version control system. It is not possible to add part of a file change.</em> git add, <em>by contrast, adds the changes to a file, including partial changes, to a staging area called the index to be flushed out with the next commit.</em></span></td>
</tr><tr><td><span class="fixed"><span style="color: gray"><em>none</em></span></span></td>
<td><span style="color: gray"><em>how to perform equivalent of Mercurial addremove with Git:</em></span><br /><span style="white-space: pre-wrap;"> </span><br /><span style="white-space: pre-wrap;">  </span>git add .<br /><span style="white-space: pre-wrap;">  </span>git ls-files -deleted | xargs git rm</td>
<td><a href="http://www.selenic.com/mercurial/hg.1.html#addremove">addremove</a> <span style="white-space: pre-wrap;">[</span><a href="#HG-PATH">PATH</a>] …</td>
<td>Add or remove files depending upon whether they are in the working directory; if no PATHs are provided, all new files are added and all missing files are removed.</td>
</tr><tr><td><span class="fixed"><a href="http://schacon.github.com/git/git-archive.html">archive</a> <span style="white-space: pre-wrap;">--</span>format=tar <a href="#TREEISH">TREEISH</a> &gt; <a href="#NAME">NAME</a>.tar</span></td>
<td>Create a tarball from TREEISH.</td>
<td><a href="http://www.selenic.com/mercurial/hg.1.html#archive">archive</a> -t tar ../<a href="#HG-NAME">NAME</a>.tar</td>
<td>archives root directory; git does not.</td>
</tr><tr><td></td>
<td></td>
<td><a href="#hg-backout">backout</a> <span style="color: gray"><em>described below</em></span></td>
<td></td>
</tr><tr><td><span class="fixed"><a name="git-bisect" id="git-bisect"></a><a href="http://schacon.github.com/git/git-bisect.html">bisect</a> <span style="color: gray"><em>see manual</em></span></span></td>
<td>Find by binary search the change that introduced a bug.</td>
<td><a href="http://www.selenic.com/mercurial/hg.1.html#bisect">bisect</a></td>
<td></td>
</tr><tr><td><span class="fixed"><a name="git-blame" id="git-blame"></a><a href="http://schacon.github.com/git/git-blame.html">blame</a> <a href="#PATH">PATH</a> [<a href="#COMMIT">COMMIT</a>]</span></td>
<td>Show the revision number, author and timestamp of the last commit which modified each line in FILE. COMMIT can be used to specify an older version of FILE.</td>
<td><a name="hg-annotate" id="hg-annotate"></a><a href="http://www.selenic.com/mercurial/hg.1.html#annotate">annotate</a> -cudln [-r <a href="#HG-REV">REV</a>] <span style="white-space: pre-wrap;">[</span><a href="#HG-PATH">PATH</a>]</td>
<td>Mercurial by default only indicates the local revision number. The flags -c, -u, -d, -l, and -n add changeset, user, date, line number, and local revision number.</td>
</tr><tr><td><span class="fixed"><a name="git-branch" id="git-branch"></a><a href="http://schacon.github.com/git/git-branch.html">branch</a> [-r|-a]<br /><a href="http://schacon.github.com/git/git-branch.html">branch</a> [<span style="white-space: pre-wrap;">--</span>contains|<span style="white-space: pre-wrap;">--</span>merged] <a href="#COMMIT">COMMIT</a><br /><a href="http://schacon.github.com/git/git-branch.html">branch</a> <a href="#NAME">NAME</a> <span style="white-space: pre-wrap;">[</span><a href="#COMMIT">COMMIT</a><span style="white-space: pre-wrap;">]</span><br /><a href="http://schacon.github.com/git/git-branch.html">branch</a> <span style="white-space: pre-wrap;">--</span>track <a href="#NAME">NAME</a> <span style="white-space: pre-wrap;">[</span><a href="#BRANCH">BRANCH</a><span style="white-space: pre-wrap;">]</span><br /><a href="http://schacon.github.com/git/git-branch.html">branch</a> -m <a href="#BRANCH">BRANCH</a> <a href="#NAME">NAME</a><br /><a href="http://schacon.github.com/git/git-branch.html">branch</a> (-d|-D) <a href="#BRANCH">BRANCH</a></span></td>
<td>List branches. If -r option is provided remote tracking branches are listed. If -a option is provided both local and remote tracking branches are listed.<br /><br />
List branches that are descendants of COMMIT if <span style="white-space: pre-wrap;">--</span>contains option is used. List branches that are ancestors of COMMIT if<br /><span style="white-space: pre-wrap;">--</span>merged is used.<br /><br />
Create a branch named NAME using COMMIT as a starting point. If COMMIT is not specified then HEAD is the starting point.<br /><br />
Create a branch NAME which tracks BRANCH. Usually BRANCH is a remote tracking branch. This configures the repository so that when <tt>git pull</tt> is executed on NAME a merge equivalent to <tt>git merge BRANCH</tt> is automatically performed. If BRANCH is not specified the current branch is tracked.<br /><br />
Rename the branch BRANCH to NAME.<br /><br />
Delete branch BRANCH. Use -D to delete a branch with commits which have not been merged.</td>
<td><a name="hg-bookmarks" id="hg-bookmarks"></a><a href="http://www.selenic.com/mercurial/hg.1.html#bookmarks">bookmarks</a></td>
<td></td>
</tr><tr><td></td>
<td></td>
<td><a name="hg-branches" id="hg-branches"></a><a href="http://www.selenic.com/mercurial/hg.1.html#branches">branches</a><br /><a name="hg-branch" id="hg-branch"></a><a href="http://www.selenic.com/mercurial/hg.1.html#branch">branch</a><br /><a href="http://www.selenic.com/mercurial/hg.1.html#branch">branch</a> <a href="#HG-BRANCH">BRANCH</a></td>
<td>List branches.<br /><br />
Show the current branch. A close git equivalent is<br /><br /><span style="white-space: pre-wrap;">  </span>git branch | grep '*'<br /><br />
Create a branch named BRANCH which will be created from the working directory with the next commit.<br /><br /><span style="color: gray"><em>Mercurial does not provide a mechanism for renaming or deleting branches. The recommended way to get rid of unwanted branches is to rename the repository and then clone it to the original name with</em><br /><br /><span style="white-space: pre-wrap;">  </span>hg clone -r REV</span></td>
</tr><tr><td><span class="fixed"><a href="http://schacon.github.com/git/git-bundle.html">bundle</a> <span style="color: gray"><em>see manual</em></span></span></td>
<td>Move objects and refs by archive.</td>
<td><a href="http://www.selenic.com/mercurial/hg.1.html#bundle">bundle</a><br /><a name="hg-unbundle" id="hg-unbundle"></a><a href="http://www.selenic.com/mercurial/hg.1.html#unbundle">unbundle</a></td>
<td></td>
</tr><tr><td></td>
<td></td>
<td><a href="#hg-cat">cat</a> <span style="color: gray"><em>described below</em></span></td>
<td></td>
</tr><tr><td><span class="fixed"><a name="git-cat-file" id="git-cat-file"></a><a href="http://schacon.github.com/git/git-cat-file.html">cat-file</a> -p <a href="#HASH">HASH</a><br /><a href="http://schacon.github.com/git/git-cat-file.html">cat-file</a> -t <a href="#HASH">HASH</a></span></td>
<td>Display content of repository object HASH.<br /><br />
Get the type of repository object HASH. The type can be 'blob', 'tree', or 'commit'.</td>
<td><span style="color: gray"><em>none</em></span></td>
<td><span style="color: gray"><em>Mercurial does not assign identifiers to files and directories, so no equivalent of</em> git cat-file <em>is possible. The following are equivalent, however:</em><br /><br /><span style="white-space: pre-wrap;">  </span>git cat-file commit HASH<br /><span style="white-space: pre-wrap;">  </span>hg log -r REV</span></td>
</tr><tr><td><span class="fixed"><a name="git-checkout" id="git-checkout"></a><a href="http://schacon.github.com/git/git-checkout.html">checkout</a> [-f] <a href="#BRANCH">BRANCH</a><br /><a href="http://schacon.github.com/git/git-checkout.html">checkout</a> <a href="#TREEISH">TREEISH</a> <a href="#PATH">PATH</a> …<br /><a href="http://schacon.github.com/git/git-checkout.html">checkout</a> -p <a href="#PATH">PATH</a> …<br /><a href="http://schacon.github.com/git/git-checkout.html">checkout</a> -b <a href="#NAME">NAME</a> <span style="white-space: pre-wrap;">[</span><a href="#COMMIT">COMMIT</a><span style="white-space: pre-wrap;">]</span></span></td>
<td>Checkout the branch named BRANCH. BRANCH becomes the current branch. Changes in the index are carried over but if there are changes to tracked files that are not in the index the checkout fails. If the -f option is specified changes in the index and to tracked files will be discarded.<br /><br />
Copy the files or directories <tt>PATH …</tt> from TREEISH to the working directory. The current branch is not changed.<br /><br />
Copy files or directories <tt>PATH …</tt> from the index. The current branch is not changed.<br /><br />
Create a branch named NAME using COMMIT as the starting point. If COMMIT is not specified the HEAD of the current branch is used. NAME becomes the current branch.</td>
<td><a name="hg-update" id="hg-update"></a><a href="http://www.selenic.com/mercurial/hg.1.html#update">update</a> [-c|-C] (<a href="#HG-BRANCH">BRANCH</a>|-r <a href="#HG-REV">REV</a>)<br /><a href="http://www.selenic.com/mercurial/hg.1.html#revert">revert</a> [-a] [-C] [-r <a href="#HG-REV">REV</a>] <a href="#HG-PATH">PATH</a> …<br /><span style="color: gray"><em>none</em></span><br /><a href="http://www.selenic.com/mercurial/hg.1.html#branch">branch</a> <a href="#HG-BRANCH">BRANCH</a></td>
<td>Checkout BRANCH or REV. If there are changes in the working directory they are applied to the new working directory; the -C option discards changes in the working directory and the -c option prevents an update when there are changes.<br /><br />
Revert PATHs to how they are according to the parent of the working directory or REV if specified. If this makes the files different from how they are in the parent of the working directory then the file will have a modified status. Backup copies of the files will be saved with .orig suffixes unless the -C option is used. If no PATHs are provided and the<br />
-a option is used, the entire working tree will be reverted.<br /><br /><span style="color: gray"><em>Mercurial has no index and thus no equivalent to</em> git checkout -p.</span><br /><br />
Start a new BRANCH using the current working directory which will be created with the next commit.</td>
</tr><tr><td><span class="fixed"><a href="http://schacon.github.com/git/git-cherry-pick.html">cherry-pick</a> <a href="#COMMIT">COMMIT</a> …</span></td>
<td>Apply the changes introduced by some COMMITs to current branch. Although it is possible to specify multiple commits, it is better to use git rebase <span style="white-space: pre-wrap;">--</span>onto if the commits are a chain because rebasing provides mechanisms (continue, skip, abort) for dealing with conflicts.</td>
<td><a href="http://www.selenic.com/mercurial/hg.1.html#export">export</a><br /><a href="http://www.selenic.com/mercurial/hg.1.html#import">import</a><br /><a href="http://www.selenic.com/mercurial/hg.1.html#graft">graft</a></td>
<td></td>
</tr><tr><td><span class="fixed"><a href="http://schacon.github.com/git/git-clean.html">clean</a> -n<br /><a href="http://schacon.github.com/git/git-clean.html">clean</a> -f</span></td>
<td>Show what files would be removed if run with <tt>-f</tt> option.<br /><br />
Remove untracked files from the working tree.</td>
<td><a href="http://www.selenic.com/mercurial/hg.1.html#purge">purge</a></td>
<td></td>
</tr><tr><td><span class="fixed"><a name="git-clone" id="git-clone"></a><a href="http://schacon.github.com/git/git-clone.html">clone</a> [-b <a href="#BRANCH">BRANCH</a>] <a href="#URL">URL</a> <span style="white-space: pre-wrap;">[</span><a href="#DIR">DIR</a>]<br /><a href="http://schacon.github.com/git/git-clone.html">clone</a> [-o <a href="#NAME">NAME</a>] <a href="#URL">URL</a> <span style="white-space: pre-wrap;">[</span><a href="#DIR">DIR</a>]<br /><a href="http://schacon.github.com/git/git-clone.html">clone</a> [-c SECTION.KEY=VAL] <a href="#URL">URL</a> <span style="white-space: pre-wrap;">[</span><a href="#DIR">DIR</a>]<br /><a href="http://schacon.github.com/git/git-clone.html">clone</a> (<span style="white-space: pre-wrap;">--</span>bare|<span style="white-space: pre-wrap;">--</span>mirror) <a href="#URL">URL</a> <span style="white-space: pre-wrap;">[</span><a href="#DIR">DIR</a>]<br /><a href="http://schacon.github.com/git/git-clone.html">clone</a> <span style="white-space: pre-wrap;">--</span>recursive <a href="#URL">URL</a></span></td>
<td>Clone a repository. If BRANCH is provided, then it will be the current branch in the new repository. If DIR is provided it will be the name of the directory containing the repository.<br /><br />
If NAME is provided it is used as the name of the origin instead of the default 'origin'.<br /><br />
If any KEY=VAL pairs are provided they are written in the .git/config file of the new repository.<br /><br />
If <span style="white-space: pre-wrap;">--</span>bare is provided as an option a bare repository will be created. In a bare repository there is no working directory and the contents of the top directory are what would have been in the .git directory had the <span style="white-space: pre-wrap;">--</span>bare flag not been used.<br /><br />
Clone a repository and any submodules.</td>
<td><a name="hg-clone" id="hg-clone"></a><a href="http://www.selenic.com/mercurial/hg.1.html#clone">clone</a> [-r <a href="#HG-REV">REV</a>|-b <a href="#HG-BRANCH">BRANCH</a>] … <a href="#HG-URL">URL</a> <span style="white-space: pre-wrap;">[</span><a href="#HG-DIR">DIR</a>]<br /><span style="color: gray"><em>none</em></span><br /><span style="color: gray"><em>none</em></span><br /><a href="http://www.selenic.com/mercurial/hg.1.html#clone">clone</a> -U <a href="#HG-URL">URL</a> <span style="white-space: pre-wrap;">[</span><a href="#HG-DIR">DIR</a>]</td>
<td>Clone the repository at URL. Only changesets in the history of REV or BRANCH are copied over to the new repository. If DIR is provided it will be the name of the directory containing the new repository.<br /><br /><span style="color: gray"><em>The name</em> default <em>which is assigned to</em> URL <em>can be changed by editing</em> .hg/hgrc.</span><br /><br /><span style="color: gray"><em>Configuration settings are changed by editing</em> ~/.hgrc.</span><br /><br />
Clone the repository at URL. The clone will have no working directory files, only a .hg subdirectory.</td>
</tr><tr><td><span class="fixed"><a name="git-commit" id="git-commit"></a><a href="http://schacon.github.com/git/git-commit.html">commit</a> [-m <a href="#STR">STR</a>]<br /><a href="http://schacon.github.com/git/git-commit.html">commit</a> -a [-m <a href="#STR">STR</a>]<br /><a href="http://schacon.github.com/git/git-commit.html">commit</a> <span style="white-space: pre-wrap;">--</span>amend<br /><a href="http://schacon.github.com/git/git-commit.html">commit</a> <span style="white-space: pre-wrap;">--</span>amend <span style="white-space: pre-wrap;">--</span>author=<a href="#STR">STR</a></span></td>
<td>Record changes to the repository. STR is the commit message.<br /><br />
Commit all changes to tracked files.<br /><br />
Merge index with head commit.<br /><br />
Change author of most recent commit.</td>
<td><a name="hg-commit" id="hg-commit"></a><a href="http://www.selenic.com/mercurial/hg.1.html#commit">commit</a> [-m <a href="#HG-STR">STR</a>]<br /><a href="http://www.selenic.com/mercurial/hg.1.html#commit">commit</a> -A [-m <a href="#HG-STR">STR</a>]<br /><span style="color: gray"><em>none</em></span><br /><span style="color: gray"><em>none</em></span></td>
<td>With both <tt>git</tt> and <tt>hg</tt> the files to be committed can be specified on the command line.<br /><span style="white-space: pre-wrap;"> </span><br />
If no files are specified <tt>hg commit</tt> will commit all modified files that are currently tracked in the working directory. Newly created files that have not be added with <tt>hg add</tt> will not be committed. <tt>git commit</tt> without arguments by contrast will only commit the files that have been specified with <tt>git add</tt>. <tt>git commit -a</tt> behaves like the <tt>hg commit</tt>, however.</td>
</tr><tr><td><span class="fixed"><a name="git-config" id="git-config"></a><a href="http://schacon.github.com/git/git-config.html">config</a> -l [<span style="white-space: pre-wrap;">--</span>global]<br /><a href="http://schacon.github.com/git/git-config.html">config</a> -e [<span style="white-space: pre-wrap;">--</span>global]<br /><a href="http://schacon.github.com/git/git-config.html">config</a> <span style="white-space: pre-wrap;">--</span>get [<span style="white-space: pre-wrap;">--</span>global] SECTION.KEY<br /><a href="http://schacon.github.com/git/git-config.html">config</a> [<span style="white-space: pre-wrap;">--</span>global] SECTION.KEY VAL<br /><a href="http://schacon.github.com/git/git-config.html">config</a> <span style="white-space: pre-wrap;">--</span>unset [<span style="white-space: pre-wrap;">--</span>global] SECTION.KEY<br /><a href="http://schacon.github.com/git/git-config.html">config</a> <span style="white-space: pre-wrap;">--</span>remove-section SECTION</span></td>
<td>List configuration settings.<br /><br />
Open configuration settings file in an editor.<br /><br />
Lookup configuration setting KEY in section SECTION.<br /><br />
Add configuration setting KEY in section SECTION with value VAL.<br /><br />
Remove configuration setting KEY in section SECTION.<br /><br />
Remove all keys in SECTION.<br /><br /><span style="color: gray"><em>Writes modify</em> .git/config <em>unless</em> <span style="white-space: pre-wrap;">--</span>global <em>is specified, in which case</em> ~/.gitconfig <em>is edited. Reads look at both files unless</em> <span style="white-space: pre-wrap;">--</span>global <em>is specified, in which case they only look at</em> ~/.gitconfig.</span></td>
<td><a name="hg-showconfig" id="hg-showconfig"></a><a href="http://www.selenic.com/mercurial/hg.1.html#showconfig">showconfig</a><br /><br /><span style="color: gray"><em>none</em></span></td>
<td>List configuration settings.<br /><br /><span style="color: gray"><em>Configuration settings are changed by editing</em> ~/.hgrc</span></td>
</tr><tr><td></td>
<td></td>
<td><a href="http://www.selenic.com/mercurial/hg.1.html#copy">copy</a></td>
<td></td>
</tr><tr><td></td>
<td></td>
<td><a href="http://www.selenic.com/mercurial/hg.1.html#copy">debugdata</a> <a href="#HG-FILE">FILE</a> <a href="#HG-REV">REV</a></td>
<td></td>
</tr><tr><td><span class="fixed"><a href="http://schacon.github.com/git/git-describe.html">describe</a></span></td>
<td>Show the most recent tag that is reachable from a commit.</td>
<td></td>
<td></td>
</tr><tr><td><span class="fixed"><a name="git-diff" id="git-diff"></a><a href="http://schacon.github.com/git/git-diff.html">diff</a> <span style="white-space: pre-wrap;">[</span><a href="#PATH">PATH</a> …]<br /><a href="http://schacon.github.com/git/git-diff.html">diff</a> <span style="white-space: pre-wrap;">--</span>cached <span style="white-space: pre-wrap;">[</span><a href="#COMMIT">COMMIT</a>] <span style="white-space: pre-wrap;">[</span><a href="#PATH">PATH</a> …]<br /><a href="http://schacon.github.com/git/git-diff.html">diff</a> <a href="#COMMIT">COMMIT1</a> <a href="#COMMIT">COMMIT2</a> <span style="white-space: pre-wrap;">[</span><a href="#PATH">PATH</a> …]<br /><a href="http://schacon.github.com/git/git-diff.html">diff</a> <a href="#COMMIT">COMMIT</a> <span style="white-space: pre-wrap;">[</span><a href="#PATH">PATH</a> …]</span></td>
<td>Produce a diff between the working directory and the index. If PATHs are provided only diffs for those files are produced.<br /><br />
Produce a diff between the index and COMMIT. If COMMIT is not specified it defaults to HEAD.<br /><br />
Produce a diff between COMMIT1 and COMMIT2.<br /><br />
Produce a diff between the working directory and COMMIT.</td>
<td><a name="hg-diff" id="hg-diff"></a><a href="http://www.selenic.com/mercurial/hg.1.html#diff">diff</a> <span style="white-space: pre-wrap;">[</span><a href="#HG-PATH">PATH</a> …]<br /><a href="http://www.selenic.com/mercurial/hg.1.html#diff">diff</a> -r <a href="#HG-REV">REV</a> <span style="white-space: pre-wrap;">[</span><a href="#HG-PATH">PATH</a> …]<br /><a href="http://www.selenic.com/mercurial/hg.1.html#diff">diff</a> -r <a href="#HG-REV">REV1</a> -r <a href="#HG-REV">REV2</a> <span style="white-space: pre-wrap;">[</span><a href="#HG-PATH">PATH</a> …]<br /><a href="http://www.selenic.com/mercurial/hg.1.html#diff">diff</a> -c <a href="#HG-REV">REV</a> <span style="white-space: pre-wrap;">[</span><a href="#HG-PATH">PATH</a> …]</td>
<td>Produce a diff between tracked files in the working directory and the last commit. If PATHs are provided only diffs for those files are produced.<br /><br />
Produce a diff between tracked files in the working directory and REV.<br /><br />
Produce a diff between REV1 and REV2.<br /><br />
Produce a diff between the previous revision to REV and REV.</td>
</tr><tr><td><span class="fixed"><a name="git-fetch" id="git-fetch"></a><a href="http://schacon.github.com/git/git-fetch.html">fetch</a> [-f] <a href="#REPO">REPO</a> <span style="white-space: pre-wrap;">[[+]</span><a href="#REF">REF1</a>:<a href="#REF">REF2</a>]<br /><a href="http://schacon.github.com/git/git-fetch.html">fetch</a> [-f]<br /><a href="http://schacon.github.com/git/git-fetch.html">fetch</a> [-f] <span style="white-space: pre-wrap;">--</span>all<br /><a href="http://schacon.github.com/git/git-fetch.html">fetch</a> [-f] <span style="white-space: pre-wrap;">--</span>multiple <a href="#REPO">REPO</a> …</span></td>
<td>Fetch objects and refs from REPO. If REF1 and REF2 are not supplied, then all tracking branches are fetched if REPO is a remote; HEAD is fetched if REPO is a URL. FETCH_HEAD is set to point to the local copy of the remote HEAD. The branch to fetch can be specified with REF1 and the destination in the local repository with REF2. The -f option will force a fetch if the destination exists and the update isn't a fast forward.<br /><br />
Fetch objects and refs from origin.<br /><br />
Fetch objects and refs from all remotes.<br /><br />
Fetch objects and refs from multiple REPOs.</td>
<td><span style="color: gray"><em>none</em></span></td>
<td><span style="color: gray"><em>Mercurial does not have remote tracking branches; hence no equivalent to</em> git fetch.</span></td>
</tr><tr><td><a href="http://schacon.github.com/git/git-fsck.html">fsck</a></td>
<td></td>
<td><a name="hg-verify" id="hg-verify"></a><a href="http://www.selenic.com/mercurial/hg.1.html#verify">verify</a></td>
<td></td>
</tr><tr><td></td>
<td></td>
<td><a name="hg-grep" id="hg-grep"></a><a href="http://www.selenic.com/mercurial/hg.1.html#forget">forget</a> <a href="#HG-PATH">PATH</a> …</td>
<td>Mark files to removed in next commit, but don't remove from working directory.</td>
</tr><tr><td><span class="fixed"><a href="http://schacon.github.com/git/git-gc.html">gc</a> <span style="color: gray"><em>see manual</em></span></span></td>
<td>Remove unnecessary files and optimize the local repository.</td>
<td></td>
<td></td>
</tr><tr><td><a name="git-grep" id="git-grep"></a><span class="fixed"><a href="http://schacon.github.com/git/git-grep.html">grep</a> [-i] [-v] [-E|F|P] <a href="#STR">STR</a><br /><a href="http://schacon.github.com/git/git-grep.html">grep</a> [-h|H] [-l|L] [-n] <a href="#STR">STR</a><br /><a href="http://schacon.github.com/git/git-grep.html">grep</a> -e <a href="#STR">STR</a> (<span style="white-space: pre-wrap;">--</span>and|<span style="white-space: pre-wrap;">--</span>or) -e <a href="#STR">STR</a><br /><a href="http://schacon.github.com/git/git-grep.html">grep</a> <a href="#STR">STR</a> (<span style="white-space: pre-wrap;">--</span>cached|<a href="#TREEISH">TREEISH</a>)</span></td>
<td>Print lines matching a pattern.</td>
<td><a name="hg-grep" id="hg-grep"></a><a href="http://www.selenic.com/mercurial/hg.1.html#grep">grep</a></td>
<td></td>
</tr><tr><td><a name="git-hash-object" id="git-hash-object"></a><span class="fixed"><a href="http://schacon.github.com/git/git-hash-object.html">hash-object</a> <a href="#PATH">PATH</a><br /><a href="http://schacon.github.com/git/git-hash-object.html">hash-object</a> -w <a href="#PATH">PATH</a></span></td>
<td>Compute the object ID for a file.<br /><br />
Add a blob to the object database.</td>
<td><span style="color: gray"><em>none</em></span></td>
<td></td>
</tr><tr><td></td>
<td></td>
<td><a href="http://www.selenic.com/mercurial/hg.1.html#heads">heads</a></td>
<td></td>
</tr><tr><td><a name="git-help" id="git-help"></a><span class="fixed"><a href="http://schacon.github.com/git/git-help.html">help</a><br /><a href="http://schacon.github.com/git/git-help.html">help</a> <a href="#CMD">CMD</a></span><br /><a href="http://schacon.github.com/git/git-help.html">help</a> -a<br /><a href="http://schacon.github.com/git/git-help.html">help</a> -g</td>
<td>List most common commands and shared options.<br /><br />
Show help for git command CMD.<br /><br />
List all subcommands.<br /><br />
List available concept guides. Use <tt>git help GUIDE</tt> to read a concept guide.<br /><br /><span style="color: gray"><em>man pages might also be installed:</em><br /><br /><span style="white-space: pre-wrap;">  </span>man git<br /><span style="white-space: pre-wrap;">  </span>man git-clone</span></td>
<td><a name="hg-help" id="hg-help"></a><a href="http://www.selenic.com/mercurial/hg.1.html#help">help</a> [-v]<br /><a href="http://www.selenic.com/mercurial/hg.1.html#help">help</a> <a href="#HG-CMD">CMD</a></td>
<td>List commands and additional help topics. With the -v flag shared options are also listed.<br /><br />
Show help for <tt>hg</tt> command CMD. Use <tt>hg help TOPIC</tt> to read a help topic.</td>
</tr><tr><td></td>
<td></td>
<td><a href="http://www.selenic.com/mercurial/hg.1.html#identify">identify</a></td>
<td></td>
</tr><tr><td><span class="fixed"><span style="color: gray"><em>none</em></span></span></td>
<td></td>
<td><a name="hg-incoming" id="hg-incoming"></a><a href="http://www.selenic.com/mercurial/hg.1.html#incoming">incoming</a></td>
<td>Shows the changesets that are available to be pulled.</td>
</tr><tr><td><a name="git-init" id="git-init"></a><span class="fixed"><a href="http://schacon.github.com/git/git-init.html">init</a> <span style="white-space: pre-wrap;">[</span><a href="#DIR">DIR</a>]<br /><a href="http://schacon.github.com/git/git-init.html">init</a> <span style="white-space: pre-wrap;">--</span>bare <span style="white-space: pre-wrap;">[</span><a href="#DIR">DIR</a>]</span></td>
<td>Create an empty git repository or reinitialize an existing one. If DIR is not specified the current directory is used.<br /><br />
Create a bare empty git repository or reinitialize an existing one. In a bare repository there is no working tree and the files normally in <tt>.git</tt> are in the top directory. If DIR is not specified the current directory is used.</td>
<td><a name="hg-init" id="hg-init"></a><a href="http://www.selenic.com/mercurial/hg.1.html#init">init</a> <span style="white-space: pre-wrap;">[</span><a href="#HG-DIR">DIR</a>]<br /><span style="color: gray"><em>none</em></span></td>
<td></td>
</tr><tr><td></td>
<td></td>
<td><a href="http://www.selenic.com/mercurial/hg.1.html#locate">locate</a></td>
<td></td>
</tr><tr><td><a name="git-log" id="git-log"></a><span class="fixed"><a href="http://schacon.github.com/git/git-log.html">log</a> [-N] <span style="white-space: pre-wrap;">[</span><a href="#PATH">PATH</a> …]<br /><a href="http://schacon.github.com/git/git-log.html">log</a> [-N] <span style="white-space: pre-wrap;">--</span>branches <span style="white-space: pre-wrap;">[</span><a href="#PATH">PATH</a> …]</span></td>
<td>Show commit log for current branch. If N is provided limit output to last N commits. If PATHs are provided, limit output to commits that affected one or more of them.<br /><br />
Show commit log for all branches.</td>
<td><a name="hg-log" id="hg-log"></a><a href="http://www.selenic.com/mercurial/hg.1.html#log">log</a> [-l N] -b <a href="#HG-BRANCH">BRANCH</a> <span style="white-space: pre-wrap;">[</span><a href="#HG-PATH">PATH</a> …]<br /><a href="http://www.selenic.com/mercurial/hg.1.html#log">log</a> [-l N] <span style="white-space: pre-wrap;">[</span><a href="#HG-PATH">PATH</a> …]</td>
<td>Show commit log for BRANCH. Use 'tip' for the current branch. If N is provided limit output to last N commits. If PATHs are provided limit output to commits that affected one or more of them.<br /><br />
Show commit log for all branches.</td>
</tr><tr><td><a name="git-ls-files" id="git-ls-files"></a><span class="fixed"><a href="http://schacon.github.com/git/git-ls-files.html">ls-files</a> <span style="white-space: pre-wrap;">[</span><a href="#PATH">PATH</a>] …<br /><a href="http://schacon.github.com/git/git-ls-files.html">ls-files</a> <span style="white-space: pre-wrap;">--</span>stage <span style="white-space: pre-wrap;">[</span><a href="#PATH">PATH</a>] …<br /><a href="http://schacon.github.com/git/git-ls-files.html">ls-files</a> <span style="white-space: pre-wrap;">--</span>delete <span style="white-space: pre-wrap;">[</span><a href="#PATH">PATH</a>] …</span></td>
<td>List files under version control. This is the files which have had "git add" run on them and have not subsequently had "git rm" run on them. If PATH is not specified, all files are listed. Otherwise only files in PATH are listed.<br /><br />
With the <span style="white-space: pre-wrap;">--</span>stage option the command includes the mode bits, object ID, and stage number of the files.<br /><br />
List files under version control which aren't in the working directory.</td>
<td><a href="http://www.selenic.com/mercurial/hg.1.html#manifest">manifest</a> [-r <a href="#HG-REV">REV</a>]<br /><span style="color: gray"><em>none</em></span><br /><a href="http://www.selenic.com/mercurial/hg.1.html#status">status</a> -d</td>
<td></td>
</tr><tr><td><a name="git-ls-tree" id="git-ls-tree"></a><span class="fixed"><a href="http://schacon.github.com/git/git-ls-tree.html">ls-tree</a> <a href="#TREEISH">TREEISH</a><br /><a href="http://schacon.github.com/git/git-ls-tree.html">ls-tree</a> -r[t] <a href="#TREEISH">TREEISH</a></span></td>
<td>List the contents of a tree.<br /><br />
List the contents of a tree and all its subtrees recursively. Use the -t option to include subtrees and their object IDs in the output.</td>
<td></td>
<td></td>
</tr><tr><td><a name="git-merge" id="git-merge"></a><span class="fixed"><a href="http://schacon.github.com/git/git-merge.html">merge</a> <a href="#COMMIT">COMMIT</a> …<br /><a href="http://schacon.github.com/git/git-merge.html">merge</a> <span style="white-space: pre-wrap;">--</span>abort<br /><a href="http://schacon.github.com/git/git-merge.html">merge</a> <span style="white-space: pre-wrap;">--</span>squash</span></td>
<td>Merge one or more commits into the current branch.<br /><br />
Restore the working directory to the state it had before a merge was attempted. This might not be possible if there were uncommitted changes in the working directory.<br /><br />
Modify index and working directory with results of merge but don't commit.</td>
<td><a name="hg-merge" id="hg-merge"></a><a href="http://www.selenic.com/mercurial/hg.1.html#merge">merge</a> <span style="white-space: pre-wrap;">[</span>[-r] <a href="#HG-REV">REV</a>]<br /><a href="http://www.selenic.com/mercurial/hg.1.html#update">update</a> <span style="white-space: pre-wrap;">--</span>clean</td>
<td></td>
</tr><tr><td><a name="git-mv" id="git-mv"></a><span class="fixed"><a href="http://schacon.github.com/git/git-mv.html">mv</a> <a href="#PATH">OLDPATH</a> <a href="#PATH">NEWPATH</a><br /><a href="http://schacon.github.com/git/git-mv.html">mv</a> <a href="#FILE">FILE</a> … <a href="#DIR">DIR</a></span></td>
<td>Move or rename a file, a directory, or a symlink.<br /><br />
Move one or more files into a directory.</td>
<td><a name="hg-rename" id="hg-rename"></a><a href="http://www.selenic.com/mercurial/hg.1.html#rename">rename</a> OLD NEW<br /><a href="http://www.selenic.com/mercurial/hg.1.html#rename">rename</a> FILE … DIR</td>
<td></td>
</tr><tr><td><span class="fixed"><a href="http://schacon.github.com/git/git-notes.html">notes</a> <span style="color: gray"><em>see manual</em></span></span></td>
<td>Add or inspect object notes.</td>
<td></td>
<td></td>
</tr><tr><td><span class="fixed"><span style="color: gray"><em>none</em></span></span></td>
<td></td>
<td><a href="http://www.selenic.com/mercurial/hg.1.html#outgoing">outgoing</a></td>
<td>Show the changesets that have not been pushed. Synonym: out</td>
</tr><tr><td></td>
<td></td>
<td><a href="http://www.selenic.com/mercurial/hg.1.html#parents">parents</a></td>
<td></td>
</tr><tr><td></td>
<td></td>
<td><a href="http://www.selenic.com/mercurial/hg.1.html#phase">phase</a></td>
<td></td>
</tr><tr><td><a name="git-pull" id="git-pull"></a><span class="fixed"><a href="http://schacon.github.com/git/git-pull.html">pull</a> [-f] <a href="#REPO">REPO</a> <span style="white-space: pre-wrap;">[[+]</span><a href="#REF">REF1</a>:<a href="#REF">REF2</a>]<br /><a href="http://schacon.github.com/git/git-pull.html">pull</a> [-f]</span></td>
<td>Short for<br /><br /><span style="white-space: pre-wrap;">  </span>git fetch [-f] REPO <span style="white-space: pre-wrap;">[</span>[+]REF1:REF2]<br /><span style="white-space: pre-wrap;">  </span>git merge FETCH_HEAD<br /><br />
Short for<br /><br /><span style="white-space: pre-wrap;">  </span>git fetch [-f]<br /><span style="white-space: pre-wrap;">  </span>git merge FETCH_HEAD</td>
<td><a name="hg-pull" id="hg-pull"></a><a href="http://www.selenic.com/mercurial/hg.1.html#pull">pull</a> [-u] <span style="white-space: pre-wrap;">[</span><a href="#HG-SOURCE">SOURCE</a>]<br /><a href="http://www.selenic.com/mercurial/hg.1.html#pull">pull</a> (-b <a href="#HG-BRANCH">BRANCH</a>) … <span style="white-space: pre-wrap;">[</span><a href="#HG-SOURCE">SOURCE</a>]</td>
<td>Pull changesets from SOURCE. If no SOURCE is specified, the value of default in the [paths] section of .hg/hgrc is used. Only changesets which affect branches already on local repository are pulled. If the -u flag is used and there were changesets affecting the current branch, make the working directory match the most recent changeset.<br /><br />
Pull changesets affecting BRANCH from SOURCE. The -b flag can be used multiple times.</td>
</tr><tr><td><a name="git-push" id="git-push"></a><span class="fixed"><a href="http://schacon.github.com/git/git-push.html">push</a> [-f]<br /><a href="http://schacon.github.com/git/git-push.html">push</a> [-f] [-u] <a href="#REPO">REPO</a> <span style="white-space: pre-wrap;">[</span><a href="#BRANCH">BRANCH</a>] …<br /><a href="http://schacon.github.com/git/git-push.html">push</a> [-f] <span style="white-space: pre-wrap;">--</span>all <a href="#REPO">REPO</a><br /><a href="http://schacon.github.com/git/git-push.html">push</a> [-f] <a href="#REPO">REPO</a> [+]<a href="#REF">REF1</a>:<a href="#REF">REF2</a><br /><a href="http://schacon.github.com/git/git-push.html">push</a> <span style="white-space: pre-wrap;">--</span>delete <a href="#REPO">REPO</a> <a href="#BRANCH">BRANCH</a> …</span></td>
<td>If the current branch is a tracking branch for a remote branch, then push to the repository for the remote branch. Otherwise the command does nothing. If the <tt>-f</tt> option is used conflicts will be overwritten in favor of the local repository.<br /><br />
Push to REPO. If one or more BRANCHES are specified, all necessary objects are copied to the remote repository and the remote refs are updated. If no BRANCHES are specified, the branches that were set using 'remote set-branch' are used. With the -u flag make the branches tracking branches for the corresponding remote branches.<br /><br />
Push all local branches to REPO. If any local branches do not have remote branches and remote tracking branches they are added.<br /><br />
Push local branch REF1 to remote branch REF2 on REPO. If necessary a remote tracking branch is created.<br /><br />
Delete the specified remote BRANCHES and their remote tracking branches.</td>
<td><a name="hg-push" id="hg-push"></a><a href="http://www.selenic.com/mercurial/hg.1.html#push">push</a> [-f] <span style="white-space: pre-wrap;">[</span><a href="#HG-SOURCE">SOURCE</a>]<br /><a href="http://www.selenic.com/mercurial/hg.1.html#push">push</a> -b <a href="#HG-BRANCH">BRANCH</a> [<span style="white-space: pre-wrap;">--</span>new-branch] <span style="white-space: pre-wrap;">[</span><a href="#HG-SOURCE">SOURCE</a>]</td>
<td>Push changesets to SOURCE. If no SOURCE is specified, the value of default in the [paths] section of .hg/hgrc is used. Only changesets which affect branches already on SOURCE are pushed unless the -f flag is used.<br /><br />
Push changesets affecting BRANCH to SOURCE. The -b flag can be used multiple times. This will fail if BRANCH is not on SOURCE unless the <span style="white-space: pre-wrap;">--</span>new-branch flag is used.</td>
</tr><tr><td><a name="git-rebase" id="git-rebase"></a><span class="fixed"><a href="http://schacon.github.com/git/git-rebase.html">rebase</a> <a href="#BRANCH">BRANCH</a><br /><a href="http://schacon.github.com/git/git-rebase.html">rebase</a> <span style="white-space: pre-wrap;">--</span>onto <a href="#BRANCH">BRANCH</a> <a href="#COMMIT">COMMIT1</a> <a href="#COMMIT">COMMIT2</a><br /><a href="http://schacon.github.com/git/git-rebase.html">rebase</a> <span style="white-space: pre-wrap;">--</span>abort<br /><a href="http://schacon.github.com/git/git-rebase.html">rebase</a> <span style="white-space: pre-wrap;">--</span>continue<br /><a href="http://schacon.github.com/git/git-rebase.html">rebase</a> <span style="white-space: pre-wrap;">--</span>skip<br /><a href="http://schacon.github.com/git/git-rebase.html">rebase</a> -i <a href="#COMMIT">COMMIT</a></span></td>
<td>Rebase BRANCH onto the current branch. All commits on BRANCH going back to the latest common ancestor are applied to the current branch; the head of BRANCH remains the same and the head of the current branch points to the new branch.<br /><br />
Apply all commits after but not including COMMIT1 and up to and including COMMIT2 to BRANCH. If successful the repository will have a detached HEAD, meaning that HEAD points at a commit and not a named branch. Use git branch NAME to assign a branch name to HEAD and then git checkout NAME to switch to the new branch.<br /><br />
Abort the results of a rebase that had conflicts.<br /><br />
Continue with a rebase that had conflicts which have been resolved by editing the files and running <tt>add</tt> on them.<br /><br />
Skip commit that caused conflicts and continue with rebase.<br /><br />
Perform an interactive rebase on current branch using all commits after but not including COMMIT. This can be used to squash multiple commits into a single commit.</td>
<td><a href="http://www.selenic.com/mercurial/hg.1.html#rebase">rebase</a></td>
<td></td>
</tr><tr><td></td>
<td></td>
<td><a href="http://www.selenic.com/mercurial/hg.1.html#recover">recover</a></td>
<td></td>
</tr><tr><td><a name="git-reflog" id="git-reflog"></a><span class="fixed"><a href="http://schacon.github.com/git/git-reflog.html">reflog</a> <span style="color: gray"><em>see manual</em></span></span></td>
<td>Show the history of changes to refs and HEAD. This will contain branch commits as well as the creation and switching of branches.</td>
<td></td>
<td></td>
</tr><tr><td><a name="git-remote" id="git-remote"></a><span class="fixed"><a href="http://schacon.github.com/git/git-remote.html">remote</a><br /><a href="http://schacon.github.com/git/git-remote.html">remote</a> add [-t <a href="#BRANCH">BRANCH</a>] … <a href="#NAME">NAME</a> <a href="#URL">URL</a><br /><a href="http://schacon.github.com/git/git-remote.html">remote</a> add [-m <a href="#BRANCH">BRANCH</a>] <a href="#NAME">NAME</a> <a href="#URL">URL</a><br /><a href="http://schacon.github.com/git/git-remote.html">remote</a> rm <a href="#REMOTE">REMOTE</a><br /><a href="http://schacon.github.com/git/git-remote.html">remote</a> rename <a href="#REMOTE">REMOTE</a> <a href="#NAME">NAME</a><br /><a href="http://schacon.github.com/git/git-remote.html">remote</a> show [-v]<br /><a href="http://schacon.github.com/git/git-remote.html">remote</a> show [-n] <a href="#REMOTE">REMOTE</a><br /><a href="http://schacon.github.com/git/git-remote.html">remote</a> set-head <a href="#REMOTE">REMOTE</a> (-a|-d) <a href="#BRANCH">BRANCH</a><br /><a href="http://schacon.github.com/git/git-remote.html">remote</a> set-url <span style="white-space: pre-wrap;">--</span>add <a href="#REMOTE">REMOTE</a> <a href="#URL">URL</a><br /><a href="http://schacon.github.com/git/git-remote.html">remote</a> set-url <span style="white-space: pre-wrap;">--</span>delete <a href="#REMOTE">REMOTE</a> <a href="#URL">URL</a><br /><a href="http://schacon.github.com/git/git-remote.html">remote</a> set-branches <a href="#REMOTE">REMOTE</a> [<span style="white-space: pre-wrap;">--</span>add] \<br /><span style="white-space: pre-wrap;">  </span><a href="#BRANCH">BRANCH</a> …</span></td>
<td>List the remotes.<br /><br />
Add a remote NAME at url URL. The -t option can be used repeatedly to track specific branches. Otherwise all branches are tracked.<br /><br />
Add a remote NAME at url URL. The -m option can be used to set the head. The head can also be set with the set-head subcommand.<br /><br />
Remove REMOTE.<br /><br />
Rename REMOTE to NAME.<br /><br />
Show the name of the remote repository. With -v flag show the url for the remote repository.<br /><br />
Get information about REMOTE including remote branches. This requires connecting to the remote machine unless the -n option is used.<br /><br />
Set the head for the remote to BRANCH. Having a remote head permits the remote name to be used in places a branch name would normally be used.<br /><br />
Add a URL to REMOTE. This can be used to push to multiple repositories simultaneously.<br /><br />
Delete a URL from REMOTE.<br /><br />
Set branches for REMOTE. If the<br /><span style="white-space: pre-wrap;">--</span>add option is used, the branches are added to the existing branches. Otherwise the new branches replace the existing branches. These are the branches that will get pushed or pulled when no branches are explicitly specified.</td>
<td><a name="hg-paths" id="hg-paths"></a><a href="http://www.selenic.com/mercurial/hg.1.html#paths">paths</a><br /><span style="color: gray"><em>none</em></span></td>
<td>List the paths.<br /><br /><span style="color: gray"><em>Names are assigned to repository urls in the</em> [paths] <em>section of the</em> .hg/hgrc <em>file. When a repository is cloned the source url is given the name</em> default.</span><br /><br /><span style="color: gray"><em>Mercurial does not provide commands for adding and removing paths. Instead one edits the</em> .hg/hgrc <em>file.</em></span></td>
</tr><tr><td><a name="git-reset" id="git-reset"></a><span class="fixed"><a href="http://schacon.github.com/git/git-reset.html">reset</a> <span style="white-space: pre-wrap;">--</span>soft <a href="#COMMIT">COMMIT</a><br /><a href="http://schacon.github.com/git/git-reset.html">reset</a> [<span style="white-space: pre-wrap;">--</span>mixed] <span style="white-space: pre-wrap;">[</span><a href="#COMMIT">COMMIT</a>]<br /><a href="http://schacon.github.com/git/git-reset.html">reset</a> <span style="white-space: pre-wrap;">--</span>hard <span style="white-space: pre-wrap;">[</span><a href="#COMMIT">COMMIT</a>]</span></td>
<td>Move branch head to COMMIT. Neither the index nor the working directory are modified.<br /><br />
Move branch head to COMMIT and reset the index. The working directory is not modified. If COMMIT is not specified, then reset the index to HEAD.<br /><br />
Move branch head to COMMIT and reset index and working directory. If COMMIT is not specified, then reset the index and working directory to HEAD.</td>
<td><span style="color: gray"><em>none</em></span><br /><br /><a name="hg-revert" id="hg-revert"></a><a href="http://www.selenic.com/mercurial/hg.1.html#revert">revert</a></td>
<td>Mercurial does not have an equivalent to the Git index. <tt>revert</tt> modifies the working directory.</td>
</tr><tr><td></td>
<td></td>
<td><a name="hg-resolve" id="hg-resolve"></a><span class="fixed"><a href="http://www.selenic.com/mercurial/hg.1.html#resolve">resolve</a> FILE …<br /><a href="http://www.selenic.com/mercurial/hg.1.html#resolve">resolve</a> -a<br /><a href="http://www.selenic.com/mercurial/hg.1.html#resolve">resolve</a> -l<br /><a href="http://www.selenic.com/mercurial/hg.1.html#resolve">resolve</a> -m FILE …<br /><a href="http://www.selenic.com/mercurial/hg.1.html#resolve">resolve</a> -u FILE …</span></td>
<td>List all unresolved</td>
</tr><tr><td><a name="git-revert" id="git-revert"></a><span class="fixed"><a href="http://schacon.github.com/git/git-revert.html">revert</a> [-n] <a href="#COMMIT">COMMIT</a> …<br /><a href="http://schacon.github.com/git/git-revert.html">revert</a> [-n] <a href="#COMMIT">COMMIT1</a>..<a href="#COMMIT">COMMIT2</a></span></td>
<td>Create one or more commits which reverse the effects of the COMMITs. If the <tt>-n</tt> the reversing changes are not committed but merely applied to the index and working directory.<br /><br />
Create one or more commits which reverse the effects of COMMIT1 up to but not including COMMIT2.</td>
<td><a name="hg-backout" id="hg-backout"></a><a href="http://www.selenic.com/mercurial/hg.1.html#backout">backout</a> -r <span style="color: gray"><em>REV</em></span></td>
<td></td>
</tr><tr><td><a name="git-rev-list" id="git-rev-list"></a><span class="fixed"><a href="http://schacon.github.com/git/git-rev-list.html">rev-list</a> <a href="#COMMIT">COMMIT</a><br /><a href="http://schacon.github.com/git/git-rev-list.html">rev-list</a> <a href="#COMMIT">COMMIT1</a> ^<a href="#COMMIT">COMMIT2</a></span></td>
<td>Show commits which are ancestors of COMMIT in reverse chronological order.<br /><br />
Show commits which are ancestors of COMMIT1 and not ancestors of COMMIT2 in reverse chronological order.</td>
<td></td>
<td></td>
</tr><tr><td><a name="git-rm" id="git-rm"></a><span class="fixed"><a href="http://schacon.github.com/git/git-rm.html">rm</a> [-f] <a href="#FILE">FILE</a> …<br /><a href="http://schacon.github.com/git/git-rm.html">rm</a> -r <a href="#DIR">DIR</a> …<br /><a href="http://schacon.github.com/git/git-rm.html">rm</a> <span style="white-space: pre-wrap;">--</span>cached <a href="#FILE">FILE</a> …</span></td>
<td>Remove files from the working tree and from the index. The <tt>-f</tt> option can be used to remove the files even if they have changes staged in the index.<br /><br />
Remove directories from the working tree and from the index.<br /><br />
Remove files from the index only.</td>
<td><a name="hg-remove" id="hg-remove"></a><a href="http://www.selenic.com/mercurial/hg.1.html#remove">remove</a> [-f] <a href="#HG-PATH">PATH</a> …<br /><a href="http://www.selenic.com/mercurial/hg.1.html#remove">remove</a> -A <a href="#HG-PATH">PATH</a> …<br /><a href="http://www.selenic.com/mercurial/hg.1.html#remove">remove</a> <span style="white-space: pre-wrap;">--</span>include <a href="#HG-PATTERN">PATTERN</a></td>
<td>Remove files. The <tt>-f</tt> option can be used to remove the files even if they have been modified or added.<br /><br />
With the -A flag remove files which are no longer in the working directory.<br /><br />
With the <span style="white-space: pre-wrap;">--</span>include flag remove files which match PATTERN.</td>
</tr><tr><td></td>
<td></td>
<td><a href="http://www.selenic.com/mercurial/hg.1.html#root">root</a></td>
<td></td>
</tr><tr><td></td>
<td></td>
<td><a href="http://www.selenic.com/mercurial/hg.1.html#serve">serve</a></td>
<td></td>
</tr><tr><td><span class="fixed"><a href="http://schacon.github.com/git/git-shortlog.html">shortlog</a> <span style="white-space: pre-wrap;">[</span><a href="#COMMIT">COMMIT1</a>..<a href="#COMMIT">COMMIT2</a>]</span></td>
<td>Summarize the commit history in a one-line-per-commit format. The commits are grouped by author. If a commit range is provided, it will include commits after COMMIT1 and up to and including COMMIT2.</td>
<td></td>
<td></td>
</tr><tr><td><a name="git-show" id="git-show"></a><span class="fixed"><a href="http://schacon.github.com/git/git-show.html">show</a> COMMIT:FILE</span></td>
<td>Show blob.</td>
<td><a name="hg-cat" id="hg-cat"></a><a href="http://www.selenic.com/mercurial/hg.1.html#cat">cat</a> -r REV FILE</td>
<td></td>
</tr><tr><td></td>
<td></td>
<td><a href="#hg-showconfig">showconfig</a> <span style="color: gray"><em>described above</em></span></td>
<td></td>
</tr><tr><td><a name="git-show-ref" id="git-show-ref"></a><span class="fixed"><a href="http://schacon.github.com/git/git-show-ref.html">show-ref</a></span></td>
<td>List all references.</td>
<td><span style="color: gray"><em>none</em></span></td>
<td></td>
</tr><tr><td><a name="git-stash" id="git-stash"></a><span class="fixed"><a href="http://schacon.github.com/git/git-stash.html">stash</a> [save <span style="white-space: pre-wrap;">[</span><a href="#STR">STR</a>]]<br /><a href="http://schacon.github.com/git/git-stash.html">stash</a> show <span style="white-space: pre-wrap;">[</span><a href="#STASH">STASH</a>]<br /><a href="http://schacon.github.com/git/git-stash.html">stash</a> pop <span style="white-space: pre-wrap;">[</span><a href="#STASH">STASH</a>]<br /><a href="http://schacon.github.com/git/git-stash.html">stash</a> list<br /><a href="http://schacon.github.com/git/git-stash.html">stash</a> drop <span style="white-space: pre-wrap;">[</span><a href="#STASH">STASH</a>]<br /><a href="http://schacon.github.com/git/git-stash.html">stash</a> clear</span></td>
<td>Stash the changes in a dirty working dir. If STR is provided it is used as an identifier.<br /><br />
Show specified or latest stash.<br /><br />
Recover specified or latest stash.<br /><br />
List stashes.<br /><br />
Delete specified or latest stash.<br /><br />
Delete all stashes.</td>
<td><a href="http://www.selenic.com/mercurial/hg.1.html#shelve">shelve</a></td>
<td></td>
</tr><tr><td><a name="git-status" id="git-status"></a><span class="fixed"><a href="http://schacon.github.com/git/git-status.html">status</a> <span style="white-space: pre-wrap;">[</span><a href="#PATH">PATH</a> …]</span></td>
<td>Show paths in the working tree that differ from the index, paths in the index which differ from HEAD, and paths in the working directory which are not in the index or HEAD. Reports on all files unless PATHs are provided.</td>
<td><a name="hg-status" id="hg-status"></a><a href="http://www.selenic.com/mercurial/hg.1.html#status">status</a></td>
<td></td>
</tr><tr><td><span class="fixed"><a href="http://schacon.github.com/git/git-submodule.html">submodule</a> <span style="color: gray"><em>see manual</em></span></span></td>
<td>Initialize, update or inspect submodules.</td>
<td><a href="http://www.selenic.com/mercurial/hg.1.html#subrepo">subrepo</a></td>
<td></td>
</tr><tr><td></td>
<td></td>
<td><a href="http://www.selenic.com/mercurial/hg.1.html#summary">summary</a></td>
<td></td>
</tr><tr><td><a name="git-tag" id="git-tag"></a><span class="fixed"><a href="http://schacon.github.com/git/git-tag.html">tag</a><br /><a href="http://schacon.github.com/git/git-tag.html">tag</a> <a href="#NAME">NAME</a> <span style="white-space: pre-wrap;">[</span><a href="#COMMIT">COMMIT</a>]<br /><a href="http://schacon.github.com/git/git-tag.html">tag</a> -d <a href="#TAG">TAG</a></span></td>
<td>List tags.<br /><br />
Create a tag. If COMMIT is not specified, HEAD is used.<br /><br />
Delete a tag.</td>
<td><a name="hg-tags" id="hg-tags"></a><span class="fixed"><a href="http://www.selenic.com/mercurial/hg.1.html#tags">tags</a><br /><a href="http://www.selenic.com/mercurial/hg.1.html#tag">tag</a> [-r REV] NAME<br /><a href="http://www.selenic.com/mercurial/hg.1.html#tag">tag</a> <span style="white-space: pre-wrap;">--</span>remove NAME</span></td>
<td></td>
</tr><tr><td></td>
<td></td>
<td><a href="http://www.selenic.com/mercurial/hg.1.html#tip">tip</a></td>
<td></td>
</tr><tr><td></td>
<td></td>
<td><a href="#hg-unbundle">unbundle</a> <span style="color: gray"><em>described above</em></span></td>
<td></td>
</tr><tr><td></td>
<td></td>
<td><a href="#hg-update">update</a> <span style="color: gray"><em>described above</em></span></td>
<td></td>
</tr><tr><td></td>
<td></td>
<td><a href="#hg-verify">verify</a> <span style="color: gray"><em>described above</em></span></td>
<td></td>
</tr><tr><td><a href="http://schacon.github.com/git/git-version.html">version</a></td>
<td>Show git version.</td>
<td><a href="http://www.selenic.com/mercurial/hg.1.html#version">version</a></td>
<td>Show Mercurial version.</td>
</tr><tr><th><span style="color: #efefef"><span style="white-space: pre-wrap;">_______________________________________________</span></span></th>
<th><span style="color: #efefef"><span style="white-space: pre-wrap;">______________________________________________</span></span></th>
<th><span style="color: #efefef"><span style="white-space: pre-wrap;">______________________________________________</span></span></th>
<th><span style="color: #efefef"><span style="white-space: pre-wrap;">______________________________________________</span></span></th>
</tr></table><p><a name="git" id="git"></a><a name="hg" id="hg"></a><a name="diff-git-hg" id="diff-git-hg"></a></p>
<h1 id="toc1"><span><a href="#dvc">Git and Mercurial Compared</a></span></h1>
<p><strong>git and hg compared:</strong> <a href="#repo-version">repositories and versions</a> | <a href="#file-dir-commit">files, directories, and commits</a> | <a href="#branch-tag-merge">branches, tags, and merges</a> | <a href="#renamed-files">renamed files</a> | <a href="#identifiers">identifiers</a> | <a href="#repo-url">repository urls</a> | <a href="#config-file">config files</a> | <a href="#ignore-file">ignore files</a> | <a href="#hook">hooks</a> | <a href="#metasyntactic-var">metasyntactic variables</a></p>
<p><a name="repo-version" id="repo-version"></a></p>
<h2 id="toc2"><span><a href="#dvc">repositories and versions</a></span></h2>
<p>A set of files and directories under version control is called a <em>repository</em>.</p>
<p><strong>git</strong></p>
<p>A file or directory under version control has one or more <em>versions</em>. One adds new versions to the repository by making a <em>commit</em>. The set of files and directories in the repository can also be seen as having versions; these versions are called <em>commits</em>; they consist of at most one version of each file or directory in the repository.</p>
<p><strong>hg</strong></p>
<p>A file or directory under version control has one or more <em>revisions</em>. One adds new revisions to the repository by making a <em>commit</em>. The set of files and directories in the repository can also be seen as having revisions; these revisions are called <em>changesets</em>.</p>
<p><a name="file-dir-commit" id="file-dir-commit"></a></p>
<h2 id="toc3"><span><a href="#dvc">files, directories, and commits</a></span></h2>
<p><strong>git</strong></p>
<p>Git keeps copies of all versions of files and directories that have been committed, as well as the commits themselves, in the directory <tt>.git/objects</tt>. All objects are identified by their 40 character SHA-1 checksum called the <em>hash</em>. There are three types of git objects in this directory: a <em>blob</em>, which is the contents of a file. A <em>tree</em>, which corresponds to file system directory, and which contains the file system name of the objects, which can be blobs (regular files) or trees (directories) and their hashes. Finally, a <em>commit</em> contains the top level tree for the commit and the parents of the commit. Their will be zero parents for the initial commit and more than one parent for a commit which was created by a merge. Git stores a separate, albeit compressed, copy of each version of a file, tree, or commit in the <tt>.git/objects</tt> directory.</p>
<p>The <tt>git cat-file -p HASH</tt> command, though not needed for day-to-day use, provides a way to inspect a git object. It shows the additional information stored in trees and commits which we have not mentioned here.</p>
<p><strong>hg</strong></p>
<p>Mercurial uses a storage format called a <em>revlog</em> to store the versions of a file. Most revlogs are kept in <tt>.hg/store/data</tt>. A revlog usually consists of two files: one with an <tt>.i</tt> suffix and another with a <tt>.d</tt> suffix. If the file is small and has little or no history, the revlog might consist of only a <tt>.i</tt> file. A revlog which tracks the history of a file is called a <em>filelog</em>. When the file is first committed, it is written to the filelog. Each time a commit is made which alters it, a delta describing the change is appended to the file. Thus, to fetch the current version of a file, all the deltas must be applied in order to the original version of the file. As an performance optimization, Mercurial will sometimes append the full version of the file to a filelog. Thus, when reconstructing the current version, one need only apply delta starting from the last time the full version was stored.</p>
<p>Mercurial does not store directly. Instead, it stores a <em>manifest</em> for each version of the repository. A version of the repository is called a <em>changeset</em>. The manifest is list of the pathnames relative to the root of all files in the changeset. Rather than store the manifests in separate files, all the manifests for the repository are stored in a revlog in <tt>.hg/store</tt>. Each time a new changeset is added to a repository by a <tt>push</tt>, <tt>pull</tt>, or <tt>commit</tt> command, it is assigned a local revision number which is the order in which it was appended to the local manifest revlog. If the changeset was pulled from a different repository, the local revision numbers might not match.</p>
<p>Information about changesets is also stored in the <em>changelog</em>, which is another type of revlog. The changelog has a pointer to manifest revision, pointers to parents of the changeset, and information about the committer.</p>
<p><a name="branch-tag-merge" id="branch-tag-merge"></a></p>
<h2 id="toc4"><span><a href="#dvc">branches, tags, and merges</a></span></h2>
<p><strong>git</strong></p>
<p>Git has a low level feature called a <em>ref</em> which it uses to implement branches and tags. A ref is a file in <tt>.git/refs</tt> which contains the hash of a commit. Branches are in <tt>.git/refs/heads</tt> and tags are in <tt>.git/refs/tags</tt>. Whenever a commit is made, the value in <tt>.git/refs/heads/BRANCH</tt> is updated where BRANCH is the current branch. The values in <tt>.git/refs/tags/TAG</tt> do not change.</p>
<p>Git also stores remote branches and tags in <tt>.git/refs/remotes/REPO</tt>. The <tt>git branch -r</tt> command can be used to list remote branches. Remote branches have names of the form REPO/BRANCH, and each remote branch will usually have a tracking branch, which is a local branch named BRANCH. This will be the case for any branches which were copied when a repository is created via <tt>git clone</tt>. A tracking branch can also be created when a remote repository is added using <tt>git remote -t BRANCH REPO URL</tt>. <tt>git fetch</tt> will only update remote branches. <tt>git pull</tt> will update remote branches and merge them with their tracking branches.</p>
<p>The default branch is called <tt>master</tt>. It is created by <tt>git init</tt>, and is the branch that is copied by <tt>git clone</tt> if no branch is explicitly specified.</p>
<p>Commits have zero or more parent commits. <tt>git commit</tt> creates a commit with one parent, except in the case of the initial commit. <tt>git merge</tt> creates a commit with two or more parent commits. If the commit has three or more parents, the merge is called an octopus merge.</p>
<p><strong>hg</strong></p>
<p>A Mercurial branch is a name which is stored in a changeset. When a commit is made, the new changeset inherits the branch name of the previous changeset, unless a different name was specified before the commit with <tt>hg branch</tt>. To switch to a new branch one must make a commit.</p>
<p>Mercurial tags are names for changesets. They are stored in the <tt>.hgtags</tt> file at the repository root. Creating a tag requires making a commit.</p>
<p>Mercurial does not support octopus merges. Thus changesets have at most two parents. A changeset created by <tt>hg merge</tt> sets the branch of the new changeset to be the branch of the first argument of</p>
<p>Changesets can have no branch specified. This is also called the <tt>default</tt> branch.</p>
<p><a name="renamed-files" id="renamed-files"></a></p>
<h2 id="toc5"><span><a href="#dvc">renamed files</a></span></h2>
<p>It is desirable for a version control system to track file name changes. Otherwise commands like <tt>blame</tt> and <tt>log</tt> when used on a single path will not show activity before the name change. If the version control system is aware of a name change, it can correctly handle the case when merging where the name was changed on one branch and edited on the other.</p>
<p><strong>git</strong></p>
<p>Although Git provides a <tt>git mv</tt> subcommand, it does not actually track name changes. Instead, it will assume that a name change occurred during a commit when one file disappeared, another appeared, and they have similar contents. Hence, even if the user uses <tt>git rm</tt>, a Unix command <tt>mv</tt>, and <tt>git add</tt>, Git will preserve the history for the file.</p>
<p><strong>hg</strong></p>
<p>Mercurial keeps track of the name a file had in each revision of a filelog. The <tt>hg rename</tt> subcommand must be used to preserve history.</p>
<p><a name="identifiers" id="identifiers"></a></p>
<h2 id="toc6"><span><a href="#dvc">identifiers</a></span></h2>
<p><strong>git</strong></p>
<p>Git has three types of objects: commits, trees, and blobs. Each is assigned a unique hash ID which is a 40 digit hex string. The identifier is called the hash, SHA1, object name, or object identifier with no difference in meaning. When the underlying object is a commit or tree it is also called a tree-ish.</p>
<p>Commit hashes are the hashes the user most commonly sees and needs to reference. Only as many of the digits that are necessary to uniquely identify an object in the object database need to be provided to a git command; usually the first 6 or 7 is sufficient.</p>
<p>HEAD is a special name which refers to the most recent commit of the current branch. It is stored in <tt>.git/HEAD</tt>. The previous commit is HEAD^ and the commit before that is HEAD<span style="white-space: pre-wrap;">^^</span>. The is also numerical notation: HEAD~4 is 4 commits ahead of HEAD. If HEAD is the result of a merge, then the antecedents can be be referenced with HEAD^1 and HEAD^2.</p>
<p><strong>hg</strong></p>
<p>In Mercurial, every commit is assigned two identifiers: a <em>local revision number</em> and a universal <em>changeset identifier</em>. The local revision number is a small integer that is unique only to the local repository. The first local revision number issued is zero, and it increments with each local commit. The changeset identifier is a twelve digit hex number which is unique across all repositories.</p>
<p>The <tt>-r</tt> option is used to pass a mercurial commit identifier to a command. The argument can be a local revision number, a changeset identifier, or both separated by a colon.</p>
<p><a name="repo-url" id="repo-url"></a></p>
<h2 id="toc7"><span><a href="#dvc">repository urls</a></span></h2>
<p><strong>git</strong></p>
<table class="wiki-content-table"><tr><th>protocol</th>
<th>format</th>
</tr><tr><td>ssh</td>
<td>ssh:<span style="white-space: pre-wrap;">//[user@]host.xz[:port]/path/to/repo.git/</span><br />
[user@]host.xz:path/to/repo.git/</td>
</tr><tr><td>git</td>
<td><span style="white-space: pre-wrap;">git:</span>//<span style="white-space: pre-wrap;">host.xz[:port]/path/to/repo.git/</span></td>
</tr><tr><td>http</td>
<td>http[s]:<span style="white-space: pre-wrap;">//</span>host.xz[:port]/path/to/repo.git/</td>
</tr><tr><td>ftp</td>
<td>ftp[s]:<span style="white-space: pre-wrap;">//</span>host.xz[:port]/path/to/repo.git/</td>
</tr><tr><td>rsync</td>
<td>rsync:<span style="white-space: pre-wrap;">//</span>host.xz/path/to/repo.git/</td>
</tr><tr><td>local</td>
<td>/path/to/repo.git/<br />
file:<span style="white-space: pre-wrap;">///</span>path/to/repo.git/</td>
</tr></table><p><strong>hg</strong></p>
<div class="code">
<pre>
<code>local/filesystem/path[#revision]
file://local/filesystem/path[#revision]
http://[user[:pass]@]host[:port]/[path][#revision]
https://[user[:pass]@]host[:port]/[path][#revision]
ssh://[user@]host[:port]/[path][#revision]</code>
</pre></div>
<p><a name="config-file" id="config-file"></a></p>
<h2 id="toc8"><span><a href="#dvc">config files</a></span></h2>
<p><strong>git</strong></p>
<ul><li>.gitconfig</li>
</ul><p><strong>mercurial</strong></p>
<ul><li>.hgrc</li>
</ul><p><a name="ignore-file" id="ignore-file"></a></p>
<h2 id="toc9"><span><a href="#dvc">ignore files</a></span></h2>
<p><strong>git</strong></p>
<p><a href="http://schacon.github.com/git/gitignore.html">man gitignore</a></p>
<p>A list of file patterns, one per line. The patterns specify files that <tt>git status</tt> and <tt>git add</tt> should ignore. Shell glob syntax (i.e. the asterisk: *) can be used.</p>
<p>A .gitignore can be placed in any directory in the repository. The rules in a given .giitignore file will only apply to the current directory and the directories beneath it.</p>
<p>Lines starting with a pound sign: # are ignored.</p>
<p>A pattern starting with an exclamation point: ! will negate a pattern. This can be used to include files that were excluded by a pattern higher in the file matching a broader set of files.</p>
<p><strong>hg</strong></p>
<p>Unlike <tt>.gitignore</tt>, an <tt>.hgignore</tt> file must be in the root of the working directory.</p>
<p>The format is one Perl regular expression per line. All files which match the regular expression will be ignored.</p>
<p>Comments start with the pound sign: #</p>
<p>It is also possible to use glob syntax:</p>
<div class="code">
<pre>
<code># regexp to ignore twiddle files:
~$

# glob to ignore compiled python files:
syntax: glob
*.pyc

# additional patterns will use regexp format:
syntax: regexp</code>
</pre></div>
<p><a name="hook" id="hook"></a></p>
<h2 id="toc10"><span><a href="#dvc">hooks</a></span></h2>
<p><strong>git</strong></p>
<p><strong>hg</strong></p>
<p><a name="metasyntactic-var" id="metasyntactic-var"></a></p>
<h2 id="toc11"><span><a href="#dvc">metasyntactic variables</a></span></h2>
<p>In subcommand usage we use the following metasyntactic variables:</p>
<p><strong>git</strong></p>
<table class="wiki-content-table"><tr><td><a name="BRANCH" id="BRANCH"></a>BRANCH</td>
<td>the name of a branch.</td>
</tr><tr><td><a name="CMD" id="CMD"></a>CMD</td>
<td>the name of a version control command: the first argument of the base command.</td>
</tr><tr><td><a name="COMMIT" id="COMMIT"></a>COMMIT</td>
<td>the <a href="#HASH">HASH</a> for a commit. A commit can be referenced indirectly via a branch or tag name or via <a href="#git-identifiers-notation">commit notation</a>. The symbolic references HEAD or FETCH_HEAD can also be used to reference commits.</td>
</tr><tr><td><a name="DIR" id="DIR"></a>DIR</td>
<td>a directory on the file system. In some cases it must exist; in others it will be created.</td>
</tr><tr><td><a name="FILE" id="FILE"></a>FILE</td>
<td>a regular file on the file system. In some cases it must exist; in others it will be created.</td>
</tr><tr><td><a name="HASH" id="HASH"></a>HASH</td>
<td>a 40 digit hex string used as an identifier for something in the object database.</td>
</tr><tr><td><a name="HEAD" id="HEAD"></a>HEAD</td>
<td>the literal string HEAD.</td>
</tr><tr><td><a name="NAME" id="NAME"></a>NAME</td>
<td>a name for an entity which will be created. Usually there are restrictions on the characters that can be used.</td>
</tr><tr><td><a name="PATH" id="PATH"></a>PATH</td>
<td>a path on the file system. In some cases it must exist; in others it will be created.</td>
</tr><tr><td><a name="REF" id="REF"></a>REF</td>
<td><a href="#HEAD">HEAD</a> or refs/heads/<a href="#BRANCH">BRANCH</a></td>
</tr><tr><td><a name="REMOTE" id="REMOTE"></a>REMOTE</td>
<td>the name of a remote.</td>
</tr><tr><td><a name="REPO" id="REPO"></a>REPO</td>
<td>A REMOTE or a URL.</td>
</tr><tr><td><a name="STASH" id="STASH"></a>STASH</td>
<td>stash identifier format: stash@{0}, stash@{1}, …</td>
</tr><tr><td><a name="STR" id="STR"></a>STR</td>
<td>a string. There are no restrictions on the characters that can be used, but if they include whitespace or characters special to the shell they must be escaped or quoted.</td>
</tr><tr><td><a name="TREEISH" id="TREEISH"></a>TREEISH</td>
<td>the <a href="#HASH">HASH</a> for a tree, a commit, or a tag. If the HASH is for a commit or a tag the tree in the commit is used.</td>
</tr><tr><td><a name="URL" id="URL"></a>URL</td>
<td>a url for a repository.</td>
</tr></table><p><strong>hg</strong></p>
<table class="wiki-content-table"><tr><td><a name="HG-BRANCH" id="HG-BRANCH"></a>BRANCH</td>
<td>the name of a branch.</td>
</tr><tr><td><a name="HG-CMD" id="HG-CMD"></a>CMD</td>
<td>the name of a version control command: the first argument of the base command.</td>
</tr><tr><td><a name="HG-DIR" id="HG-DIR"></a>DIR</td>
<td>a directory on the file system. In some cases it must exist; in others it will be created.</td>
</tr><tr><td><a name="HG-FILE" id="HG-FILE"></a>FILE</td>
<td>a regular file on the file system. In some cases it must exist; in others it will be created.</td>
</tr><tr><td><a name="HG-NAME" id="HG-NAME"></a>NAME</td>
<td>a name for an entity which will be created. Usually there are restrictions on the characters that can be used.</td>
</tr><tr><td><a name="HG-PATH" id="HG-PATH"></a>PATH</td>
<td>a path on the file system. In some cases it must exist; in others it will be created.</td>
</tr><tr><td><a name="HG-PATTERN" id="HG-PATTERN"></a>PATTERN</td>
<td>a file glob pattern. The metacharacters ?, *, and <span style="white-space: pre-wrap;">**</span> are supported.</td>
</tr><tr><td><a name="HG-REV" id="HG-REV"></a>REV</td>
<td>the revision number for a changeset. It can be either the local revision number, which is a small decimal integer, or the 12 hex digit universal revision number.</td>
</tr><tr><td><a name="HG-SOURCE" id="HG-SOURCE"></a>SOURCE</td>
<td>A URL or a name for a URL in the [paths] section of the .hg/hgrc file</td>
</tr><tr><td><a name="HG-STR" id="HG-STR"></a>STR</td>
<td>a string. There are no restrictions on the characters that can be used, but if they include whitespace or characters special to the shell they must be escaped or quoted.</td>
</tr><tr><td><a name="HG-URL" id="HG-URL"></a>URL</td>
<td>a url for a repository.</td>
</tr></table><h1 id="toc12"><span><a href="#top">Version Control, Archiving, and Patching Tools</a></span></h1>
<p><a href="#sccs">sccs</a> | <a href="#diff">diff</a> | <a href="#cpio">cpio</a> | <a href="#diff3">diff3</a> | <a href="#ar">ar</a> | <a href="#tar">tar</a> | <a href="#rcs">rcs</a> | <a href="#patch">patch</a> | <a href="#zip">zip</a> | <a href="#cvs">cvs</a> | <a href="#p4">p4</a> | <a href="#jar">jar</a> | <a href="#rsync">rsync</a> | <a href="#svn">svn</a> | <a href="#bzr">bzr</a></p>
<p><a name="sccs" id="sccs"></a></p>
<h1 id="toc13"><span><a href="#top">sccs (1972)</a></span></h1>
<ul><li><a href="http://www.gnu.org/software/cssc/manual/index.html">CSSC Documentation</a> CSSC is the GNU implementation of SCCS</li>
<li><a href="http://basepath.com/aup/talks/SCCS-Slideshow.pdf">The Source Code Control System</a> Rochkind 1975</li>
</ul><p>In his 1975 paper Rochkind describes SCCS as a "radical departure from conventional methods for controlling source code". SCCS was initially implemented in 1972 on the IBM 370. The implementation language was SNOBOL. Rochkind was an employee of Bell Laboratories and SCCS was soon ported to Unix where it became a cornerstone of the "Programmer's Workbench", a suite of software distributed with early Unix.</p>
<p>The radical departure of SCCS appears to be the decision to store every version of each file under source control. This is done in a space efficient manner by means of deltas: the original file is stored with a delta for each change. To get the most recent version of the file all of the deltas must be applied to the original file. Also stored with each delta is the name of the user who made the change, the date and time of the change, and a user supplied comment explaining the change.</p>
<p>SCCS introduces a file format so that the original file, the deltas, and the meta-information can all be stored in a single history file. If the original file was <tt>foo.c</tt>, a common early convention was for the history file to be named <tt>s.foo.c</tt>. In the original Unix implementation the SCCS commands were standalone Unix commands. Starting with the version of SCCS which Allman wrote for BSD Unix in 1980 the SCCS commands became arguments or subcommands to a <tt>sccs</tt> executable.</p>
<p>Here is an sample SCCS session. The file <tt>foo.txt</tt> is put under source control. It is then checked out, edited, and the change committed. Finally a non-editable copy of the most recent version is checked out.</p>
<div class="code">
<pre>
<code>$ echo "foo" &gt; foo.txt
$ sccs admin -ifoo.txt s.foo.txt
$ rm foo.txt
$ sccs get -e s.foo.txt
$ vi foo.txt
$ sccs delta s.foo.txt
$ sccs get -p s.foo.txt &gt; foo.txt</code>
</pre></div>
<p>The SCCS history file format consists of fields separated by the Ctrl-A (ASCII 1) characters. The fields are divided into headers, which contain the meta-information, and the body, which contains the original file and the deltas. The original file is given revision number 1, and the number is incremented with each change.</p>
<p>The body consists of the original file interspersed with nested insert blocks and delete blocks. The format for an insert block is</p>
<div class="code">
<pre>
<code>^AI REV
added line one
added line two
...
^AE REV</code>
</pre></div>
<p>where REV is the revision number for which the lines were added. Similarly the format for a delete block is</p>
<div class="code">
<pre>
<code>^AD REV
deleted line one
deleted line two
...
^AE REV</code>
</pre></div>
<p>When extracting a version of the file, the desired version is compared with each block. Insert blocks are ignored if they have a higher number than the desired version and delete blocks are ignored if they have a lower or equal number than the desired version.</p>
<p><a name="diff" id="diff"></a></p>
<h1 id="toc14"><span><a href="#top">diff (1974)</a></span></h1>
<ul><li><a href="http://www.cs.dartmouth.edu/~doug/diff.ps">An Algorithm for Differential File Comparison</a> Hunt &amp; McIlroy 1976</li>
<li><a href="http://linux.die.net/man/1/diff">man diff</a></li>
</ul><p>To implement an efficient version control system one needs to find a minimal delta or difference between two similar text files. The problem led to the development of the Unix <tt>diff</tt> utility. Regarding a file as a sequence of lines, the problem can be treated as an example of the <a href="http://en.wikipedia.org/wiki/Longest_common_subsequence_problem">longest common subsequence problem</a>. The standard solution to this problem has O(nm) performance in both time and space, where <tt>n</tt> and <tt>m</tt> are the lengths of the two files. To facilitate quick comparison of lines, each line is replaced with a hash code. When implementing <tt>diff</tt> McIlroy developed an algorithm that was more efficient than the standard solution in most cases.</p>
<p>The standard <tt>diff</tt> notation prefixes lines with &lt; and &gt; to indicate whether the line originated in the first or second file. It also uses the letters <tt>a</tt>, <tt>c</tt>, and <tt>d</tt> to indicate lines being added, changed, or deleted:</p>
<div class="code">
<pre>
<code>$ echo "foo" &gt; foo.txt

$ echo "bar" &gt; bar.txt

$ diff foo.txt bar.txt 
1c1
&lt; foo
---
&gt; bar

$ diff foo.txt /dev/null
1d0
&lt; foo

$ diff /dev/null foo.txt 
0a1
&gt; foo</code>
</pre></div>
<p>These letters used in <tt>diff</tt> notation are also <tt>ed</tt> commands. In fact, <tt>diff -e</tt> will output an <tt>ed</tt> script which can be used to convert the first file into the second:</p>
<div class="code">
<pre>
<code>$ diff -e foo.txt bar.txt &gt; diff.ed

$ ( cat diff.ed ; echo "w" ) | ed foo.txt</code>
</pre></div>
<p>The version of diff released with BSD 2.8 in 1981 added the <tt>-c</tt> option to show the context of lines and an <tt>-r</tt> option to perform a recursive diff on directories.</p>
<p><a name="cpio" id="cpio"></a></p>
<h1 id="toc15"><span><a href="#top">cpio (1977)</a></span></h1>
<ul><li><a href="http://linux.die.net/man/1/cpio">man cpio</a></li>
<li><a href="http://pubs.opengroup.org/onlinepubs/9699919799/utilities/pax.html#tag_20_92_13_07">cpio file format (POSIX 2008)</a></li>
</ul><p>An ancient but to most people unfamiliar Unix archiving tool which is roughly equivalent to <tt>tar</tt>. <tt>.cpio</tt> is often used as a file suffix.</p>
<p>The format is used by RPM packages, though RPM 5.0 and later also support the <tt>xar</tt> format. The Linux kernel since version 2.6 has a cpio archive called <tt>initramfs</tt> which it uses during the boot process. <tt>cpio</tt> is also used by the Mac OS X <tt>.pkg</tt> format.</p>
<p>The <tt>cpio</tt> file format is similar to the <tt>tar</tt> file format in that for each file which is added to an archive, a header and the file contents are appended to the archive file. In the case of <tt>cpio</tt> the header is smaller (76 bytes vs 512 bytes). This is in part because the header only contains the file name length; the actual file name is appended to the archive file between the header and the file contents. By contrast the <tt>tar</tt> format stores the name in fixed length fields, putting a limit on the possible path length. Another different is the <tt>cpio</tt> format lacks a checksum.</p>
<table class="wiki-content-table"><tr><th colspan="4">header format</th>
</tr><tr><th>offset</th>
<th>length</th>
<th>field</th>
<th>description</th>
</tr><tr><td>0</td>
<td>6</td>
<td>c_magic</td>
<td>The identifying value "070707"</td>
</tr><tr><td>6</td>
<td>6</td>
<td>c_dev</td>
<td></td>
</tr><tr><td>12</td>
<td>6</td>
<td>c_ino</td>
<td>c_dev and c_ino together must be unique for each file in the archive</td>
</tr><tr><td>18</td>
<td>6</td>
<td>c_mode</td>
<td></td>
</tr><tr><td>24</td>
<td>6</td>
<td>c_uid</td>
<td></td>
</tr><tr><td>30</td>
<td>6</td>
<td>c_gid</td>
<td></td>
</tr><tr><td>36</td>
<td>6</td>
<td>c_nlink</td>
<td>number of links to the file in the archive; can be incorrect if the -a flag was used to append files</td>
</tr><tr><td>42</td>
<td>6</td>
<td>c_rdev</td>
<td>a place for implementations to store character or block special file information</td>
</tr><tr><td>48</td>
<td>11</td>
<td>c_mtime</td>
<td></td>
</tr><tr><td>59</td>
<td>6</td>
<td>c_namesize</td>
<td></td>
</tr><tr><td>65</td>
<td>11</td>
<td>c_filesize</td>
<td></td>
</tr></table><p>Another difference between <tt>tar</tt> and <tt>cpio</tt> is that whereas <tt>tar</tt> takes the files to be archived on the command line, recursively descending any arguments which are directories, <tt>cpio</tt> when used with the <tt>-o</tt> flag takes its list of files to be archived from standard input. <tt>cpio</tt> was designed to be used with the <tt>find</tt> command. Similarly when using the <tt>i</tt> flag <tt>cpio</tt> reads the files to be extracted from an archive from standard input.</p>
<p><a name="diff3" id="diff3"></a></p>
<h1 id="toc16"><span><a href="#top">diff3 (1979)</a></span></h1>
<ul><li><a href="http://linux.die.net/man/1/diff3">man diff3</a></li>
</ul><p><tt>diff3</tt> displays the differences between three versions of the same file.</p>
<p>The three way diff is the foundation of branch merging. A two way diff is insufficient for merging because deleting a line in one branch looks like adding a line in the other branch. Only by comparing both branches with the original can these two cases be distinguished.</p>
<p><tt>diff3</tt> has three basic invocations:</p>
<div class="code">
<pre>
<code>diff3 EDIT1 ORIG EDIT2
diff3 -e EDIT1 ORIG EDIT2
diff3 -m EDIT1 ORIG EDIT2</code>
</pre></div>
<p>The first invocation writes a description of the three-way diff to standard out. The second invocation writes an <tt>ed</tt> script to standard out which will merge the changes in EDIT2 to EDIT1. The third invocation writes to standard out a version which merges the changes in EDIT1 and EDIT2.</p>
<p>Here is an example of the output format used by the first invocation:</p>
<div class="code">
<pre>
<code>$ cat /tmp/orig.txt 
a
b
c
d
e

$ cat /tmp/edit1.txt 
a
b1
c
d
e
f

$ cat /tmp/edit2.txt 
a
b
c
d1
e

$ diff3 /tmp/edit1.txt /tmp/orig.txt /tmp/edit2.txt
====1
1:2c
  b1
2:2c
3:2c
  b
====3
1:4c
2:4c
  d
3:4c
  d1
====1
1:6c
  f
2:5a
3:5a</code>
</pre></div>
<p>Each hunk of the <tt>diff3</tt> output starts with four hyphens. All of the hunks in the example above are two-way hunks, meaning that two of the three files are the same. In this case the number of the differing file as it appears in the <tt>diff3</tt> arguments is placed after the hyphens.</p>
<p>Here is an example of a three-way hunk, where all three files differ and no number is placed after the hyphens:</p>
<div class="code">
<pre>
<code>$ cat /tmp/orig.txt 
a

$ cat /tmp/edit1.txt                               
a1

$ cat /tmp/edit2.txt 
a2

$ diff3 /tmp/edit1.txt /tmp/orig.txt /tmp/edit2.txt
====
1:1c
  a1
2:1c
  a
3:1c
  a2</code>
</pre></div>
<p><a name="ar" id="ar"></a></p>
<h1 id="toc17"><span><a href="#top">ar (1979)</a></span></h1>
<ul><li><a href="http://linux.die.net/man/1/ar">man ar</a></li>
</ul><p>A tool on Unix systems to create static libraries from compiled objects. In other words, to create a <tt>.a</tt> file from a set of <tt>.o</tt> files. The format is understood by the linker—which these days is usually built into the compiler—and the loader <tt>ld</tt>.</p>
<p>The command line interface is broadly similar to tar. Here is how to create an archive; remove files from an archive; list the archive contents; extract files from an archive:</p>
<div class="code">
<pre>
<code>ar -c NAME.a FILE ...
ar -d ARCHIVE FILE ...
ar -t ARCHIVE
ar -x ARCHIVE FILE ...</code>
</pre></div>
<p>The <tt>ar</tt> file format is not standardized and may differ between systems.</p>
<p>The file format used by GNU <tt>ar</tt> on Linux starts with the new line terminated string "!&lt;arch&gt;".</p>
<p>Each file starts with a 60 bytes header, followed by the file contents. The header has the following fixed-width fields:</p>
<table class="wiki-content-table"><tr><th>offfset</th>
<th>length</th>
<th>name</th>
</tr><tr><td>0</td>
<td>16</td>
<td>file name in ASCII</td>
</tr><tr><td>16</td>
<td>12</td>
<td>file modification timestamp</td>
</tr><tr><td>28</td>
<td>6</td>
<td>uid</td>
</tr><tr><td>34</td>
<td>6</td>
<td>gid</td>
</tr><tr><td>40</td>
<td>8</td>
<td>file mode</td>
</tr><tr><td>48</td>
<td>10</td>
<td>file size in bytes</td>
</tr><tr><td>58</td>
<td>2</td>
<td>0x60 0x0A</td>
</tr></table><p>The space allocated for the file name in the header is quite short. GNU <tt>ar</tt> actually stores a special file named <span style="white-space: pre-wrap;">"//"</span> in the archive with a new line separated list of file names. A header can reference a name in this special file by storing "/" and a the decimal offset in the <span style="white-space: pre-wrap;">"//"</span> file of the file name. When file names are stored directly in the header, a "/" is used to mark the end of the file and the rest of the field is space padded. This supports spaces in the file name.</p>
<p>GNU <tt>ar</tt> also stores a special file named "/" is the archive for a symbol table. The format is</p>
<ul><li>a 32-bit integer containing the number of symbols</li>
<li>a list of 32-bit integers, one for each symbol, containing the offset of the header in the archive for the file containing the symbol</li>
<li>a list of null terminated strings, in the same order as the previous list, containing the symbol names</li>
</ul><p><a name="tar" id="tar"></a></p>
<h1 id="toc18"><span><a href="#top">tar (1979)</a></span></h1>
<ul><li><a href="http://linux.die.net/man/1/tar">man tar</a></li>
</ul><p>The more portable twin of <tt>ar</tt>. Originally used for creating and using magnetic tape archives.</p>
<p>How to create a tar file; list the contents of a tar file; compare a tar file with the file system; and extract the contents of a tar file:</p>
<div class="code">
<pre>
<code>tar [-]cf NAME.tar DIR
tar [-]tf TARFILE
tar [-]df TARFILE [DIR]
tar [-]xf TARFILE</code>
</pre></div>
<p>The <tt>-v</tt> option can be used with <tt>-c</tt> or <tt>-x</tt> to write the files being added or extracted to standard error.</p>
<p>Tar files store the files in sequential order. Each file is precede by a 512 byte header. The file itself is null byte padded to a multiple of 512 bytes.</p>
<p>Tar can write to and read from stdout. The following two invocations behave identically:</p>
<div class="code">
<pre>
<code>tar cf - . | (cd DIR ; tar xf -)
tar cf . - | tar xf - -C DIR</code>
</pre></div>
<p>Tar can append data to an existing tar file. These commands append the contents of a directory to a tar file; append the contents of the directory which are newer than what is already on a tarfile; append subsequent tar files to the first tar file:</p>
<div class="code">
<pre>
<code>tar [-]rf TARFILE DIR
tar [-]uf TARFILE DIR
tar [-]Af TARFILE1 TARFILE2 ...</code>
</pre></div>
<p>How to create a compressed tar file:</p>
<div class="code">
<pre>
<code>tar [-]czf NAME.tar.gz
tar [-]cjf NAME.tar.bz2
tar [-]cJf NAME.tar.xz</code>
</pre></div>
<p>In 1988 POSIX extended the format of the header block in a backwardly compatible way. Additional header type flags were added in 2001.</p>
<table class="wiki-content-table"><tr><th colspan="4">header format</th>
</tr><tr><th>offset</th>
<th>length</th>
<th>original format</th>
<th>ustar</th>
</tr><tr><td>0</td>
<td>100</td>
<td>file name</td>
<td></td>
</tr><tr><td>100</td>
<td>8</td>
<td>file mode</td>
<td></td>
</tr><tr><td>108</td>
<td>8</td>
<td>owner user id</td>
<td></td>
</tr><tr><td>116</td>
<td>8</td>
<td>group id</td>
<td></td>
</tr><tr><td>124</td>
<td>12</td>
<td>file size in bytes</td>
<td></td>
</tr><tr><td>136</td>
<td>12</td>
<td>last modification time</td>
<td></td>
</tr><tr><td>148</td>
<td>8</td>
<td>header checksum</td>
<td></td>
</tr><tr><td>156</td>
<td>1</td>
<td>type flag</td>
<td></td>
</tr><tr><td>157</td>
<td>100</td>
<td>name of linked file</td>
<td></td>
</tr><tr><td>257</td>
<td>6</td>
<td></td>
<td>"ustar"</td>
</tr><tr><td>263</td>
<td>2</td>
<td></td>
<td>"00"</td>
</tr><tr><td>265</td>
<td>32</td>
<td></td>
<td>owner user name</td>
</tr><tr><td>297</td>
<td>32</td>
<td></td>
<td>group name</td>
</tr><tr><td>329</td>
<td>8</td>
<td></td>
<td>device major number</td>
</tr><tr><td>337</td>
<td>8</td>
<td></td>
<td>device minor number</td>
</tr><tr><td>345</td>
<td>155</td>
<td></td>
<td>filename prefix</td>
</tr></table><table class="wiki-content-table"><tr><th colspan="4">header type flags</th>
</tr><tr><th>flag</th>
<th>original meaning</th>
<th>ustar</th>
<th>2001</th>
</tr><tr><td>'\0'</td>
<td>normal file</td>
<td></td>
<td></td>
</tr><tr><td>'0'</td>
<td>normal file</td>
<td></td>
<td></td>
</tr><tr><td>'1'</td>
<td>hard line</td>
<td></td>
<td></td>
</tr><tr><td>'2'</td>
<td>symlink</td>
<td></td>
<td></td>
</tr><tr><td>'3'</td>
<td></td>
<td>character device</td>
<td></td>
</tr><tr><td>'4'</td>
<td></td>
<td>block device</td>
<td></td>
</tr><tr><td>'5'</td>
<td></td>
<td>directory</td>
<td></td>
</tr><tr><td>'6'</td>
<td></td>
<td>FIFO</td>
<td></td>
</tr><tr><td>'7'</td>
<td></td>
<td>contiguous file</td>
<td></td>
</tr><tr><td>'g'</td>
<td></td>
<td></td>
<td>global extended header</td>
</tr><tr><td>'x'</td>
<td></td>
<td></td>
<td>extended header for the next file</td>
</tr></table><p><a name="rcs" id="rcs"></a></p>
<h1 id="toc19"><span><a href="#top">rcs (1982)</a></span></h1>
<ul><li><a href="http://www.burlingtontelecom.net/~ashawley/rcs/tichy1985rcs/rcs.html">RCS--A System for Version Control</a> Tichy 1985</li>
<li><a href="http://linux.die.net/man/5/rcsfile">man rcsfile</a> The RCS history file format</li>
</ul><p>RCS works in a similar manner to SCCS. There is a history file which is indicated with a <tt>,v</tt> suffix. Thus, the history file for <tt>foo.txt</tt> would be <tt>foo.txt,v</tt>. The RCS commands take the original file as an argument instead of the history file like in SCCS. RCS supports multiline commit messages and it adds the <tt>rlog</tt> command for getting all the commit messages for a file. RCS has always been freely available software, a factor which has promoted its use over SCCS.</p>
<p>Here is a sample work session using RCS. It is equivalent to the SCCS work session in the previous section.</p>
<div class="code">
<pre>
<code>$ echo "foo" &gt; foo.txt
$ ci foo.txt
$ co -l foo.txt
$ vi foo.txt
$ ci foo.txt
$ co foo.txt</code>
</pre></div>
<p>Examining an RCS history reveals some improvements in the implementation over SCCS. First of all, ampersands (@) are used instead of Ctrl-A to demarcate sections of the file. Ampersands in the data are escaped by doubling them. This makes the history files more pleasant to inspect at the command line.</p>
<p>Another change is that the current version of the file is stored in its entirety. Older revisions are obtained by applying a chain of reverse diffs. The advantage of this design is that it is optimized for the common case of fetching the current version.</p>
<p>Here is an example of adding two lines after line 6:</p>
<div class="code">
<pre>
<code>@a6 2
added line one
added line two
@</code>
</pre></div>
<p>Here is an example of deleting two lines after line 6:</p>
<div class="code">
<pre>
<code>@d6 2
@</code>
</pre></div>
<p><a name="patch" id="patch"></a></p>
<h1 id="toc20"><span><a href="#top">patch (1985)</a></span></h1>
<ul><li><a href="http://linux.die.net/man/1/patch">man patch</a></li>
</ul><p>The <tt>patch</tt> command can apply the output of <tt>diff</tt> to a file. The <tt>diff</tt> output is read from standard input:</p>
<div class="code">
<pre>
<code>$ echo "foo" &gt; foo.txt
$ echo "bar" &gt; bar.txt 
$ diff foo.txt bar.txt &gt; foo.patch
$ patch foo.txt &lt; foo.patch 
patching file foo.txt
$ cat foo.txt 
bar</code>
</pre></div>
<p>The above is only a slight improvement over what could have been achieved with <tt>diff -e</tt> and <tt>ed</tt>. The novelty of <tt>patch</tt> is its ability to apply a patch file to an entire directory:</p>
<div class="code">
<pre>
<code>$ mkdir foo
$ echo "bar" &gt; foo/bar.txt
$ echo "baz" &gt; foo/baz.txt
$ cp -R foo foo2
$ echo "qux" &gt; foo2/bar.txt
$ diff -cr foo foo2 &gt; foo.patch
$ patch -p0 &lt; foo.patch
patching file foo/bar.txt
$ cat foo/bar.txt 
qux</code>
</pre></div>
<p>When creating the patch file with <tt>diff</tt> the <tt>-c</tt> flag must be used so that filenames are included in the diff. The <tt>-c</tt> flag also adds three lines of context before and after each change. Around 1990 a <tt>-u</tt> option was added to <tt>diff</tt> which is preferred over <tt>-c</tt> because the before and after versions of the line share context.</p>
<p>The <tt>-p</tt> flag is a required if no file or directory is provided to <tt>patch</tt> as an argument. Invoking <tt>patch -p1</tt> to strip off the top level of the pathnames (to be precise, everything up to and including the first slash) in the patch file. This is useful if the <tt>diff</tt> was created outside the directory being modified, but <tt>patch</tt> is being run inside the directory being modified.</p>
<p><a name="zip" id="zip"></a></p>
<h1 id="toc21"><span><a href="#top">zip (1989)</a></span></h1>
<ul><li><a href="http://linux.die.net/man/1/zip">man zip</a></li>
</ul><p><tt>zip</tt> combines file compression and archiving. It is a better choice for sharing files with Windows hosts than <tt>tar</tt>, which most Windows hosts don't have installed.</p>
<div class="code">
<pre>
<code>zip [-r] [-0] ARCHIVE FILE ...
zip -d ARCHIVE FILE ...
zip -u ARCHIVE [FILE ...]

unzip -l ARCHIVE
unzip ARCHIVE [FILE ...]</code>
</pre></div>
<p>Compression is the DEFLATE algorithm, or no compression if the <tt>-0</tt> flag is used.</p>
<p><tt>zip</tt> stores the file name, file size, and last modification time of the file. The information is in a header which precedes the file itself and in the "central directory" at the end of the file.</p>
<p>By default <tt>zip</tt> does not recursively descend directories, adding their contents to the archive. Use the <tt>-r</tt> flag to get this behavior.</p>
<p><a name="cvs" id="cvs"></a></p>
<h1 id="toc22"><span><a href="#top">cvs (1990)</a></span></h1>
<ul><li><a href="http://ximbiot.com/cvs/manual/cvs-1.11.23/cvs.html">CVS Manual</a></li>
<li><a href="http://www.network-theory.co.uk/docs/cvsmanual/InvokingCVS.html">Quick Reference to CVS Commands</a></li>
<li><a href="http://cvs.savannah.gnu.org/viewvc/">CVS Repositories on Savannah</a></li>
</ul><p>CVS was the first popular revision control system with a client-server architecture. The client would have a local copy of a recent version of the source code and only the server would have the complete version history. This made CVS somewhat cleaner to work with than RCS or SCCS which keep history files on the filesystem for the client to see. It also permitted developers to collaborate without logging in to the same machine. The CVS client-server protocol communicated over <tt>rsh</tt> and later over <tt>ssh</tt>. The well known port number for a CVS server is 2401.</p>
<p>CVS also enabled a user to commit several files together. Multiple file commits are sometimes necessary to keep the source code consistent after each commit. The definition of consistency varies from project to project, but C developers want the source code to compile without errors, for example. Although CVS permits a user to submit changes to several files with a single command, the file system operation performed by the server is not actually atomic.</p>
<p>Setting up a CVS server is a bit of a bother and I'm not aware of any free CVS hosting services. As a result, it is difficult these days to experiment with CVS even though the client is still installed by default on Mac OS X. There are GNU projects which still use CVS. One can <a href="https://savannah.gnu.org/">register at savannah.gnu.org</a> and upload a public SSH key to participate in a project. One can perform an anonymous checkout of source like this:</p>
<div class="code">
<pre>
<code>cvs -z3 -d:pserver:anonymous@cvs.savannah.gnu.org:/sources/emacs co emacs</code>
</pre></div>
<p><a name="perforce" id="perforce"></a></p>
<h1 id="toc23"><span><a href="#top">p4 (1995)</a></span></h1>
<ul><li><a href="http://www.qhull.org/road/road-faq/html/p4-cmd.html">Perforce Command Reference</a></li>
</ul><p>Perforce has a client-server model. It supports atomic commits. It provides the ability to create and, unlike CVS, merge branches.</p>
<p>Perforce has a reputation for being able to handle large projects. Licenses are <a href="http://www.perforce.com/perforce/price.html">several hundred dollars per user</a>.</p>
<p><a name="jar" id="jar"></a></p>
<h1 id="toc24"><span><a href="#top">jar (1995)</a></span></h1>
<ul><li><a href="http://linux.die.net/man/1/jar-java-1.6.0-openjdk">man jar</a></li>
</ul><p><tt>jar</tt> supports some of the <tt>tar</tt> commands:</p>
<div class="code">
<pre>
<code>jar cf NAME.jar DIR
jar tf JARFILE
jar xf JARFILE
jar uf JARFILE DIR</code>
</pre></div>
<p><tt>jar</tt> can write to and read from stdout; the syntax is different from <tt>tar</tt>:</p>
<div class="code">
<pre>
<code>jar c . | (cd DIR ; jar x)
jar c . | jar x -C DIR</code>
</pre></div>
<p>Use <tt>jar -e</tt> to make a jar file runnable by <tt>java</tt>. The argument to <tt>-e</tt> is a class with a <tt>main</tt> routine which will be used as the entry point.</p>
<div class="code">
<pre>
<code>$ mkdir

$ cat &gt; foo/A.java
package foo;

public class A {
    public static void main(String[] args) {
        System.out.println("A");
    }
}

$ sed s/A/B/ foo/A.java &gt; foo/B.java

$ javac foo/*.java

$ jar cef foo.A foo.jar foo

$ java -jar foo.jar        
A</code>
</pre></div>
<p>A jar file is a zip file; <tt>unzip</tt> can also be used to extract the contents. <tt>jar</tt> stores extra information about the jar file in <tt>META-INF/MANIFEST.MF</tt>:</p>
<div class="code">
<pre>
<code>$ unzip foo.jar

$ cat META-INF/MANIFEST.MF 
Manifest-Version: 1.0
Created-By: 1.6.0_26 (Sun Microsystems Inc.)
Main-Class: foo.A</code>
</pre></div>
<p><a name="rsync" id="rsync"></a></p>
<h1 id="toc25"><span><a href="#top">rsync (1996)</a></span></h1>
<ul><li><a href="http://linux.die.net/man/1/rsync">man rsync</a></li>
<li><a href="http://rsync.samba.org/tech_report/tech_report.html">the rsync algorithm</a></li>
</ul><p>A tool for copying files and directories between hosts. Usually it uses <tt>ssh</tt>. It is faster than <tt>scp</tt> when some of the files are already on the destination, or when copying files that have been modified.</p>
<p>Here is the usage for putting and getting:</p>
<div class="code">
<pre>
<code>  rysnc -a PATH ... HOST:PATH
  rsync -a HOST:'PATH ...' PATH</code>
</pre></div>
<p>The <tt>-a</tt> flag is equivalent to the flags <tt>-rptoglD</tt> which (1) recursively copy the contents of directories, (2) copy file permissions, (3) copy file times, (4) copy owner, (5) copy group, (6) copy symlinks, and (7) copy special devices.</p>
<p>Other useful flags are <tt>-v</tt> for verbose mode and <tt><span style="white-space: pre-wrap;">--</span>exclude</tt> which takes a file glob pattern to specify files to skip.</p>
<p>If the source and target paths have the same basename, then <tt>rsync</tt> will copy the contents of the source into the contents of the target. If the basenames are different, <tt>rsync</tt> will create a directory with the same name as the source inside the target. This behavior can be suppressed by putting a trailing slash / on the end of the source.</p>
<p><tt>rsync</tt> can be used to backup a directory on a remote host. With the <tt><span style="white-space: pre-wrap;">--</span>backup</tt> flag, files which are already on the destination but have been modified on the source will be copied into a separate incremental directory with a tilde (~) suffix. The <tt><span style="white-space: pre-wrap;">--</span>backup-dir</tt> flag can be used to specify a different incremental directory.</p>
<p><a name="svn" id="svn"></a></p>
<h1 id="toc26"><span><a href="#top">svn (2000)</a></span></h1>
<ul><li><a href="http://svnbook.red-bean.com/en/1.7/svn-book.html">Version Control with Subversion</a></li>
</ul><p>SVN has a client-server model. SVN replaced CVS as the most popular VCS sometime after 2004. As of 2013 it is still probably the most widely used, being twice as likely to be used as Git and six times as likely to be used as Mercurial.</p>
<p><a name="bzr" id="bzr"></a></p>
<h1 id="toc27"><span><a href="#top">bzr (2005)</a></span></h1>
<ul><li><a href="http://doc.bazaar.canonical.com/bzr.2.4/en/">Documentation for Bazaar 2.4</a></li>
<li><a href="http://doc.bazaar.canonical.com/bzr.2.4/en/user-reference/index.html#commands">Commands for Bazaar 2.4</a></li>
</ul><p>The distributed VCS favored by GNU projects. There are currently no active Bazaar maintainers, however. Bazaar trails Git and Mercurial by a large margin in popularity.</p>
<p>To get a list of common commands; to get help on a specific command:</p>
<div class="code">
<pre>
<code>bzr help
bzr help commit</code>
</pre></div>
<p>To make a commit it is necessary to register a name and an email address:</p>
<div class="code">
<pre>
<code>bzr whoami "Joe Foo &lt;joe@foo.com&gt;"</code>
</pre></div>
<hr /><p><a name="git-plumbing" id="git-plumbing"></a></p>
<h2 id="toc28"><span><a href="#git">plumbing</a></span></h2>
<p><a href="#git-cat-file">cat-file</a> | <a href="#git-hash-object">hash-object</a> | <a href="#git-ls-tree">ls-tree</a> | <a href="#git-rev-list">rev-list</a> | <a href="#git-show-ref">show-ref</a></p>
<p>The Git object database is kept in <tt>.git/objects</tt>. Git has three types of objects: blobs, trees, and commits. Each version of a file which is under version control becomes a blob and each version of a directory becomes a tree. Each object is uniquely identified by a 40 digit hex string called an object ID. Also called an object name or an object id.</p>
<p>The porcelain commands only expose the object IDs of commits. The object ID of each commit is shown by <tt>git log</tt> for example. One can use <tt>git cat-file -t</tt> to find out what type of object an object ID refers to:</p>
<div class="code">
<pre>
<code>git cat-file -t OBJECTID</code>
</pre></div>
<p>If the object is a commit, one can get information about the commit with:</p>
<div class="code">
<pre>
<code>git cat-file commit OBJECTID</code>
</pre></div>
<p>Included in the information are the parent commits, if any. If the commit was an initial commit it will have no parents. If it was the product of a merge it will have two or more parents. If it was the product of an octopus merge it will have three or more parents.</p>
<p>Aslo included in the commit information is the tree representing the files in the top directory of the repository when the commit was made. To see the contents of the tree use</p>
<div class="code">
<pre>
<code>git ls-tree OBJECTID</code>
</pre></div>
<p><tt>git ls-tree</tt> can be used on any of the subtrees as well. To see the contents of a blob in a tree, use</p>
<div class="code">
<pre>
<code>git cat-file blob OBJECTID</code>
</pre></div>
<p>An easy way to get the object IDs of all the blobs which are under version control and current is to run the following:</p>
<div class="code">
<pre>
<code>git ls-files --stage</code>
</pre></div>
<p>If a file has not been added, it is possible to get the object ID that would be assigned to it if it were with</p>
<div class="code">
<pre>
<code>git hash-object PATH</code>
</pre></div>
<p>Furthermore, <tt>git hash-object -w</tt> can be used to put the object in the object database.</p>
<p><em>plumbing commands for making a tree</em></p>
<p><em>plumbing commands for making a commit</em></p>
<p><em>how to display and manipulate refs</em></p>
<p><em>plumbing for the index</em></p>
<p><a name="git-branching" id="git-branching"></a></p>
<h2 id="toc29"><span><a href="#git">branching</a></span></h2>
<p>When a branch is created a file is created in <tt>.git/refs/heads</tt> with the name of the branch. The file contains the COMMIT that was provided on the command line or the commit of HEAD if no commit was explicitly provided.</p>
<p>When a commit is made on a branch the parent of the commit is the commit in the branch ref. The branch ref is then updated to contain the new commit.</p>
<p>One switches branches by changing <tt>.git/HEAD</tt> to contain the name of the new branch.</p>
<p><a name="git-fetching-pulling" id="git-fetching-pulling"></a></p>
<h2 id="toc30"><span><a href="#git">fetching, pushing, pulling</a></span></h2>
<p>Fetching, pulling, and pushing is controlled by the remotes that have been set up for a repository. When a repository is created with the <tt>clone</tt> command a remote with the name <tt>origin</tt> is created unless the <tt>-o</tt> option is used to specify a different remote name. Remotes can be added, removed, and modified with the <tt>remote</tt> command.</p>
<p><a name="git-merging" id="git-merging"></a></p>
<h2 id="toc31"><span><a href="#git">merging</a></span></h2>
<p>A merge adds changes from one or more branches into the current branch. If the merge is successful and committed, the new commit will have two or more parents. A merge commit with more that two parents is called an octopus merge.</p>
<p>The most common case is when one branch is merged into the current branch, yielding a merge commit with two parents.</p>
<p>To perform a merge Git gets the tree contained in the common ancestor and puts its items into the staging area with staging number 1. It puts the current branch tree items in the staging area with staging number 2. It puts the tree items of the other branches in the staging area with staging number 3 or higher.</p>
<p>Suppose that <tt>bar</tt> is a branch of <tt>foo</tt>. If commits have subsequently been made to <tt>foo</tt> but not to bar, then running the following when <tt>bar</tt> is the current branch will perform a fast-forward:</p>
<div class="code">
<pre>
<code>git merge foo</code>
</pre></div>
<p>In a fast-forward no merge commit is created. Instead the head of <tt>bar</tt> is simply moved to point to the same commit as the head of <tt>foo</tt>.</p>

                    </div>
        </div>
      </div>
      <div id="license-area" class="license-area">
        content of this page licensed under
        <a rel="license" href="http://creativecommons.org/licenses/by-sa/3.0/">
        creative commons attribution-sharealike 3.0</a>
      </div>
    </div>
  </div>
</div>

<script type="text/javascript">

  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-17129977-2']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();

</script>

</body>
</html>
