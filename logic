<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="content-type" content="text/html;charset=UTF-8"/>
<link rel="icon" type="image/gif" href="/favicon.gif"/>
<link rel="apple-touch-icon" sizes="120x120" href="touch-icon-iphone-retina.png" />
<link rel="apple-touch-icon" sizes="152x152" href="touch-icon-ipad-retina.png" />
<title>Prolog and Erlang - Hyperpolyglot</title>
<style type="text/css" id="internal-style">
@import url(hyperpolyglot.css);
</style>
<meta http-equiv="content-type" content="text/html;charset=UTF-8"/>
<meta http-equiv="content-language" content="en"/>
</head>
<body>
<div id="container-wrap-wrap">
  <div id="container-wrap">
    <div id="container">
      <div id="header">
        <h1><a href="/"><span>Hyperpolyglot</span></a></h1>
      </div>
      <div id="content-wrap">
        <div id="main-content">
<div id="page-title">
                            Prolog and Erlang
                        </div>
<div id="page-content">
                        

<p><em>a side-by-side reference sheet</em></p>
<p><a name="top" id="top"></a><a href="#grammar-invocation">grammar and invocation</a> | <a href="#var-expr">variables and expressions</a> | <a href="#arithmetic-logic">arithmetic and logic</a> | <a href="#strings">strings</a> | <a href="#regex">regexes</a> | <a href="#date-time">dates and time</a><br /><a href="#lists">lists</a> | <a href="#tuples">tuples</a> | <a href="#algebraic-data-types">algebraic data types</a> | <a href="#functions">functions</a> | <a href="#execution-control">execution control</a> | <a href="#file-handles">file handles</a> | <a href="#files">files</a> | <a href="#directories">directories</a><br /><a href="#processes-environment">processes and environment</a> | <a href="#libraries-namespaces">libraries and namespaces</a> | <a href="#reflection">reflection</a> | <a href="#repl">repl</a></p>
<table class="wiki-content-table"><tr><th></th>
<th><a href="#prolog">prolog</a></th>
<th><a href="#erlang">erlang</a></th>
</tr><tr><td><a name="version-used" id="version-used"></a><a href="#version-used-note">version used</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td><span style="color: gray"><em>SWI Prolog 5.10</em></span></td>
<td><span style="color: gray"><em>5.9</em></span></td>
</tr><tr><td><a name="show-version" id="show-version"></a><a href="#show-version-note">show version</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td>$ swipl <span style="white-space: pre-wrap;">--</span>version</td>
<td>$ erl -version</td>
</tr><tr><th colspan="3"><a name="grammar-invocation" id="grammar-invocation"></a><a href="#grammar-invocation-note">grammar and invocation</a></th>
</tr><tr><th></th>
<th>prolog</th>
<th>erlang</th>
</tr><tr><td><a name="hello-world" id="hello-world"></a><a href="#hello-world-note">hello world</a></td>
<td>$ cat ./hello.pl<br />
hello :-<br /><span style="white-space: pre-wrap;">  </span>format('Hello, World!~n'),<br /><span style="white-space: pre-wrap;">  </span>halt.<br /><br />
$ swipl -q -t hello -f ./hello.pl<br />
Hello, World!</td>
<td>$ cat hello.erl<br />
-module(hello).<br />
-export([hello_world/0]).<br /><br />
hello_world() -&gt;<br /><span style="white-space: pre-wrap;">  </span>io:format("Hello, World!~n"),<br /><span style="white-space: pre-wrap;">  </span>halt(0).<br /><br />
$ erlc hello.erl<br /><br />
$ erl -noshell -run hello hello_world<br />
Hello, World!</td>
</tr><tr><td><a name="compiler" id="compiler"></a><a href="#compiler-note">compiler</a></td>
<td></td>
<td><span style="color: gray"><em>does not create a stand-alone executable:</em></span><br />
$ erlc +native foo.erl</td>
</tr><tr><td><a name="bytecode-compiler" id="bytecode-compiler"></a><a href="#bytecode-compiler-note">bytecode compiler</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td></td>
<td>$ erlc foo.erl</td>
</tr><tr><td><a name="interpreter" id="interpreter"></a><a href="#interpreter-note">interpreter</a></td>
<td></td>
<td>$ cat arg-analyzer<br />
%%!<br />
main([String]) -&gt;<br /><span style="white-space: pre-wrap;">  </span>io:format("argument was: ~s\n", [String]);<br />
main(_) -&gt;<br /><span style="white-space: pre-wrap;">  </span>io:format("Usage: arg-analyzer ARG\n").<br /><br />
$ escript arg-analyzer foo<br />
argument was: foo</td>
</tr><tr><td><a name="shebang" id="shebang"></a><a href="#shebang-note">shebang</a></td>
<td></td>
<td>$ cat arg-analyzer<br />
#!/usr/bin/env escript<br />
%%!<br />
main([String]) -&gt;<br /><span style="white-space: pre-wrap;">  </span>io:format("argument was: ~s\n", [String]);<br />
main(_) -&gt;<br /><span style="white-space: pre-wrap;">  </span>io:format("Usage: arg-analyzer ARG\n").<br /><br />
$ ./arg-analyzer foo<br />
argument was: foo</td>
</tr><tr><td><a name="invoke-repl" id="invoke-repl"></a><a href="#invoke-repl-note">repl</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td>$ swipl</td>
<td>$ erl</td>
</tr><tr><td><a name="block-delimiters" id="block-delimiters"></a><a href="#block-delimiters-note">block delimiters</a></td>
<td></td>
<td>if ; end<br />
case ; end<br />
try catch end<br />
fun ; end<br />
receive end</td>
</tr><tr><td><a name="stmt-terminator" id="stmt-terminator"></a><a href="#stmt-terminator-note">statement terminator</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td>.</td>
<td>.</td>
</tr><tr><td><a name="eol-comment" id="eol-comment"></a><a href="#eol-comment-note">end-of-line comment</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td>% <span style="color: gray"><em>a comment</em></span></td>
<td>% <span style="color: gray"><em>a comment</em></span></td>
</tr><tr><td><a name="multiple-line-comment" id="multiple-line-comment"></a><a href="#multiple-line-comment-note">multiple line comment</a></td>
<td>/* <span style="color: gray"><em>comment line<br />
comment line</em></span> */</td>
<td></td>
</tr><tr><th colspan="3"><a name="var-expr" id="var-expr"></a><a href="#var-expr-note">variables and expressions</a></th>
</tr><tr><th></th>
<th>prolog</th>
<th>erlang</th>
</tr><tr><td><a name="var-def" id="var-def"></a><a href="#var-def-note">variable identifier</a></td>
<td><span style="color: gray"><em>upper case letter followed by alphanumeric characters</em></span></td>
<td><span style="color: gray"><em>upper case letter following by alphanumeric characters and underscores.</em></span></td>
</tr><tr><td><a name="write-once-var" id="write-once-var"></a><a href="#write-once-var">write once variable</a></td>
<td></td>
<td><span style="color: gray"><em>previously unused variables on the left side of an equal sign will be assigned to values that make the left match the right</em></span></td>
</tr><tr><td><a name="assignment" id="assignment"></a><a href="#assignment-note">assignment</a></td>
<td>X = 3.<br />
4 = Y.</td>
<td>X = 3.</td>
</tr><tr><td><a name="parallel-assignment" id="parallel-assignment"></a><a href="#parallel-assignment-note">parallel assignment</a></td>
<td>(X, Y) = (1, 2).<br />
[X, Y] = [1, 2].<br />
{X, Y} = {1, 2}.<br />
foo(X, Y) = foo(1, 2).</td>
<td>{X, Y} = {1, 2}.<br />
[Z, W] = [1, 2].</td>
</tr><tr><td><a name="non-referential-id" id="non-referential-id"></a><a href="#non-referential-id-note">non-referential identifier</a></td>
<td><span style="color: gray"><em>lower case letter followed by alphanumeric characters; can also include underscore: _</em></span></td>
<td><span style="color: gray"><em>lower case letter followed by alphanumeric characters; can also include period: . at-sign: @ underscore: _</em></span></td>
</tr><tr><td><a name="quoted-non-referential-id" id="quoted-non-referential-id"></a><a href="#quoted-non-referential-id-note">quoted non-referential identifier</a></td>
<td><span style="color: gray"><em>any printable characters inside single quotes; use backslash to escape a single quote.</em></span></td>
<td><span style="color: gray"><em>any printable characters inside single quotes; use backslash or two single quotes to escape a single quote.</em></span></td>
</tr><tr><td><a name="cond-expr" id="cond-expr"></a><a href="#cond-expr-note">conditional expression</a></td>
<td></td>
<td>if<br /><span style="white-space: pre-wrap;">  </span>X &gt; 0 -&gt; 1;<br /><span style="white-space: pre-wrap;">  </span>X == 0 -&gt; X;<br /><span style="white-space: pre-wrap;">  </span>X &lt; 0 -&gt; -1<br />
end</td>
</tr><tr><td><a href="#case">case</a></td>
<td></td>
<td>case X of<br /><span style="white-space: pre-wrap;">  </span>1 -&gt; true;<br /><span style="white-space: pre-wrap;">  </span>0 -&gt; false<br />
end</td>
</tr><tr><th colspan="3"><a name="arithmetic-logic" id="arithmetic-logic"></a><a href="#arithmetic-logic-note">arithmetic and logic</a></th>
</tr><tr><th></th>
<th>prolog</th>
<th>erlang</th>
</tr><tr><td><a name="true-false" id="true-false"></a><a href="#true-false-note">true and false</a></td>
<td>true fail</td>
<td>true false</td>
</tr><tr><td><a name="falsehoods" id="falsehoods"></a><a href="#falsehoods-note">falsehoods</a></td>
<td></td>
<td><span style="color: gray">false <em>and all non-boolean values</em></span></td>
</tr><tr><td><a name="logical-op" id="logical-op"></a><a href="#logical-op-note">logical operators</a></td>
<td>, ; <span style="color: gray"><em>??</em></span> <span style="color: gray"><em>??</em></span></td>
<td>and or xor not<br /><span style="color: gray"><em>in guards:</em></span><br />
, ;</td>
</tr><tr><td><a name="short-circuit-op" id="short-circuit-op"></a><a href="#short-circuit-op-note">short circuit operators</a></td>
<td></td>
<td>andalso orelse</td>
</tr><tr><td><a name="relational-op" id="relational-op"></a><a href="#relational-op-note">relational operators</a></td>
<td>=:= \= &lt; &gt; =&lt; &gt;=</td>
<td>== /= &lt; &gt; =&lt; &gt;=<br /><span style="color: gray"><em>no numeric conversion:</em></span><br />
=:= =/=</td>
</tr><tr><td><a name="arith-expr" id="arith-expr"></a><a href="#arith-expr-note">arithmetic expression</a></td>
<td>is(X, 2 + 2).</td>
<td>X = 2 + 2.</td>
</tr><tr><td><a name="arith-op" id="arith-op"></a><a href="#arith-op-note">arithmetic operators</a></td>
<td>+ - * / <span style="white-space: pre-wrap;">//</span> mod</td>
<td>+ - * / div rem</td>
</tr><tr><td><a name="unary-negation" id="unary-negation"></a><a href="#unary-negation-note">unary negation</a></td>
<td>-4</td>
<td>-4</td>
</tr><tr><td><a name="int-div" id="int-div"></a><a href="#int-div-note">integer division</a></td>
<td>is(X, 7 <span style="white-space: pre-wrap;">//</span> 3).</td>
<td>7 div 3.</td>
</tr><tr><td><a name="int-div-zero" id="int-div-zero"></a><a href="#int-div-zero-note">integer division by zero</a></td>
<td><span style="color: gray">zero_divisor <em>error</em></span></td>
<td><span style="color: gray"><em>bad argument exception</em></span></td>
</tr><tr><td><a name="float-div" id="float-div"></a><a href="#float-div-note">float division</a></td>
<td>is(X, 7 / 3).</td>
<td>7 / 3.</td>
</tr><tr><td><a name="float-div-zero" id="float-div-zero"></a><a href="#float-div-zero-note">float division by zero</a></td>
<td><span style="color: gray">zero_divisor <em>error</em></span></td>
<td><span style="color: gray"><em>bad argument exception</em></span></td>
</tr><tr><td><a name="power" id="power"></a><a href="#power-note">power</a></td>
<td>is(X, 2**32).</td>
<td>math:pow(2, 32).</td>
</tr><tr><td><a name="sqrt" id="sqrt"></a><a href="#sqrt-note">sqrt</a></td>
<td>is(X, sqrt(2)).</td>
<td>math:sqrt(2).</td>
</tr><tr><td><a name="sqrt-negative-one" id="sqrt-negative-one"></a><a href="#sqrt-negative-one-note">sqrt -1</a></td>
<td><span style="color: gray"><em>arithmetic evaluation error: undefined</em></span></td>
<td><span style="color: gray"><em>raises bad argument exception</em></span></td>
</tr><tr><td><a name="transcendental-func" id="transcendental-func"></a><a href="#transcendental-func-note">transcendental functions</a></td>
<td>exp log sin cos tan asin acos atan atan2</td>
<td>math:exp math:log math:sin math:cos math:tan math:asin math:acos math:atan math:atan2</td>
</tr><tr><td><a name="float-truncation" id="float-truncation"></a><a href="#float-truncation-note">float truncation</a></td>
<td>truncate round floor ceiling</td>
<td>trunc round <span style="color: gray"><em>??</em></span> <span style="color: gray"><em>??</em></span></td>
</tr><tr><td><a name="absolute-val" id="absolute-val"></a><a href="#absolute-val-note">absolute value</a></td>
<td>is(X, abs(-3)).<br />
is(X, abs(-3.2)).</td>
<td>abs(-3)<br />
abs(-3.2)</td>
</tr><tr><td><a name="int-overflow" id="int-overflow"></a><a href="#int-overflow-note">integer overflow</a></td>
<td></td>
<td></td>
</tr><tr><td><a href="#float-literal-exponent">float literal with exponent</a></td>
<td>2.0e2<br />
-2.0E-2</td>
<td>2.0e2<br />
-2.0E-2</td>
</tr><tr><td><a name="random-num" id="random-num"></a><a href="#random-num-note">random number</a></td>
<td>is(X, random(100)).<br /><span style="color: gray"><em>??</em></span></td>
<td>random:uniform().<br />
random:uniform(100).</td>
</tr><tr><td><a name="random-seed" id="random-seed"></a><a href="#random-seed-note">random seed</a></td>
<td>set_random(seed(17)).</td>
<td>random:seed(17, 17, 17).</td>
</tr><tr><td><a href="#random-seed-default">result of not seeding</a></td>
<td><span style="color: gray"><em>seeded using</em> /dev/random <em>or system time</em></span></td>
<td><span style="color: gray"><em>interpreter uses same seed at startup.</em></span></td>
</tr><tr><td><a name="bit-op" id="bit-op"></a><a href="#bit-op-note">bit operators</a></td>
<td>is(X, 5 <span style="white-space: pre-wrap;">&lt;&lt;</span> 1).<br />
is(X, 5 <span style="white-space: pre-wrap;">&gt;&gt;</span> 1).<br />
is(X, 5 /\ 1).<br />
is(X, 5 \/ 1).<br />
is(X, 5 xor 1).<br />
is(X, 5 \ 1).</td>
<td>5 bsl 1<br />
5 bsr 1<br />
5 band 1<br />
5 bor 1<br />
5 bxor 1<br />
bnot 5</td>
</tr><tr><td><a name="binary-octal-hex-literals" id="binary-octal-hex-literals"></a><a href="#binary-octal-hex-literals-note">binary, octal, and hex literals</a></td>
<td></td>
<td>2#101010<br />
8#52<br />
16#2A</td>
</tr><tr><th colspan="3"><a name="strings" id="strings"></a><a href="#strings-note">strings</a></th>
</tr><tr><th></th>
<th>prolog</th>
<th>erlang</th>
</tr><tr><td><a name="str-literal" id="str-literal"></a><a href="#str-literal-note">string literal</a></td>
<td><span style="color: gray"><em>list of characters:</em></span><br />
"don't say \"no\""<br /><br /><span style="color: gray"><em>quoted atom:</em></span><br />
'don\'t say "no"'</td>
<td>"don't say \"no\""</td>
</tr><tr><td><a name="str-literal-newline" id="str-literal-newline"></a><a href="#str-literal-newline-note">newline in literal</a></td>
<td><span style="color: gray"><em>yes; and \n notation can also be used</em></span></td>
<td><span style="color: gray"><em>yes; and \n notation can also be used</em></span></td>
</tr><tr><td><a name="char-esc" id="char-esc"></a><a href="#char-esc-note">character escapes</a></td>
<td>\a \b \e \f \n \r \s \t \v \x<span style="color: gray"><em>hh…</em></span>\ \u<span style="color: gray"><em>hhhh</em></span> \U<span style="color: gray"><em>hhhhhhhh</em></span> \<span style="color: gray"><em>ooo</em></span> \\ \' \"</td>
<td><span style="color: gray">\d <em>is delete;</em> \s <em>is space</em></span><br />
\b \d \e \f \n \q \r \s \t \u \v \x<span style="color: gray"><em>hh</em></span> \x{<span style="color: gray"><em>hh…</em></span>} \<span style="color: gray"><em>ooo</em></span> \' \" \\</td>
</tr><tr><td><a name="str-concat" id="str-concat"></a><a href="#str-concat-note">concatenate</a></td>
<td>append("one ","two ",Y), append(Y,"three",X).</td>
<td>"one " ++ "two " ++ "three"<br /><br />
string:concat("one ", string:concat("two ", "three"))<br /><br /><span style="color: gray"><em>concatenates double quoted string literals only:</em></span><br />
"one " "two " "three"</td>
</tr><tr><td><a name="str-replicate" id="str-replicate"></a><a href="#str-replicate-note">replicate</a></td>
<td></td>
<td>Hbar = string:copies("-", 80).</td>
</tr><tr><td><a name="trim" id="trim"></a><a href="#trim-note">trim</a><br /><span style="color: gray"><em>both sides, left side, right side</em></span></td>
<td></td>
<td>string:strip(" lorem ")<br />
string:strip(" lorem", left)<br />
string:strip("lorem ", right)</td>
</tr><tr><td><a name="pad" id="pad"></a><a href="#pad-note">pad</a><br /><span style="color: gray"><em>on right, on left, both sides</em></span></td>
<td></td>
<td>string:right("lorem", 10, $ )<br />
string:left("lorem", 10, $ )<br />
string:centre("lorem", 10, $ )</td>
</tr><tr><td><a name="num-to-str" id="num-to-str"></a><a href="#num-to-str-note">number to string</a></td>
<td></td>
<td>7 + list_to_integer("12")<br />
73.9 + list_to_float("0.039")</td>
</tr><tr><td><a name="str-to-num" id="str-to-num"></a><a href="#str-to-num-note">string to number</a></td>
<td></td>
<td>"value: " ++ integer_to_list(8)<br />
"value: " ++ float_to_list(3.14)</td>
</tr><tr><td>atom to string</td>
<td>name(foo, X).</td>
<td>atom_to_list(foo)</td>
</tr><tr><td>string to atom</td>
<td>string_to_atom("foo", X).</td>
<td>list_to_existing_atom("foo")</td>
</tr><tr><td><a name="translate-case" id="translate-case"></a><a href="#translate-case-note">translate case</a><br /><span style="color: gray"><em>to upper, to lower</em></span></td>
<td>upcase_atom('lorem', X).<br />
downcase_atom('LOREM', X).</td>
<td>string:to_upper("lorem")<br />
string:to_lower("LOREM")</td>
</tr><tr><td><a name="split" id="split"></a><a href="#split-note">split</a></td>
<td></td>
<td>string:tokens("foo bar baz", " ")<br /><br />
{ok, Rx} = re:compile("\s+").<br />
re:split("foo bar baz", Rx, [{return, list}])</td>
</tr><tr><td><a name="join" id="join"></a><a href="#join-note">join</a></td>
<td></td>
<td>string:join(["foo", "bar", "baz"], " ")</td>
</tr><tr><td><a href="#character-literal">character literal</a></td>
<td><span style="color: gray"><em>none</em></span></td>
<td>$A</td>
</tr><tr><td><a href="#string-length">string length</a></td>
<td>length("hello", X).<br /><br />
atom_length('hello', X).</td>
<td>length("hello")</td>
</tr><tr><td><a name="index-substr" id="index-substr"></a><a href="#index-substr-note">index of substring</a><br /><span style="color: gray"><em>first, last</em></span></td>
<td></td>
<td>string:str("foo bar bar", bar")<br />
string:rstr("foo bar bar", "bar")</td>
</tr><tr><td><a name="extract-substr" id="extract-substr"></a><a href="#extract-substr-note">extract substring</a></td>
<td></td>
<td>string:substr("foo bar bar", 5, 3)</td>
</tr><tr><td><a href="#chr-ord">chr and ord</a></td>
<td>char_code(X, 65).<br />
char_code('A', X).</td>
<td>[65]<br />
lists:nth(1, "A")</td>
</tr><tr><th colspan="3"><a name="regex" id="regex"></a><a href="#regex-note">regular expressions</a></th>
</tr><tr><th></th>
<th>prolog</th>
<th>erlang</th>
</tr><tr><td><a name="match-test" id="match-test"></a><a href="#match-test-note">match test</a></td>
<td></td>
<td>{ok, Rx} = re:compile(".*1999.*").<br /><br />
case re:run("it's 2000", Rx) of<br /><span style="white-space: pre-wrap;">  </span>{match, _} -&gt; io:format("party!");<br /><span style="white-space: pre-wrap;">  </span>nomatch -&gt; io:format("work")<br />
end.</td>
</tr><tr><td><a name="subst" id="subst"></a><a href="#subst-note">substitution</a></td>
<td></td>
<td>{ok, Rx} = re:compile("mi").<br /><br />
NewStr = re:replace("do re mi mi mi", Rx, "ma",<br /><span style="white-space: pre-wrap;">  </span>[global, {return,list}]).</td>
</tr><tr><th colspan="3"><a name="date-time" id="date-time"></a><a href="#date-time-note">dates and time</a></th>
</tr><tr><th></th>
<th>prolog</th>
<th>erlang</th>
</tr><tr><td>current date/time</td>
<td></td>
<td><span style="white-space: pre-wrap;">{</span>{YYYY,MM,DD}, {HH,MI,SS<span style="white-space: pre-wrap;">}</span>} = calendar:universal_time().<br /><span style="white-space: pre-wrap;">{</span>{YYYY,MM,DD}, {HH,MI,SS<span style="white-space: pre-wrap;">}</span>} = calendar:local_time().</td>
</tr><tr><th colspan="3"><a name="lists" id="lists"></a><a href="#lists-note">lists</a></th>
</tr><tr><th></th>
<th>prolog</th>
<th>erlang</th>
</tr><tr><td><a href="#list-literal">list literal</a></td>
<td>[1, 2, 3]</td>
<td>[1, 2, 3]</td>
</tr><tr><td><a href="#cons">cons</a></td>
<td>X = [4 | [3, 2, 1]].</td>
<td>[4 | [3, 2, 1]]</td>
</tr><tr><td><a href="#head">head</a></td>
<td>[X|_] = [1,2,3].</td>
<td>hd([1,2,3])<br /><span style="color: gray"><em>or use pattern matching:</em></span><br />
[Head|_] = [1,2,3].<br />
Head</td>
</tr><tr><td><a href="#tail">tail</a></td>
<td>[_|X] = [1,2,3].</td>
<td>tl([1,2,3])<br /><span style="color: gray"><em>or use pattern matching:</em></span><br />
[_|Tail] = [1,2,3].<br />
Tail</td>
</tr><tr><td><a href="#length">length</a></td>
<td>length([1,2,3], X).</td>
<td>length([1,2,3])</td>
</tr><tr><td><a href="#append">append</a></td>
<td>append([1,2], [3,4], List).</td>
<td>[1,2] ++ [3,4]</td>
</tr><tr><td><a href="#sort">sort</a></td>
<td>sort([1,3,2,4], X).</td>
<td>lists:sort([1,3,2,4]).</td>
</tr><tr><td><a href="#reverse">reverse</a></td>
<td>reverse([1,2,3,4], X).</td>
<td>lists:reverse([1,2,3,4]).</td>
</tr><tr><td><a href="#membership-note">membership</a></td>
<td>member(1, [1, 2, 3]).</td>
<td></td>
</tr><tr><td><a href="#zip">zip</a></td>
<td></td>
<td>lists:zip([1,2,3], ["a","b","c"]).</td>
</tr><tr><td><a href="#map">map</a></td>
<td></td>
<td>lists:map(fun(X) -&gt; X * X end, [1,2,3]).</td>
</tr><tr><td><a href="#filter">filter</a></td>
<td></td>
<td>lists:filter(fun(X) -&gt; X &gt; 2 end, [1,2,3]).</td>
</tr><tr><td><a href="#left-fold">left fold</a></td>
<td></td>
<td>lists:foldl(fun(X,Y) -&gt; X - Y end, 0, [1,2,3,4]).</td>
</tr><tr><td><a href="#right-fold">right fold</a></td>
<td></td>
<td>lists:foldr(fun(X,Y) -&gt; X - Y end, 0, [1,2,3,4]).</td>
</tr><tr><th colspan="3"><a name="tuples" id="tuples"></a><a href="#tuples-note">tuples</a></th>
</tr><tr><th></th>
<th>prolog</th>
<th>erlang</th>
</tr><tr><td><a href="#tuple-literal">tuple literal</a></td>
<td>(1, "hello", 3.14)</td>
<td>{1, "foo", 3.14}</td>
</tr><tr><td><a href="#tuple-access">tuple element access</a></td>
<td></td>
<td>element(1, {1, "foo", 3.14})<br />
setelement(2, {1, "foo", 3.14}, "bar")</td>
</tr><tr><td><a href="#tuple-length">tuple length</a></td>
<td></td>
<td>tuple_size({1, "foo", 3.14})</td>
</tr><tr><th colspan="3"><a name="algebraic-data-types" id="algebraic-data-types"></a><a href="#algebraic-data-types-note">algebraic data types</a></th>
</tr><tr><td><a href="#record">record</a></td>
<td></td>
<td></td>
</tr><tr><th></th>
<th>prolog</th>
<th>erlang</th>
</tr><tr><th colspan="3"><a name="functions" id="functions"></a><a href="#functions-note">functions</a></th>
</tr><tr><td><a href="#function-definition">function definition</a></td>
<td>factorial(0,1).<br />
factorial(N,F) :- is(N1, N - 1), factorial(N1,F1), is(F, N*F1).</td>
<td>factorial(0) -&gt; 1;<br />
factorial(N) -&gt; N * factorial(N-1).</td>
</tr><tr><td><a href="#function-definition-guards">function definition with guards</a></td>
<td></td>
<td>factorial(N) when N &gt; 0 -&gt; N * factorial(N-1);<br />
factorial(0) -&gt; 1.</td>
</tr><tr><td><a href="#anonymous-function">anonymous function</a></td>
<td></td>
<td>fun(X, Y) -&gt; X+Y end</td>
</tr><tr><td><a href="#piecewise-anonymous-function">piecewise defined anonymous function</a></td>
<td></td>
<td>fun([]) -&gt; null;<br /><span style="white-space: pre-wrap;">  </span>([X|_]) -&gt; X<br />
end</td>
</tr><tr><th colspan="3"><a name="execution-control" id="execution-control"></a><a href="#execution-control-note">execution control</a></th>
</tr><tr><th></th>
<th>prolog</th>
<th>erlang</th>
</tr><tr><td><a href="#if">if</a></td>
<td></td>
<td>if<br /><span style="white-space: pre-wrap;">  </span>X == 0 -&gt; io:format("no hits~n");<br /><span style="white-space: pre-wrap;">  </span>X == 1 -&gt; io:format("one hit~n");<br /><span style="white-space: pre-wrap;">  </span>X &gt; 1 -&gt; io:format("~w hits~n", [X])<br />
end.</td>
</tr><tr><td><a href="#for">for</a></td>
<td></td>
<td></td>
</tr><tr><td><a href="#try-catch">try/catch</a></td>
<td></td>
<td>X = 0.<br />
try (7 div X) of<br /><span style="white-space: pre-wrap;">  </span>Val -&gt; Val<br />
catch<br /><span style="white-space: pre-wrap;">  </span>error:badarith -&gt; 0<br />
end.</td>
</tr><tr><td><a href="#receive-message">receive message</a></td>
<td></td>
<td>-module(echo).<br />
-export([loop/0]).<br /><span style="white-space: pre-wrap;"> </span><br />
loop() -&gt;<br /><span style="white-space: pre-wrap;">  </span>receive<br /><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span>{From, Msg} -&gt;<br /><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span>From ! { self(), Msg},<br /><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span>loop();<br /><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span>stop -&gt;<br /><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span>true<br /><span style="white-space: pre-wrap;">  </span>end.</td>
</tr><tr><td><a href="#spawn-process">spawn process</a></td>
<td></td>
<td>Pid = spawn(echo, loop, []).</td>
</tr><tr><td><a href="#send-message">send message</a></td>
<td></td>
<td>Pid ! {self(), hello}.</td>
</tr><tr><td><a href="#list-processes">list processes</a></td>
<td></td>
<td>processes().</td>
</tr><tr><th colspan="3"><a name="file-handles" id="file-handles"></a><a href="#file-handles-note">file handles</a></th>
</tr><tr><th></th>
<th>prolog</th>
<th>erlang</th>
</tr><tr><td><a href="#open-file-read">open file for reading</a></td>
<td>open('foo.txt', read, Fd).</td>
<td></td>
</tr><tr><td><a href="#open-file-write">open file for writing</a></td>
<td>open('foo.txt', write, Fd).</td>
<td></td>
</tr><tr><td><a href="#close-file">close file</a></td>
<td>close(Fd).</td>
<td></td>
</tr><tr><td><a href="#read-line">read line</a></td>
<td></td>
<td>X = io:get_line("type line: ").</td>
</tr><tr><td><a href="#read-char">read character</a></td>
<td>get_char(X).</td>
<td>X = io:get_chars("type char: ", 1).</td>
</tr><tr><td><a href="#read-term">read term</a></td>
<td>read(X).</td>
<td>{ok,X} = io:read("type term: ").</td>
</tr><tr><td><a href="#write-char">write character</a></td>
<td>put_char("A").<br />
put_char(65)</td>
<td></td>
</tr><tr><td><a href="#write-term">write term</a></td>
<td>X = hello, write(X).</td>
<td>io:write(X).</td>
</tr><tr><td><a href="#printf">printf</a></td>
<td>format('foo: ~s ~2f ~w~n', ["bar", 3.1415, 7]).</td>
<td>io:format("foo: ~s ~.2f ~w~n", ["bar", 3.1415, 7]).</td>
</tr><tr><th colspan="3"><a name="files" id="files"></a><a href="#files-note">files</a></th>
</tr><tr><th></th>
<th>prolog</th>
<th>erlang</th>
</tr><tr><td><a name="file-test" id="file-test"></a><a href="#file-test-note">file test, regular file test</a></td>
<td></td>
<td>filelib:is_file("/etc/hosts")<br />
filelib:is_regular("/etc/hosts")</td>
</tr><tr><td><a name="file-size" id="file-size"></a><a href="#file-size-note">file size</a></td>
<td></td>
<td>filelib:file_size("/etc/hosts")</td>
</tr><tr><th colspan="3"><a name="directories" id="directories"></a><a href="#directories-note">directories</a></th>
</tr><tr><th></th>
<th>prolog</th>
<th>erlang</th>
</tr><tr><td><a name="build-pathname" id="build-pathname"></a><a href="#build-pathname-note">build pathname</a></td>
<td></td>
<td>filename:join("/etc", "passwd")</td>
</tr><tr><td><a name="dirname-basename" id="dirname-basename"></a><a href="#dirname-basename-note">dirname and basename</a></td>
<td></td>
<td>filename:dirname("/etc/passwd")<br />
filename:basename("/etc/passwd")</td>
</tr><tr><td><a name="absolute-pathname" id="absolute-pathname"></a><a href="#absolute-pathname-note">absolute pathname</a></td>
<td></td>
<td>filename:absname("..")</td>
</tr><tr><td><a name="glob" id="glob"></a><a href="#glob-note">glob paths</a></td>
<td></td>
<td><span style="color: gray"><em>returns list of strings:</em></span><br />
filelib:wildcard("/etc/*")</td>
</tr><tr><td><a name="mkdir" id="mkdir"></a><a href="#mkdir-note">make directory</a></td>
<td></td>
<td>filelib:ensure_dir("/tmp/foo/bar/")</td>
</tr><tr><td><a name="dir-test" id="dir-test"></a><a href="#dir-test-note">directory test</a></td>
<td></td>
<td>filelib:is_dir("/tmp")</td>
</tr><tr><th colspan="3"><a name="processes-environment" id="processes-environment"></a><a href="#processes-environment-note">processes and environment</a></th>
</tr><tr><th></th>
<th>prolog</th>
<th>erlang</th>
</tr><tr><td>command line arguments</td>
<td><span style="color: gray"><em>binds</em> Argv <em>to list of atoms representing command line args:</em></span><br />
current_prolog_flag(argv, Argv).</td>
<td><span style="color: gray"><em>when invoked by</em> escript <em>the command line arguments are passed to the function</em> main <em>in the invoked file as a list of strings.</em></span></td>
</tr><tr><td>program name</td>
<td></td>
<td></td>
</tr><tr><td>exit</td>
<td>halt(1).</td>
<td>halt(1).</td>
</tr><tr><th colspan="3"><a name="libraries-namespaces" id="libraries-namespaces"></a><a href="#libraries-namespaces-note">libraries and namespaces</a></th>
</tr><tr><th></th>
<th>prolog</th>
<th>erlang</th>
</tr><tr><td><a href="#load-file">load file</a></td>
<td><span style="color: gray"><em>ways to load file</em> data.pl:</span><br />
[data].<br />
['data.pl'].<br />
consult(data)</td>
<td></td>
</tr><tr><td><a href="#define-namespace">define namespace</a></td>
<td></td>
<td><span style="color: gray"><em>in file</em> factorial.erl</span><br />
-module(factorial).<br />
-export([factorial/1]).<br /><span style="color: gray"><em>definition of</em> factorial</span></td>
</tr><tr><td><a href="#compile-namespace">compile namespace</a></td>
<td></td>
<td>c(factorial).</td>
</tr><tr><td><a href="#use-namespace">use function in namespace</a></td>
<td></td>
<td>factorial:factorial(7).</td>
</tr><tr><th colspan="3"><a name="reflection" id="reflection"></a><a href="#reflection-note">reflection</a></th>
</tr><tr><th></th>
<th>prolog</th>
<th>erlang</th>
</tr><tr><td><a href="#inspect-namespace">inspect namespace</a></td>
<td></td>
<td>factorial:module_info().</td>
</tr><tr><th colspan="3"><a name="repl" id="repl"></a><a href="#repl-note">repl</a></th>
</tr><tr><td>help</td>
<td></td>
<td>help().</td>
</tr><tr><td><a href="#clear-variable">clear variable</a></td>
<td></td>
<td>f(X).</td>
</tr><tr><td><a href="#clear-all-variables">clear all variables</a></td>
<td></td>
<td>f().</td>
</tr><tr><td><a href="#display-processes">display processes</a></td>
<td></td>
<td>i().</td>
</tr><tr><th></th>
<th><span style="color: #efefef"><span style="white-space: pre-wrap;">_____________________________________________________________________________________</span></span></th>
<th><span style="color: #efefef"><span style="white-space: pre-wrap;">_____________________________________________________________________________________</span></span></th>
</tr></table><p><a name="general-note" id="general-note"></a></p>
<p><a name="version-used-note" id="version-used-note"></a></p>
<h2 id="toc0"><span><a href="#version-used">version used</a></span></h2>
<p>Version used for testing the examples in the sheet.</p>
<p><a name="show-version-note" id="show-version-note"></a></p>
<h2 id="toc1"><span><a href="#show-version">show version</a></span></h2>
<p>How to determine the version.</p>
<p><a name="grammar-invocation-note" id="grammar-invocation-note"></a></p>
<h1 id="toc2"><span><a href="#grammar-invocation">Grammar and Invocation</a></span></h1>
<p><a name="hello-world-note" id="hello-world-note"></a></p>
<h2 id="toc3"><span><a href="#hello-world">hello world</a></span></h2>
<p>A "Hello, World!" program.</p>
<p><a name="compiler-note" id="compiler-note"></a></p>
<h2 id="toc4"><span><a href="#compiler">compiler</a></span></h2>
<p>The native compiler.</p>
<p><strong>erlang:</strong></p>
<p>Sometimes the HiPE native compiler must be installed separately.</p>
<p>Modules can be compiled to native code, but an Erlang runtime is still required to run the code.</p>
<p><a name="bytecode-compiler-note" id="bytecode-compiler-note"></a></p>
<h2 id="toc5"><span><a href="#bytecode-compiler">bytecode compiler</a></span></h2>
<p>The bytecode compiler.</p>
<p><a name="interpreter-note" id="interpreter-note"></a></p>
<h2 id="toc6"><span><a href="#interpreter">interpreter</a></span></h2>
<p>The interpreter.</p>
<p><a name="shebang-note" id="shebang-note"></a></p>
<h2 id="toc7"><span><a href="#shebang">shebang</a></span></h2>
<p>How to associate an interpreter with a file on a Unix system.</p>
<p><a name="invoke-repl-note" id="invoke-repl-note"></a></p>
<h2 id="toc8"><span><a href="#invoke-repl">repl</a></span></h2>
<p>How to run the read-evaluate-print loop.</p>
<p><a name="block-delimiters-note" id="block-delimiters-note"></a></p>
<h2 id="toc9"><span><a href="#block-delimiters">block delimiters</a></span></h2>
<p>How blocks are delimited. A block is a sequence of statements which are executed in order.</p>
<p><a name="stmt-terminator-note" id="stmt-terminator-note"></a></p>
<h2 id="toc10"><span><a href="#stmt-terminator">statement terminator</a></span></h2>
<p>How statements are terminated.</p>
<p><a name="eol-comment-note" id="eol-comment-note"></a></p>
<h2 id="toc11"><span><a href="#eol-comment">end-of-line comment</a></span></h2>
<p>The syntax for a comment which goes to the end of the current line.</p>
<p><a name="multiple-line-comment-note" id="multiple-line-comment-note"></a></p>
<h2 id="toc12"><span><a href="#multiple-line-comment">multiple line comment</a></span></h2>
<p>The syntax for a delimited comment which can span lines.</p>
<p><a name="var-expr-note" id="var-expr-note"></a></p>
<h1 id="toc13"><span><a href="#var-expr">Variables and Expressions</a></span></h1>
<p><a name="arithmetic-logic-note" id="arithmetic-logic-note"></a></p>
<h1 id="toc14"><span><a href="#arithmetic-logic">Arithmetic and Logic</a></span></h1>
<p><a name="true-false-note" id="true-false-note"></a></p>
<h2 id="toc15"><span><a href="#true-false">true and false</a></span></h2>
<p>The literals for true and false.</p>
<p><a name="falsehoods-note" id="falsehoods-note"></a></p>
<h2 id="toc16"><span><a href="#falsehoods">falsehoods</a></span></h2>
<p>Values which evaluate as false in a boolean context.</p>
<p><a name="logical-op-note" id="logical-op-note"></a></p>
<h2 id="toc17"><span><a href="#logical-op">logical operators</a></span></h2>
<p><a name="short-circuit-op-note" id="short-circuit-op-note"></a></p>
<h2 id="toc18"><span><a href="#short-circuit-op">short circuit operators</a></span></h2>
<p><a name="relational-op-note" id="relational-op-note"></a></p>
<h2 id="toc19"><span><a href="#relational-op">relational operators</a></span></h2>
<p><strong>erlang:</strong></p>
<p>Relational operators can be used on values with different types. In this case the precedence is determined by<br />
the type according to this sequence:</p>
<div class="code">
<pre>
<code>number &lt; atom &lt; reference &lt; fun &lt; port &lt; pid &lt; tuple &lt; list &lt; binary</code>
</pre></div>
<p>If a comparison is performed on an integer and a float, the integer will be converted to a float. <em>=:=</em> and <em>=/=</em> do not perform conversions and thus will always return false and true respectively when called on an integer and a float.</p>
<p><a name="arith-expr-note" id="arith-expr-note"></a></p>
<h2 id="toc20"><span><a href="#arith-expr">arithmetic expression</a></span></h2>
<p><a name="arith-op-note" id="arith-op-note"></a></p>
<h2 id="toc21"><span><a href="#arith-op">arithmetic operators</a></span></h2>
<p><a name="unary-negation-note" id="unary-negation-note"></a></p>
<h2 id="toc22"><span><a href="#unary-negation">unary negation</a></span></h2>
<p><a name="int-div-note" id="int-div-note"></a></p>
<h2 id="toc23"><span><a href="#int-div">integer division</a></span></h2>
<p>How to find the quotient of two integers.</p>
<p><a name="int-div-zero-note" id="int-div-zero-note"></a></p>
<h2 id="toc24"><span><a href="#int-div-zero">integer division by zero</a></span></h2>
<p>The result of dividing an integer by zero.</p>
<p><a name="float-div-note" id="float-div-note"></a></p>
<h2 id="toc25"><span><a href="#float-div">float division</a></span></h2>
<p>How to perform float division of two integers.</p>
<p><a name="float-div-zero-note" id="float-div-zero-note"></a></p>
<h2 id="toc26"><span><a href="#float-div-zero">float division by zero</a></span></h2>
<p>The result of dividing a float by zero.</p>
<p><a name="power-note" id="power-note"></a></p>
<h2 id="toc27"><span><a href="#power">power</a></span></h2>
<p><a name="sqrt-note" id="sqrt-note"></a></p>
<h2 id="toc28"><span><a href="#sqrt">sqrt</a></span></h2>
<p><a name="sqrt-negative-one-note" id="sqrt-negative-one-note"></a></p>
<h2 id="toc29"><span><a href="#sqrt-negative-one">sqrt -1</a></span></h2>
<p><a name="transcendental-func-note" id="transcendental-func-note"></a></p>
<h2 id="toc30"><span><a href="#transcendental-func">transcendental functions</a></span></h2>
<p><a name="float-truncation-note" id="float-truncation-note"></a></p>
<h2 id="toc31"><span><a href="#float-truncation">float truncation</a></span></h2>
<p><a name="absolute-val-note" id="absolute-val-note"></a></p>
<h2 id="toc32"><span><a href="#absolute-val">absolute value</a></span></h2>
<p><a name="random-num-note" id="random-num-note"></a></p>
<h2 id="toc33"><span><a href="#random-num">random number</a></span></h2>
<p><a name="random-seed-note" id="random-seed-note"></a></p>
<h2 id="toc34"><span><a href="#random-seed">random seed</a></span></h2>
<p><a name="bit-op-note" id="bit-op-note"></a></p>
<h2 id="toc35"><span><a href="#bit-op">bit operators</a></span></h2>
<p><a name="strings-note" id="strings-note"></a></p>
<h1 id="toc36"><span><a href="#strings">Strings</a></span></h1>
<p><a name="str-literal-note" id="str-literal-note"></a></p>
<h2 id="toc37"><span><a href="#str-literal">string literal</a></span></h2>
<p><a name="str-literal-newline-note" id="str-literal-newline-note"></a></p>
<h2 id="toc38"><span><a href="#str-literal-newline">newline in literal</a></span></h2>
<p><a name="char-esc-note" id="char-esc-note"></a></p>
<h2 id="toc39"><span><a href="#char-esc">character escapes</a></span></h2>
<p><strong>erlang:</strong></p>
<p>Some of the Erlang backslash escapes are not derived from C:</p>
<table class="wiki-content-table"><tr><td>\d</td>
<td>delete</td>
</tr><tr><td>\s</td>
<td>space</td>
</tr></table><p><a name="str-concat-note" id="str-concat-note"></a></p>
<h2 id="toc40"><span><a href="#str-concat">concatenate</a></span></h2>
<p><a name="str-replicate-note" id="str-replicate-note"></a></p>
<h2 id="toc41"><span><a href="#str-replicate">replicate</a></span></h2>
<p><a name="trim-note" id="trim-note"></a></p>
<h2 id="toc42"><span><a href="#trim">trim</a></span></h2>
<p><a name="pad-note" id="pad-note"></a></p>
<h2 id="toc43"><span><a href="#pad">pad</a></span></h2>
<p><a name="num-to-str-note" id="num-to-str-note"></a></p>
<h2 id="toc44"><span><a href="#num-to-str">number to string</a></span></h2>
<p><a name="str-to-num-note" id="str-to-num-note"></a></p>
<h2 id="toc45"><span><a href="#str-to-num">string to number</a></span></h2>
<h2 id="toc46"><span>atom to string</span></h2>
<h2 id="toc47"><span>string to atom</span></h2>
<p><a name="split-note" id="split-note"></a></p>
<h2 id="toc48"><span><a href="#split">split</a></span></h2>
<p><a name="join-note" id="join-note"></a></p>
<h2 id="toc49"><span><a href="#join">join</a></span></h2>
<p><a name="regex-note" id="regex-note"></a></p>
<h1 id="toc50"><span><a href="#regex">Regular Expressions</a></span></h1>
<p><a name="date-time-note" id="date-time-note"></a></p>
<h1 id="toc51"><span><a href="#date-time">Dates and Time</a></span></h1>
<p><a name="lists-note" id="lists-note"></a></p>
<h1 id="toc52"><span><a href="#lists">Lists</a></span></h1>
<p><a name="tuples-note" id="tuples-note"></a></p>
<h1 id="toc53"><span><a href="#tuples">Tuples</a></span></h1>
<p><a name="algebraic-data-types-note" id="algebraic-data-types-note"></a></p>
<h1 id="toc54"><span><a href="#algebraic-data-types">Algebraic Data Types</a></span></h1>
<p><a name="functions-note" id="functions-note"></a></p>
<h1 id="toc55"><span><a href="#functions">Functions</a></span></h1>
<p><a name="function-definition" id="function-definition"></a></p>
<h2 id="toc56"><span>function definition</span></h2>
<p><a name="function-definition-guards" id="function-definition-guards"></a></p>
<h2 id="toc57"><span>function definition with guards</span></h2>
<p><strong>erlang:</strong></p>
<p>The expressions in guards must be side-effect free. Thus they can only contain the following:</p>
<ul><li>bound variables</li>
<li>literals</li>
<li>type tests: <em>is_atom</em>, <em>is_boolean</em>, <em>is_tuple</em>, …</li>
<li>relational operators</li>
<li>arithmetic operators</li>
<li>boolean operators</li>
<li>a few built-in functions</li>
</ul><p><a name="execution-control-note" id="execution-control-note"></a></p>
<h1 id="toc58"><span><a href="#execution-control">Execution Control</a></span></h1>
<p><a name="file-handles-note" id="file-handles-note"></a></p>
<h1 id="toc59"><span><a href="#file-handles">File Handles</a></span></h1>
<p><a name="read-line" id="read-line"></a></p>
<h2 id="toc60"><span>read line</span></h2>
<p><strong>erlang:</strong></p>
<p><em>io:get_line</em> accepts an argument which is displayed as a prompt. The return value is a string which includes the newline.</p>
<p><a name="read-char" id="read-char"></a></p>
<h2 id="toc61"><span>read character</span></h2>
<p><strong>erlang:</strong></p>
<p><em>io:get_chars</em> accepts two arguments. The first is a string which is displayed as a prompt. The second is the number of characters to be read. The function keeps reading lines until the requested number of characters has been collected. The return value is a string which can contain newlines if a line of less than the requested number of characters was entered.</p>
<p><a name="files-note" id="files-note"></a></p>
<h1 id="toc62"><span><a href="#files">Files</a></span></h1>
<p><a name="directories-note" id="directories-note"></a></p>
<h1 id="toc63"><span><a href="#directories">Directories</a></span></h1>
<p><a name="processes-environment-note" id="processes-environment-note"></a></p>
<h1 id="toc64"><span><a href="#processes-environment">Processes and Environment</a></span></h1>
<p><a name="libraries-namespaces-note" id="libraries-namespaces-note"></a></p>
<h1 id="toc65"><span><a href="#libraries-namespaces">Libraries and Namespaces</a></span></h1>
<p><a name="reflection-note" id="reflection-note"></a></p>
<h1 id="toc66"><span><a href="#reflection">Reflection</a></span></h1>
<p><a name="repl-note" id="repl-note"></a></p>
<h1 id="toc67"><span><a href="#repl">REPL</a></span></h1>
<p><a name="prolog" id="prolog"></a></p>
<h1 id="toc68"><span><a href="#top">Prolog</a></span></h1>
<p><a href="http://www.swi-prolog.org/pldoc/refman/">SWI Prolog Reference Manual</a><br /><a href="http://pauillac.inria.fr/~deransar/prolog/docs.html">Prolog: The ISO Standard Document</a></p>
<p><a name="erlang" id="erlang"></a></p>
<h1 id="toc69"><span><a href="#top">Erlang</a></span></h1>
<p><a href="http://erlang.org/doc/reference_manual/users_guide.html">Erlang Reference Manual User's Guide</a><br /><a href="http://erlang.org/doc/apps/stdlib/index.html">Erlang Standard Library</a></p>

                    </div>
        </div>
      </div>
      <div id="license-area" class="license-area">
        content of this page licensed under
        <a rel="license" href="http://creativecommons.org/licenses/by-sa/3.0/">
        creative commons attribution-sharealike 3.0</a>
      </div>
    </div>
  </div>
</div>

<script type="text/javascript">

  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-17129977-2']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();

</script>

</body>
</html>
