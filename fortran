<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="content-type" content="text/html;charset=UTF-8"/>
<link rel="icon" type="image/gif" href="/favicon.gif"/>
<link rel="apple-touch-icon" sizes="120x120" href="touch-icon-iphone-retina.png" />
<link rel="apple-touch-icon" sizes="152x152" href="touch-icon-ipad-retina.png" />
<title>Fortran - Hyperpolyglot</title>
<style type="text/css" id="internal-style">
@import url(hyperpolyglot.css);
</style>
<meta http-equiv="content-type" content="text/html;charset=UTF-8"/>
<meta http-equiv="content-language" content="en"/>
</head>
<body>
<div id="container-wrap-wrap">
  <div id="container-wrap">
    <div id="container">
      <div id="header">
        <h1><a href="/"><span>Hyperpolyglot</span></a></h1>
      </div>
      <div id="content-wrap">
        <div id="main-content">
<div id="page-title">
                            Fortran
                        </div>
<div id="page-content">
                        

<p><a name="top" id="top"></a><em>a side-by-side reference sheet</em></p>
<p><a href="#grammar-invocation">grammar and invocation</a> | <a href="#variables-expressions">variables and expressions</a> | <a href="#arithmetic-logic">arithmetic and logic</a> | <a href="#strings">strings</a> | <a href="#regexes">regexes</a> | <a href="#dates-time">dates and time</a> | <a href="#arrays">arrays</a> | <a href="#dictionaries">dictionaries</a> | <a href="#functions">functions</a> | <a href="#execution-control">execution control</a> | <a href="#concurrency">concurrency</a> | <a href="#file-handles">file handles</a> | <a href="#files">files</a> | <a href="#file-fmt">file formats</a> | <a href="#directories">directories</a> | <a href="#processes-environment">processes and environment</a> | <a href="#libraries-namespaces">libraries and namespaces</a> | <a href="#user-defined-types">user-defined types</a> | <a href="#macros">macros</a> | <a href="#net-web">net and web</a> | <a href="#unit-tests">unit tests</a> | <a href="#debugging-profiling">debugging and profiling</a><br /><br /><a href="#multidimensional-arrays">multidimensional arrays</a> | <a href="#vectors">vectors</a> | <a href="#matrices">matrices</a></p>
<table class="wiki-content-table"><tr><th><a name="general" id="general"></a></th>
<th><a href="#fortran">fortran</a></th>
</tr><tr><td><a name="version-used" id="version-used"></a><a href="#version-used-note">version used</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td><span style="color: gray"><em>GNU Fortran 4.5 (Fortran 95)</em></span></td>
</tr><tr><td><a name="show-version" id="show-version"></a><a href="#show-version-note">show version</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td>$ gfortran <span style="white-space: pre-wrap;">--</span>version</td>
</tr><tr><td><a name="implicit-prologue" id="implicit-prologue"></a><a href="#implicit-prologue-note">implicit prologue</a></td>
<td></td>
</tr><tr><th colspan="2"><a name="grammar-invocation" id="grammar-invocation"></a><a href="#grammar-invocation-note">grammar and invocation</a></th>
</tr><tr><th></th>
<th>fortran</th>
</tr><tr><td><a name="hello-world" id="hello-world"></a><a href="#hello-world-note">hello word</a></td>
<td>$ cat hello.f95<br />
program hello<br /><span style="white-space: pre-wrap;">  </span>write(*,*) 'Hello,' &amp;<br /><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span>, ' World!'<br />
end program hello<br /><br />
$ gfortran hello.f95<br /><br />
$ ./a.out<br /><span style="white-space: pre-wrap;"> </span>Hello, World!</td>
</tr><tr><td><a name="file-suffixes" id="file-suffixes"></a><a href="#file-suffixes-note">file suffixes</a><br /><span style="color: gray"><em>source, header, object file</em></span></td>
<td>.f95 <span style="color: gray"><em>none</em></span> .o</td>
</tr><tr><td><a name="block-delimiters" id="block-delimiters"></a><a href="#block-delimiters-note">block delimiters</a></td>
<td>program <span style="color: gray"><em>…</em></span> end program<br />
function <span style="color: gray"><em>…</em></span> end function<br />
subroutine <span style="color: gray"><em>…</em></span>end subroutine<br />
if <span style="color: gray"><em>…</em></span> then <span style="color: gray"><em>…</em></span> elseif <span style="color: gray"><em>…</em></span> then <span style="color: gray"><em>…</em></span> else <span style="color: gray"><em>…</em></span> endif<br />
do while <span style="color: gray"><em>…</em></span> end do<br />
do <span style="color: gray"><em>…</em></span> end do</td>
</tr><tr><td><a name="stmt-terminator" id="stmt-terminator"></a><a href="#stmt-terminator-note">statement terminator</a></td>
<td><span style="color: gray"><em>newline</em></span><br /><br /><span style="color: gray"><em>when a line ends with</em> &amp; <em>the statement continues on the following line</em></span></td>
</tr><tr><td><a name="eol-comment" id="eol-comment"></a><a href="#eol-comment-note">end-of-line comment</a></td>
<td>! <span style="color: gray"><em>comment</em></span></td>
</tr><tr><td><a name="multiple-line-comment" id="multiple-line-comment"></a><a href="#multiple-line-comment-note">multiple line comment</a></td>
<td><span style="color: gray"><em>none</em></span></td>
</tr><tr><th colspan="2"><a name="variables-expressions" id="variables-expressions"></a><a href="#variables-expressions-note">variables and expressions</a></th>
</tr><tr><th></th>
<th>fortran</th>
</tr><tr><td><a name="var-types" id="var-types"></a><a href="#var-types-note">variable types</a></td>
<td>integer real complex character logical</td>
</tr><tr><td><a name="var-declaration" id="var-declaration"></a><a href="#var-declaration-note">variable declaration</a></td>
<td>integer :: n<br />
real :: x = 3.7</td>
</tr><tr><td><a name="case-sensitive" id="case-sensitive"></a><a href="#case-sensitive-note">are identifiers case sensitive</a></td>
<td><span style="color: gray"><em>no; Fortran 77 and earlier required all caps</em></span></td>
</tr><tr><td><a name="primitive-type-stack" id="primitive-type-stack"></a><a href="#primitive-type-stack-note">declare primitive type on stack</a></td>
<td>integer::i<br />
integer::j = 3</td>
</tr><tr><td><a name="allocate" id="allocate"></a><a href="#allocate-note">allocate primitive type on heap</a></td>
<td></td>
</tr><tr><td><a name="free" id="free"></a><a href="#free-note">free primitive type on heap</a></td>
<td></td>
</tr><tr><td><a name="global" id="global"></a><a href="#global-note">global primitive type</a></td>
<td></td>
</tr><tr><td><a name="unitialized-val" id="unitialized-val"></a><a href="#unitialized-val-note">value of uninitialized primitive types</a></td>
<td></td>
</tr><tr><td><a name="const" id="const"></a><a href="#const-note">constant</a></td>
<td></td>
</tr><tr><td><a name="assignment" id="assignment"></a><a href="#assignment-note">assignment</a></td>
<td>i = 3</td>
</tr><tr><td><a name="parallel-assignment" id="parallel-assignment"></a><a href="#parallel-assignment-note">parallel assignment</a></td>
<td></td>
</tr><tr><td><a name="swap" id="swap"></a><a href="#swap-note">swap</a></td>
<td></td>
</tr><tr><td><a name="compound-assignment-op" id="compound-assignment-op"></a><a href="#compound-assignment-op-note">compound assignment operators</a></td>
<td><span style="color: gray"><em>none</em></span></td>
</tr><tr><td><a name="incr-decr" id="incr-decr"></a><a href="#incr-decr-note">increment and decrement operators</a></td>
<td><span style="color: gray"><em>none</em></span></td>
</tr><tr><td><a name="null" id="null"></a><a href="#null-note">null</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td><span style="color: gray"><em>used for pointers only:</em></span><br />
null()</td>
</tr><tr><td><a name="coalesce" id="coalesce"></a><a href="#coalesce-note">coalesce</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td><span style="color: gray"><em>none</em></span></td>
</tr><tr><td><a name="undefined-var-access" id="undefined-var-access"></a><a href="#undefined-var-access-note">undefined variable access</a></td>
<td><span style="color: gray"><em>variables must be declared under</em> implicit none</span></td>
</tr><tr><th colspan="2"><a name="arithmetic-logic" id="arithmetic-logic"></a><a href="#arithmetic-logic-note">arithmetic and logic</a></th>
</tr><tr><th></th>
<th>fortran</th>
</tr><tr><td><a name="boolean-type" id="boolean-type"></a><a href="#boolean-type-note">boolean type</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td></td>
</tr><tr><td><a name="true-false" id="true-false"></a><a href="#true-false-note">true and false</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td>.true. .false.</td>
</tr><tr><td><a name="falsehoods" id="falsehoods"></a><a href="#falsehoods-note">falsehoods</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td>.false.<br /><span style="color: gray"><em>no implicit conversion of values to booleans</em></span></td>
</tr><tr><td><a name="logical-op" id="logical-op"></a><a href="#logical-op-note">logical operators</a></td>
<td>.and. .or. .not. .eqv. .neqv.</td>
</tr><tr><td><a name="relational-op" id="relational-op"></a><a href="#relational-op-note">relational operators</a></td>
<td>== /= &gt; &lt; &gt;= &lt;=</td>
</tr><tr><td><a name="int-type" id="int-type"></a><a href="#int-type-note">integer type</a></td>
<td></td>
</tr><tr><td><a name="unsigned-type" id="unsigned-type"></a><a href="#unsigned-type-note">unsigned type</a></td>
<td></td>
</tr><tr><td><a name="float-type" id="float-type"></a><a href="#float-type-note">float type</a></td>
<td></td>
</tr><tr><td><a name="arith-op" id="arith-op"></a><a href="#arith-op-note">arithmetic operators</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td>+ - * / mod(<span style="color: gray"><em>n</em></span>, <span style="color: gray"><em>divisor</em></span>)</td>
</tr><tr><td><a name="int-div" id="int-div"></a><a href="#int-div-note">integer division</a></td>
<td>3 / 7</td>
</tr><tr><td><a name="int-div-zero" id="int-div-zero"></a><a href="#int-div-zero-note">integer division by zero</a></td>
<td>real :: x = 0.0<br />
integer :: i = 0<br /><br /><span style="color: gray">! compiler error:</span><br />
1.0 / 0.0<br /><br /><span style="color: gray">! +Infinity:</span><br />
1.0 / x<br /><br /><span style="color: gray">! floating point exception:</span><br />
1 / i</td>
</tr><tr><td><a name="float-div" id="float-div"></a><a href="#float-div-note">float division</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td>3 / float(7)</td>
</tr><tr><td><a name="float-div-zero" id="float-div-zero"></a><a href="#float-div-zero-note">float division by zero</a></td>
<td>real :: x = 0.0<br />
integer :: i = 0<br /><br /><span style="color: gray">! compiler error:</span><br />
1.0 / 0.0<br /><br /><span style="color: gray">! +Infinity:</span><br />
1.0 / x<br /><br /><span style="color: gray">! floating point exception:</span><br />
1 / i</td>
</tr><tr><td><a name="power" id="power"></a><a href="#power-note">power</a></td>
<td>2.0 ** 3.0</td>
</tr><tr><td><a name="sqrt" id="sqrt"></a><a href="#sqrt-note">sqrt</a></td>
<td>sqrt(2)</td>
</tr><tr><td><a name="sqrt-negative-one" id="sqrt-negative-one"></a><a href="#sqrt-negative-one-note">sqrt -1</a></td>
<td>real :: x = -1.0<br />
complex :: z = (-1.0, 0.0)<br /><br /><span style="color: gray">! compiler error:</span><br />
sqrt(-1.0)<br /><br /><span style="color: gray">! NaN:</span><br />
sqrt(x)<br /><br /><span style="color: gray">! (0.000, 1.000)</span><br />
sqrt(z)</td>
</tr><tr><td><a name="transcendental-func" id="transcendental-func"></a><a href="#transcendental-func-note">transcendental functions</a></td>
<td>exp log log10<br />
sin cos tan<br />
asin acos atan<br />
atan2</td>
</tr><tr><td><a name="float-truncation" id="float-truncation"></a><a href="#float-truncation-note">float truncation</a></td>
<td>int(3.7)<br /><span style="color: gray"><em>none</em></span><br />
ceiling(3.7)<br />
floor(3.7)</td>
</tr><tr><td><a name="absolute-val" id="absolute-val"></a><a href="#absolute-val-note">absolute value</a></td>
<td>abs(-7)<br />
abs(-7.77)</td>
</tr><tr><td><a name="complex-type" id="complex-type"></a><a href="#complex-type-note">complex type</a></td>
<td></td>
</tr><tr><td><a name="complex-construction" id="complex-construction"></a><a href="#complex-construction-note">complex construction</a></td>
<td>(0.0, 1.0)<br />
(0.0, 2.0)<br />
(0.0, 3.0)</td>
</tr><tr><td><a name="complex-decomposition" id="complex-decomposition"></a><a href="#complex-decomposition-note">complex decomposition</a></td>
<td>real(z)<br />
imag(z)<br />
atan2(imag(z), real(z))</td>
</tr><tr><td><a name="random-num" id="random-num"></a><a href="#random-num-note">random number</a><br /><span style="color: gray"><em>uniform integer, uniform float</em></span></td>
<td><span style="color: gray"><em>??</em></span><br />
rand(0)</td>
</tr><tr><td><a name="random-seed" id="random-seed"></a><a href="#random-seed-note">random seed</a></td>
<td></td>
</tr><tr><td><a name="bit-op" id="bit-op"></a><a href="#bit-op-note">bit operators</a></td>
<td><span style="color: gray"><em>right shift if</em> pos <em>is positive:</em></span><br />
ishft(<span style="color: gray"><em>i</em>, <em>pos</em></span>)<br />
iand(<span style="color: gray"><em>i</em></span>, <span style="color: gray"><em>j</em></span>)<br />
ior(<span style="color: gray"><em>i</em></span>, <span style="color: gray"><em>j</em></span>)<br />
ieor(<span style="color: gray"><em>i</em></span>, <span style="color: gray"><em>j</em></span>)<br />
not(<span style="color: gray"><em>i</em></span>)</td>
</tr><tr><th colspan="2"><a name="strings" id="strings"></a><a href="#strings-note">strings</a></th>
</tr><tr><th></th>
<th>fortran</th>
</tr><tr><td><a name="str-type" id="str-type"></a><a href="#str-type-note">string type</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td></td>
</tr><tr><td><a name="char-type" id="char-type"></a><a href="#char-type-note">char type</a></td>
<td></td>
</tr><tr><td><a name="str-literal" id="str-literal"></a><a href="#str-literal-note">string literal</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td>'don''t say "no"'<br />
"don't say ""no"""</td>
</tr><tr><td><a name="newline-in-str-literal" id="newline-in-str-literal"></a><a href="#newline-in-str-literal-note">newline in string literal</a></td>
<td>"lorem" <span style="white-space: pre-wrap;">//</span> achar(10) <span style="white-space: pre-wrap;">//</span> "ipsum"</td>
</tr><tr><td><a name="str-literal-esc" id="str-literal-esc"></a><a href="#str-literal-esc-note">string escapes</a></td>
<td><span style="color: gray"><em>none</em></span></td>
</tr><tr><td><a href="#allocate-string">allocate string</a></td>
<td></td>
</tr><tr><td><a href="#string-comparison">comparison</a></td>
<td></td>
</tr><tr><td><a href="#string-equal">semantics of ==</a></td>
<td></td>
</tr><tr><td><a href="#string-to-number">convert string to numeric</a></td>
<td></td>
</tr><tr><td><a href="#number-to-string">convert numeric to string</a></td>
<td></td>
</tr><tr><td><a href="#split">split</a></td>
<td><span style="color: gray"><em>none</em></span></td>
</tr><tr><td><a href="#join">join</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td></td>
</tr><tr><td><a href="#string-concatenate">concatenate</a></td>
<td>'hello' <span style="white-space: pre-wrap;">//</span> ' world'</td>
</tr><tr><td><a href="#str-replicate">replicate</a></td>
<td>character(len=80) :: hbar<br />
hbar = repeat('-', 80)</td>
</tr><tr><td><a href="#substring">substring</a></td>
<td>"hello"(1:4)</td>
</tr><tr><td><a href="#index">index</a></td>
<td><span style="color: gray"><em>counts from one, returns zero if not found</em></span><br />
index("hello", "el")</td>
</tr><tr><td><a href="#sprintf">sprintf</a></td>
<td>character(len=100) :: s<br />
write(s,'(A A F9.3 I9)') 'foo', ':', 2.2, 7</td>
</tr><tr><td><a href="#uppercase">uppercase</a></td>
<td><span style="color: gray"><em>none</em></span></td>
</tr><tr><td><a href="#lowercase">lowercase</a></td>
<td><span style="color: gray"><em>none</em></span></td>
</tr><tr><td><a href="#trim">trim</a></td>
<td><span style="color: gray"><em>??</em></span><br />
adjustl(' foo')<br />
trim('foo ')</td>
</tr><tr><td><a href="#pad">pad on right</a></td>
<td></td>
</tr><tr><td><a href="#string-length">length</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td>len("hello")</td>
</tr><tr><td><a href="#char-access">character access</a></td>
<td>"hello"(1:1)</td>
</tr><tr><td><a href="#chr-ord">chr and ord</a></td>
<td>achar(65)<br />
iachar('A')</td>
</tr><tr><th colspan="2"><a name="regexes" id="regexes"></a><a href="#regexes-note">regular expressions</a></th>
</tr><tr><th></th>
<th>fortran</th>
</tr><tr><td><a name="regex-metachar" id="regex-metachar"></a><a href="#regex-metachar-note">metacharacters</a></td>
<td></td>
</tr><tr><td><a name="char-class-abbrev" id="char-class-abbrev"></a><a href="#char-class-abbrev-note">character class abbrevations</a></td>
<td></td>
</tr><tr><td><a name="regex-anchors" id="regex-anchors"></a><a href="#regex-anchors-note">anchors</a></td>
<td></td>
</tr><tr><td><a name="regex-test" id="regex-test"></a><a href="#regex-test-note">match test</a></td>
<td></td>
</tr><tr><td><a name="case-insensitive-regex" id="case-insensitive-regex"></a><a href="#case-insensitive-regex-note">case insensitive match test</a></td>
<td></td>
</tr><tr><td><a name="regex-modifiers" id="regex-modifiers"></a><a href="#regex-modifiers-note">modifiers</a></td>
<td></td>
</tr><tr><td><a name="subst" id="subst"></a><a href="#subst-note">substitution</a></td>
<td></td>
</tr><tr><td><a name="group-capture" id="group-capture"></a><a href="#group-capture-note">group capture</a></td>
<td></td>
</tr><tr><th colspan="2"><a name="dates-time" id="dates-time"></a><a href="#dates-time-note">dates and time</a></th>
</tr><tr><th></th>
<th>fortran</th>
</tr><tr><td><a name="unix-epoch-type" id="unix-epoch-type"></a><a href="#unix-epoch-type-note">unix epoch type</a></td>
<td><span style="color: gray"><em>integer representing seconds since Jan 1, 1970 UTC</em></span></td>
</tr><tr><td><a name="broken-down-date-time-type" id="broken-down-date-time-type"></a><a href="#broken-down-date-time-type-note">broken down type</a></td>
<td></td>
</tr><tr><td><a name="current-unix-epoch" id="current-unix-epoch"></a><a href="#current-unix-epoch-note">current unix epoch</a></td>
<td><span style="color: gray"><em>GNU Fortran:</em></span><br />
t = time()</td>
</tr><tr><td>current broken-down date/time</td>
<td></td>
</tr><tr><td><a name="date-time-to-str" id="date-time-to-str"></a><a href="#date-time-to-str-note">date and time to string</a></td>
<td></td>
</tr><tr><td><a name="format-date" id="format-date"></a><a href="#format-date-note">format date</a></td>
<td></td>
</tr><tr><td><a name="parse-date" id="parse-date"></a><a href="#parse-date-note">parse date</a></td>
<td></td>
</tr><tr><td><a name="date-to-str" id="date-to-str"></a><a href="#date-to-str-note">convert to string</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td>ctime(t)</td>
</tr><tr><td><a name="date-subtraction" id="date-subtraction"></a><a href="#date-subtraction-note">date subtraction</a></td>
<td></td>
</tr><tr><td><a name="add-duration" id="add-duration"></a><a href="#add-duration-note">add duration</a></td>
<td></td>
</tr><tr><td><a name="date-parts" id="date-parts"></a><a href="#date-parts-note">date parts</a></td>
<td>integer::values(9);<br />
integer year,mon,day<br /><br />
call ltime(t, values)<br />
year = values(6) + 1900<br />
mon = values(5) + 1<br />
day = values(4)</td>
</tr><tr><td><a name="time-parts" id="time-parts"></a><a href="#time-parts-note">time parts</a></td>
<td>integer::values(9)<br />
integer hour,min,sec<br /><br />
call ltime(t, values)<br />
hour = values(3)<br />
min = values(2)<br />
sec = values(1)</td>
</tr><tr><td><a name="build-date-time" id="build-date-time"></a><a href="#build-date-time-note">build broken-down date and time</a></td>
<td><span style="color: gray"><em>none</em></span></td>
</tr><tr><td><a name="local-tmz-determination" id="local-tmz-determination"></a><a href="#local-tmz-determination-note">how localtime is determined</a></td>
<td></td>
</tr><tr><td><a name="tmz-info" id="tmz-info"></a><a href="#tmz-info-note">time zone info</a><br /><span style="color: gray"><em>name and utc offset in hours</em></span></td>
<td></td>
</tr><tr><td><a name="daylight-savings-test" id="daylight-savings-test"></a><a href="#daylight-savings-test-note">daylight savings test</a></td>
<td></td>
</tr><tr><td><a name="nonlocal-tmz" id="nonlocal-tmz"></a><a href="#nonlocal-tmz-note">nonlocal time zone</a></td>
<td></td>
</tr><tr><td><a name="microseconds" id="microseconds"></a><a href="#microseconds-note">microseconds</a></td>
<td></td>
</tr><tr><td><a name="sleep" id="sleep"></a><a href="#sleep-note">sleep</a></td>
<td></td>
</tr><tr><td><a name="timeout" id="timeout"></a><a href="#timeout-note">timeout</a></td>
<td></td>
</tr><tr><td><a name="cpu-usage" id="cpu-usage"></a><a href="#cpu-usage-note">cpu usage</a></td>
<td></td>
</tr><tr><th colspan="2"><a name="arrays" id="arrays"></a><a href="#arrays-note">arrays</a></th>
</tr><tr><th></th>
<th>fortran</th>
</tr><tr><td><a name="declare-array" id="declare-array"></a><a href="#declare-array-note">declare</a></td>
<td></td>
</tr><tr><td><a name="allocate-array-on-stack" id="allocate-array-on-stack"></a><a href="#allocate-array-on-stack-note">allocate on stack</a></td>
<td></td>
</tr><tr><td><a name="allocate-array-on-heap" id="allocate-array-on-heap"></a><a href="#allocate-array-on-heap-note">allocate on heap</a></td>
<td></td>
</tr><tr><td><a name="free-array-on-heap" id="free-array-on-heap"></a><a href="#free-array-on-heap-note">free heap</a></td>
<td></td>
</tr><tr><td><a name="array-literal" id="array-literal"></a><a href="#array-literal-note">literal</a></td>
<td>integer::a(3) = (/ 1, 2, 3 /)</td>
</tr><tr><td><a name="array-size" id="array-size"></a><a href="#array-size-note">size</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td>size((/ 1, 2, 3 /))</td>
</tr><tr><td><a name="array-lookup" id="array-lookup"></a><a href="#array-lookup-note">lookup</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td><span style="color: gray">! indices start at one</span><br />
integer::a(3)<br />
a = (/ 1, 2, 3 /)<br />
a(1)</td>
</tr><tr><td><a name="array-update" id="array-update"></a><a href="#array-update-note">update</a></td>
<td></td>
</tr><tr><td><a name="array-out-of-bounds" id="array-out-of-bounds"></a><a href="#array-out-of-bounds-note">out-of-bounds behavior</a></td>
<td></td>
</tr><tr><td><a name="array-element-index" id="array-element-index"></a><a href="#array-element-index-note">element index</a></td>
<td></td>
</tr><tr><td><a name="slice-array" id="slice-array"></a><a href="#slice-array-note">slice</a></td>
<td><span style="color: gray">! can't slice literal</span><br />
int::a1(3),a2(2)<br /><br />
a1 = (/1,2,3/)<br />
a2 = a1(1:2)</td>
</tr><tr><td><a name="slice-array-to-end" id="slice-array-to-end"></a><a href="#slice-array-to-end-note">slice to end</a></td>
<td></td>
</tr><tr><td><a name="array-back" id="array-back"></a><a href="#array-back-note">manipulate back</a></td>
<td></td>
</tr><tr><td><a name="array-front" id="array-front"></a><a href="#array-front-note">manipulate front</a></td>
<td></td>
</tr><tr><td><a name="concatenate-array" id="concatenate-array"></a><a href="#concatenate-array-note">concatenate</a></td>
<td></td>
</tr><tr><td><a name="copy-array" id="copy-array"></a><a href="#copy-array-note">copy</a></td>
<td></td>
</tr><tr><td><a name="array-as-func-arg" id="array-as-func-arg"></a><a href="#array-as-func-arg-note">array as function argument</a></td>
<td></td>
</tr><tr><td><a name="iterate-over-array" id="iterate-over-array"></a><a href="#iterate-over-array-note">iterate</a></td>
<td></td>
</tr><tr><td><a name="sort-array" id="sort-array"></a><a href="#sort-array-note">sort</a></td>
<td></td>
</tr><tr><th colspan="2"><a name="dictionaries" id="dictionaries"></a><a href="#dictionaries-note">dictionaries</a></th>
</tr><tr><th></th>
<th>fortran</th>
</tr><tr><td><a href="#map">map declaration</a></td>
<td></td>
</tr><tr><td><a href="#map-literal">map literal</a></td>
<td></td>
</tr><tr><td><a href="#map-access">map access</a></td>
<td></td>
</tr><tr><td><a href="#map-is-key-present">is key present</a></td>
<td></td>
</tr><tr><td><a href="#map-remove">map remove element</a></td>
<td></td>
</tr><tr><td><a href="#map-iterator">map iterate</a></td>
<td></td>
</tr><tr><th colspan="2"><a name="functions" id="functions"></a><a href="#functions-note">functions</a></th>
</tr><tr><th></th>
<th>fortran</th>
</tr><tr><td><a name="def-func" id="def-func"></a><a href="#def-func-note">define function</a></td>
<td>integer function add(n, m)<br /><span style="white-space: pre-wrap;">  </span>integer, intent(in) :: n<br /><span style="white-space: pre-wrap;">  </span>integer, intent(in) :: m<br /><span style="white-space: pre-wrap;">  </span>add = n + m<br />
end function add</td>
</tr><tr><td><a name="invoke-func" id="invoke-func"></a><a href="#invoke-func-note">invoke function</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td>add(3, 7)</td>
</tr><tr><td><a name="forward-decl-func" id="forward-decl-func"></a><a href="#forward-decl-func-note">forward declaration of function</a></td>
<td></td>
</tr><tr><td><a name="overload-func" id="overload-func"></a><a href="#overload-func-note">overload function</a></td>
<td></td>
</tr><tr><td><a name="nest-func" id="nest-func"></a><a href="#nest-func-note">nest function</a></td>
<td></td>
</tr><tr><td><a name="missing-arg" id="missing-arg"></a><a href="#missing-arg-note">missing argument behavior</a></td>
<td><span style="color: gray"><em>set to zero</em></span></td>
</tr><tr><td><a name="extra-arg" id="extra-arg"></a><a href="#extra-arg-note">extra argument behavior</a></td>
<td><span style="color: gray"><em>ignored</em></span></td>
</tr><tr><td><a name="default-val-param" id="default-val-param"></a><a href="#default-val-param-note">default value for parameter</a></td>
<td>real function mylog(x, base)<br /><span style="white-space: pre-wrap;">  </span>real :: x<br /><span style="white-space: pre-wrap;">  </span>real, optional :: base<br /><span style="white-space: pre-wrap;">  </span>if (present(base)) then<br /><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span>mylog = log(x) / log(base)<br /><span style="white-space: pre-wrap;">  </span>else<br /><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span>mylog = log(x) / log(10.0)<br /><span style="white-space: pre-wrap;">  </span>endif<br />
end function mylog</td>
</tr><tr><td><a name="variable-num-arg" id="variable-num-arg"></a><a href="#variable-num-arg-note">variable number of arguments</a></td>
<td><span style="color: gray"><em>none</em></span></td>
</tr><tr><td><a name="named-param" id="named-param"></a><a href="#named-param-note">named parameters</a></td>
<td></td>
</tr><tr><td><a name="pass-by-val" id="pass-by-val"></a><a href="#pass-by-val-note">pass by value</a></td>
<td></td>
</tr><tr><td><a name="pass-by-addr" id="pass-by-addr"></a><a href="#pass-by-addr-note">pass by address</a></td>
<td></td>
</tr><tr><td><a name="pass-by-ref" id="pass-by-ref"></a><a href="#pass-by-ref-note">pass by reference</a></td>
<td></td>
</tr><tr><td><a name="retval" id="retval"></a><a href="#retval-note">return value</a></td>
<td><span style="color: gray"><em>assign to implicit variable with same name as function; can use return statement to terminate function execution</em></span></td>
</tr><tr><td><a name="no-retval" id="no-retval"></a><a href="#no-retval-note">no return value</a></td>
<td></td>
</tr><tr><td><a name="multiple-retval" id="multiple-retval"></a><a href="#multiple-retval-note">multiple return values</a></td>
<td></td>
</tr><tr><td><a name="named-retval" id="named-retval"></a><a href="#named-retval-note">named return values</a></td>
<td></td>
</tr><tr><td><a name="anonymous-func-literal" id="anonymous-func-literal"></a><a href="#anonymous-func-literal-note">anonymous function literal</a></td>
<td><span style="color: gray"><em>none</em></span></td>
</tr><tr><td><a name="func-private-state" id="func-private-state"></a><a href="#func-private-state-note">function with private state</a></td>
<td></td>
</tr><tr><td><a name="func-as-val" id="func-as-val"></a><a href="#func-as-val-note">function as value</a></td>
<td><span style="color: gray"><em>none; function pointers added in Fortran 2003</em></span></td>
</tr><tr><th colspan="2"><a name="execution-control" id="execution-control"></a><a href="#execution-control-note">execution control</a></th>
</tr><tr><th></th>
<th>fortran</th>
</tr><tr><td><a name="for" id="for"></a><a href="#for-note">for</a></td>
<td>do n = 1, 10, 1<br /><span style="white-space: pre-wrap;">  </span>write(*,*) n<br />
end do</td>
</tr><tr><td><a name="if" id="if"></a><a href="#if-note">if</a></td>
<td>if (n == 0) then<br /><span style="white-space: pre-wrap;">  </span>write(*,*) 'no hits'<br />
elseif (n == 1) then<br /><span style="white-space: pre-wrap;">  </span>write(*,*) 'one hit'<br />
else<br /><span style="white-space: pre-wrap;">  </span>write(*,*) n, 'hits'<br />
endif</td>
</tr><tr><td><a name="while" id="while"></a><a href="#while-note">while</a></td>
<td>n = 1<br />
do while ( n &lt; 10 )<br /><span style="white-space: pre-wrap;">  </span>write(*,*) n<br /><span style="white-space: pre-wrap;">  </span>n = n + 1<br />
end do</td>
</tr><tr><td><a name="switch" id="switch"></a><a href="#switch-note">switch</a></td>
<td></td>
</tr><tr><td><a name="break-continue" id="break-continue"></a><a href="#break-continue-note">break/continue</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td>exit cycle</td>
</tr><tr><th colspan="2"><a name="concurrency" id="concurrency"></a><a href="#concurrency-note">concurrency</a></th>
</tr><tr><th></th>
<th>fortran</th>
</tr><tr><td>start thread</td>
<td></td>
</tr><tr><td>terminate current thread</td>
<td></td>
</tr><tr><td>terminate other thread</td>
<td></td>
</tr><tr><td>list threads</td>
<td></td>
</tr><tr><td>wait on thread</td>
<td></td>
</tr><tr><td>lock</td>
<td></td>
</tr><tr><td>create message queue</td>
<td></td>
</tr><tr><td>send message</td>
<td></td>
</tr><tr><td>receive message</td>
<td></td>
</tr><tr><th colspan="2"><a name="file-handles" id="file-handles"></a><a href="#file-handles-note">file handles</a></th>
</tr><tr><th></th>
<th>fortran</th>
</tr><tr><td><a name="std-file-handles" id="std-file-handles"></a><a href="#std-file-handles-note">standard file handles</a></td>
<td><span style="color: gray">! common unit identifiers for stdin, stdout, and stderr:</span><br />
5 6 0</td>
</tr><tr><td><a name="read-line-stdin" id="read-line-stdin"></a><a href="#read-line-stdin-note">read line from stdin</a></td>
<td>character(len=100) line<br /><br />
read(*, fmt="(a)") line</td>
</tr><tr><td><a name="write-line-stdout" id="write-line-stdout"></a><a href="#write-line-stdout-note">write line to stdout</a></td>
<td>write(*, *) 'Hello, World!'</td>
</tr><tr><td><a name="printf" id="printf"></a><a href="#printf-note">write formatted string to stdout</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td>write(6, fmt="('count: ', i7)") 7</td>
</tr><tr><td><a name="open-file" id="open-file"></a><a href="#open-file-note">open file for reading</a></td>
<td></td>
</tr><tr><td><a name="open-file-write" id="open-file-write"></a><a href="#open-file-write-note">open file for writing</a></td>
<td></td>
</tr><tr><td><a name="open-file-append" id="open-file-append"></a><a href="#open-file-append-note">open file for appending</a></td>
<td></td>
</tr><tr><td><a name="close-file" id="close-file"></a><a href="#close-file-note">close file</a></td>
<td></td>
</tr><tr><td><a name="close-file-implicitly" id="close-file-implicitly"></a><a href="#close-file-implicitly-note">close file implicitly</a></td>
<td></td>
</tr><tr><td><a name="io-err" id="io-err"></a><a href="#io-err-note">i/o errors</a></td>
<td></td>
</tr><tr><td><a name="read-line" id="read-line"></a><a href="#read-line-note">read line</a></td>
<td></td>
</tr><tr><td><a name="file-line-iterate" id="file-line-iterate"></a><a href="#file-line-iterate-note">iterate over file by line</a></td>
<td></td>
</tr><tr><td><a name="read-file-array" id="read-file-array"></a><a href="#read-file-array-note">read file into array of strings</a></td>
<td></td>
</tr><tr><td><a name="read-file-str" id="read-file-str"></a><a href="#read-file-str-note">read file into string</a></td>
<td></td>
</tr><tr><td><a name="write-str" id="write-str"></a><a href="#write-str-note">write string</a></td>
<td></td>
</tr><tr><td><a name="write-line" id="write-line"></a><a href="#write-line-note">write line</a></td>
<td></td>
</tr><tr><td><a name="flush" id="flush"></a><a href="#flush-note">flush file handle</a></td>
<td></td>
</tr><tr><td><a name="eof-test" id="eof-test"></a><a href="#eof-test-note">end-of-file test</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td></td>
</tr><tr><td><a name="seek" id="seek"></a><a href="#seek-note">get and set file handle position</a></td>
<td></td>
</tr><tr><td><a name="tmp-file" id="tmp-file"></a><a href="#tmp-file-note">open unused file</a></td>
<td></td>
</tr><tr><th colspan="2"><a name="files" id="files"></a><a href="#files-note">files</a></th>
</tr><tr><th></th>
<th>fortran</th>
</tr><tr><td><a name="file-test" id="file-test"></a><a href="#file-test-note">file test, regular file test</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td></td>
</tr><tr><td><a name="file-size" id="file-size"></a><a href="#file-size-note">file size</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td></td>
</tr><tr><td><a name="readable-writable-executable" id="readable-writable-executable"></a><a href="#readable-writable-executable-note">is file readable, writable, executable</a></td>
<td></td>
</tr><tr><td><a name="chmod" id="chmod"></a><a href="#chmod-note">set file permissions</a></td>
<td></td>
</tr><tr><td><a name="file-cp-rm-mv" id="file-cp-rm-mv"></a><a href="#file-cp-rm-mv-note">copy file, remove file, rename file</a></td>
<td></td>
</tr><tr><td><a name="symlink" id="symlink"></a><a href="#symlink-note">create symlink, symlink test, readlink</a></td>
<td></td>
</tr><tr><td><a name="unused-file-name" id="unused-file-name"></a><a href="#unused-file-name-note">generate unused file name</a></td>
<td></td>
</tr><tr><th colspan="2"><a name="file-fmt" id="file-fmt"></a><a href="#file-fmt-note">file formats</a></th>
</tr><tr><th></th>
<th>fortran</th>
</tr><tr><th colspan="2"><a name="directories" id="directories"></a><a href="#directories-note">directories</a></th>
</tr><tr><th></th>
<th>fortran</th>
</tr><tr><td><a name="build-pathname" id="build-pathname"></a><a href="#build-pathname-note">build pathname</a></td>
<td></td>
</tr><tr><td><a name="dirname-basename" id="dirname-basename"></a><a href="#dirname-basename-note">dirname and basename</a></td>
<td></td>
</tr><tr><td><a name="absolute-pathname" id="absolute-pathname"></a><a href="#absolute-pathname-note">absolute pathname</a></td>
<td></td>
</tr><tr><td><a name="dir-iterate" id="dir-iterate"></a><a href="#dir-iterate-note">iterate over directory by file</a></td>
<td></td>
</tr><tr><td><a name="glob" id="glob"></a><a href="#glob-note">glob paths</a></td>
<td></td>
</tr><tr><td><a name="mkdir" id="mkdir"></a><a href="#mkdir-note">make directory</a></td>
<td></td>
</tr><tr><td><a name="recursive-cp" id="recursive-cp"></a><a href="#recursive-cp-note">recursive copy</a></td>
<td></td>
</tr><tr><td><a name="rmdir" id="rmdir"></a><a href="#rmdir-note">remove empty directory</a></td>
<td></td>
</tr><tr><td><a name="rm-rf" id="rm-rf"></a><a href="#rm-rf-note">remove directory and contents</a></td>
<td></td>
</tr><tr><td><a name="dir-test" id="dir-test"></a><a href="#dir-test-note">directory test</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td></td>
</tr><tr><td><a name="unused-dir" id="unused-dir"></a><a href="#unused-dir-note">generate unused directory</a></td>
<td></td>
</tr><tr><td><a name="system-tmp-dir" id="system-tmp-dir"></a><a href="#system-tmp-dir-note">system temporary file directory</a></td>
<td></td>
</tr><tr><th colspan="2"><a name="processes-environment" id="processes-environment"></a><a href="#processes-environment-note">processes and environment</a></th>
</tr><tr><th></th>
<th>fortran</th>
</tr><tr><td><a href="#main">signature of main</a></td>
<td></td>
</tr><tr><td><a href="#first-argument">first argument</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td></td>
</tr><tr><td><a name="getopt" id="getopt"></a><a href="#getopt-note">getopt</a></td>
<td></td>
</tr><tr><td><a href="#environment-variable">environment variable</a></td>
<td></td>
</tr><tr><td><a href="#iterate-environment-variable">iterate thru environment variables</a></td>
<td></td>
</tr><tr><td><a name="user-id-name" id="user-id-name"></a><a href="#user-id-name-note">get user id and name</a></td>
<td></td>
</tr><tr><td><a name="exit" id="exit"></a><a href="#exit-note">exit</a></td>
<td></td>
</tr><tr><td><a name="executable-test" id="executable-test"></a><a href="#executable-test-note">executable test</a></td>
<td></td>
</tr><tr><td><a name="external-cmd" id="external-cmd"></a><a href="#external-cmd-note">external command</a></td>
<td></td>
</tr><tr><td><a name="fork" id="fork"></a><a href="#fork-note">fork</a></td>
<td></td>
</tr><tr><td><a name="exec" id="exec"></a><a href="#exec-note">exec</a></td>
<td></td>
</tr><tr><td><a name="pipe" id="pipe"></a><a href="#pipe-note">pipe</a></td>
<td></td>
</tr><tr><td><a name="wait" id="wait"></a><a href="#wait-note">wait</a></td>
<td></td>
</tr><tr><td><a name="pid" id="pid"></a><a href="#pid-note">get pid, parent pid</a></td>
<td></td>
</tr><tr><td><a name="signal-handler" id="signal-handler"></a><a href="#signal-handler-note">set signal handler</a></td>
<td></td>
</tr><tr><td><a name="send-signal" id="send-signal"></a><a href="#send-signal-note">send signal</a></td>
<td></td>
</tr><tr><th colspan="2"><a name="libraries-namespaces" id="libraries-namespaces"></a><a href="#libraries-namespaces-note">libraries and namespaces</a></th>
</tr><tr><th></th>
<th>fortran</th>
</tr><tr><th colspan="2"><a name="user-defined-types" id="user-defined-types"></a><a href="#user-defined-types-note">user-defined types</a></th>
</tr><tr><th></th>
<th>fortran</th>
</tr><tr><td><a name="typedef" id="typedef"></a><a href="#typedef-note">typedef</a></td>
<td></td>
</tr><tr><td><a name="enum" id="enum"></a><a href="#enum-note">enum</a></td>
<td></td>
</tr><tr><td><a href="#struct-definition">struct definition</a></td>
<td></td>
</tr><tr><td><a href="#struct-declaration">struct declaration</a></td>
<td></td>
</tr><tr><td><a href="#struct-initialization">struct initialization</a></td>
<td></td>
</tr><tr><td><a href="#struct-member-assignment">struct member assignment</a></td>
<td></td>
</tr><tr><td><a href="#struct-member-access">struct member access</a></td>
<td></td>
</tr><tr><td><a href="#union-definition">union definition</a></td>
<td></td>
</tr><tr><td><a href="#union-declaration">union declaration</a></td>
<td></td>
</tr><tr><td><a href="#union-access">union access</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td></td>
</tr><tr><th colspan="2"><a name="macros" id="macros"></a><a href="#macros-note">macros</a></th>
</tr><tr><th></th>
<th>fortran</th>
</tr><tr><th colspan="2"><a name="net-web" id="net-web"></a><a href="#net-web-note">net and web</a></th>
</tr><tr><th></th>
<th>fortran</th>
</tr><tr><th colspan="2"><a name="unit-tests" id="unit-tests"></a><a href="#unit-tests-note">unit tests</a></th>
</tr><tr><th></th>
<th>fortran</th>
</tr><tr><td>unit test example</td>
<td></td>
</tr><tr><td>equality assertion</td>
<td></td>
</tr><tr><td>setup and teardown</td>
<td></td>
</tr><tr><td>unit test coverage</td>
<td></td>
</tr><tr><th colspan="2"><a name="debugging-profiling" id="debugging-profiling"></a><a href="#debugging-profiling-note">debugging and profiling</a></th>
</tr><tr><th></th>
<th>fortran</th>
</tr><tr><td><a name="check-syntax" id="check-syntax"></a><a href="#check-syntax-note">check syntax</a></td>
<td></td>
</tr><tr><td><a name="stronger-warnings" id="stronger-warnings"></a><a href="#stronger-warnings-note">flag for stronger warnings</a></td>
<td></td>
</tr><tr><td><a name="suppress-warnings" id="suppress-warnings"></a><a href="#suppress-warnings-note">suppress warnings</a></td>
<td></td>
</tr><tr><td><a name="warnings-as-err" id="warnings-as-err"></a><a href="#warnings-as-err-note">treat warnings as errors</a></td>
<td></td>
</tr><tr><td><a name="lint" id="lint"></a><a href="#lint-note">lint</a></td>
<td></td>
</tr><tr><td><a name="src-cleanup" id="src-cleanup"></a><a href="#src-cleanup-note">source cleanup</a></td>
<td></td>
</tr><tr><td><a name="debugger" id="debugger"></a><a href="#debugger-note">run debugger</a></td>
<td></td>
</tr><tr><td><a name="debugger-cmds" id="debugger-cmds"></a><a href="#debugger-cmds-note">debugger commands</a><br /><span style="color: gray"><em>help, list source, (re)load executable, next, step, set breakpoint, show breakpoints, delete breakpoint, continue, backtrace, up stack, down stack, print, run, quit</em></span></td>
<td></td>
</tr><tr><td><a name="profile" id="profile"></a><a href="#profile-note">profile code</a></td>
<td></td>
</tr><tr><td><a name="memory-tool" id="memory-tool"></a><a href="#memory-tool-note">memory tool</a></td>
<td></td>
</tr><tr><th colspan="2"><a name="multidimensional-arrays" id="multidimensional-arrays"></a><a href="#multidimensional-arrays-note">multidimensional arrays</a></th>
</tr><tr><th></th>
<th>fortran</th>
</tr><tr><td>2d array literal</td>
<td>integer::a(2,2) = &amp;<br /><span style="white-space: pre-wrap;">  </span>reshape((/ 1, 2, 3, 4 /), &amp;<br /><span style="white-space: pre-wrap;">  </span>(/ 2, 2 /))</td>
</tr><tr><th colspan="2"><a name="vectors" id="vectors"></a><a href="#vectors-note">vectors</a></th>
</tr><tr><th></th>
<th>fortran</th>
</tr><tr><td><a href="#vector-literal">vector literal</a></td>
<td><span style="color: gray"><em>same as array</em></span></td>
</tr><tr><td><a href="#vector-element-wise">element-wise arithmetic operators</a></td>
<td>+ - * /</td>
</tr><tr><td><a href="#vector-length-mismatch">result of vector length mismatch</a></td>
<td><span style="color: gray"><em>compilation error</em></span></td>
</tr><tr><td><a href="#vector-scalar">scalar multiplication</a></td>
<td>3 * (/1,2,3/)<br />
(/1,2,3/) * 3</td>
</tr><tr><td><a href="#vector-dot">dot product</a></td>
<td>dot_product((/1,1,1/),(/2,2,2/))</td>
</tr><tr><th colspan="2"><a name="matrices" id="matrices"></a><a href="#matrices-note">matrices</a></th>
</tr><tr><th></th>
<th>fortran</th>
</tr><tr><td><a href="#matrix-literal-constructor">matrix literal or constructor</a></td>
<td><span style="color: gray">! column-major order:</span><br />
integer::A(2,2) = &amp;<br /><span style="white-space: pre-wrap;">  </span>reshape((/ 1, 3, 2, 4 /), &amp;<br /><span style="white-space: pre-wrap;">  </span>(/ 2, 2 /))<br /><br />
integer::B(2,2) = &amp;<br /><span style="white-space: pre-wrap;">  </span>reshape((/ 4, 2, 3, 1 /), &amp;<br /><span style="white-space: pre-wrap;">  </span>(/ 2, 2 /))</td>
</tr><tr><td><a href="#matrix-multiplication">multiplication</a></td>
<td>matmul(A, B)</td>
</tr><tr><th></th>
<th><span style="color: #efefef"><span style="white-space: pre-wrap;">_______________________________________________________</span></span></th>
</tr></table><p><a name="file-suffixes-note" id="file-suffixes-note"></a></p>
<h2 id="toc0"><span><a href="#file-suffixes">file suffixes</a></span></h2>
<p>The suffixes used for source files, header files, and compiled object files.</p>
<p><strong>fortran:</strong></p>
<p>The gfortran compiler will treat files with <tt>.f</tt> and <tt>.f77</tt> suffixes as the older fixed format source code, and it will treat files with <tt>.f90</tt> and <tt>.f95</tt> suffixes as free format source code conforming to the 1990 and 1995 Fortran standards.</p>
<p>Traditionally Fortran does not have header files. The Fortran 90 standard introduced modules. To support the feature the compiler will generate <tt>.mod</tt> files whenever a source file with a module definition is encountered. They contain type declarations like C headers, but unlike C headers they are not intended to be edited by people.</p>
<p><a name="block-delimiters-note" id="block-delimiters-note"></a></p>
<h2 id="toc1"><span><a href="#block-delimiters">block delimiters</a></span></h2>
<p><strong>fortran:</strong></p>
<p>The list of keywords is not exhaustive.</p>
<p><a name="sprintf" id="sprintf"></a></p>
<h2 id="toc2"><span>sprintf</span></h2>
<p><strong>fortran:</strong></p>
<p>Fortran format strings use these expressions:</p>
<table class="wiki-content-table"><tr><td>A</td>
<td>character</td>
</tr><tr><td>D<span style="color: gray"><em>width</em></span>.<span style="color: gray"><em>precision</em></span></td>
<td>double in scientific notation</td>
</tr><tr><td>E<span style="color: gray"><em>width</em></span>.<span style="color: gray"><em>precision</em></span></td>
<td>real in scientific notation</td>
</tr><tr><td>F<span style="color: gray"><em>width</em></span>.<span style="color: gray"><em>precision</em></span></td>
<td>real in fixed point notation</td>
</tr><tr><td>I<span style="color: gray"><em>width</em></span></td>
<td>integer</td>
</tr><tr><td>X</td>
<td>space</td>
</tr><tr><td><span style="color: gray"><em>n</em></span>X</td>
<td>repeat following format expression <span style="color: gray"><em>n</em></span> times</td>
</tr><tr><td>/</td>
<td>newline</td>
</tr></table><p><span style="color: gray"><em>width</em></span> and <span style="color: gray"><em>precision</em></span> are integers. <span style="color: gray"><em>width</em></span> is the field width in characters. Other characters in the format string are ignored.</p>
<p><a name="current-date-time-note" id="current-date-time-note"></a></p>
<h2 id="toc3"><span><a href="#current-date-time">current date/time</a></span></h2>
<p><strong>fortran:</strong></p>
<p>The Fortran 95 standard specifies two date functions: system_clock() and date_and_time().</p>
<p>system_clock() returns the number of clock ticks since an unspecified time. The number of ticks per second can be specified as an argument. Since the start time is unspecified it is difficult to use this function in a portable way. date_and_time() can be used to decompose the return value of system_clock() into year, month, day, hour, minute, and second.</p>
<p>GNU Fortran provides functions similar to functions in the C standard library.</p>
<p><a name="date-parts-note" id="date-parts-note"></a></p>
<h2 id="toc4"><span><a href="#date-parts">date parts</a></span></h2>
<p><strong>fortran:</strong></p>
<p>ltime() gets the parts that correspond to the local time zone. gmtime() can be used to get the parts that correspond to the UTC time zone.</p>
<p><a name="time-parts-note" id="time-parts-note"></a></p>
<h2 id="toc5"><span><a href="#time-parts">time parts</a></span></h2>
<p><strong>fortran:</strong></p>
<p>ltime() gets the parts that correspond to the local time zone. gmtime() can be used to get the parts that correspond to the UTC time zone.</p>
<p><a name="break-continue-note" id="break-continue-note"></a></p>
<h2 id="toc6"><span><a href="#break-continue">break/continue</a></span></h2>
<p><strong>fortran:</strong></p>
<p>Fortran has a <tt>continue</tt> statement which is a no-op statement used as a target for goto statements.</p>
<p>Here is an example of using <tt>exit</tt> to terminate what would otherwise be an infinite loop:</p>
<div class="code">
<pre>
<code>n = 1
do
   if (n &gt; 10) exit
   write(*, *) n
   n = n + 1
end do</code>
</pre></div>
<p>Labels can be provided for nested do loops. The labels can be provided as arguments to <tt>exit</tt> and <tt>cycle</tt>:</p>
<div class="code">
<pre>
<code>  foo: do
     bar: do n = 1, 10, 1
        write(*,*) n
        exit foo
     end do bar
  end do foo</code>
</pre></div>
<p><a name="std-file-handles-note" id="std-file-handles-note"></a></p>
<h2 id="toc7"><span><a href="#std-file-handles">standard file handles</a></span></h2>
<p>The file handles for standard input, standard output, and standard error.</p>
<p><strong>fortran:</strong></p>
<p>Fortran uses integers which it calls <em>unit identifiers</em> for file descriptors. The unit descriptors 5, 6, and 0 are often but not always used for stdin, stdout, and stderr.</p>
<p>Unit descriptors are provided as the first argument to <tt>read</tt> and <tt>write</tt>. If the first argument of <tt>read</tt> is an asterisk, it will use stdin. If the first argument of <tt>write</tt> is an asterisk, it will use stdout.</p>
<p><a name="printf-note" id="printf-note"></a></p>
<h2 id="toc8"><span><a href="#printf">write formatted string to stdout</a></span></h2>
<p>How to print a formatted string to standard out.</p>
<p><strong>fortran:</strong></p>
<p>Notation used in <a href="http://www.csee.umbc.edu/~squire/fortranclass/summary.shtml#Form">Fortran format strings</a>.</p>
<p><a name="fortran" id="fortran"></a></p>
<h1 id="toc9"><span><a href="#top">Fortran</a></span></h1>
<p><a href="http://gcc.gnu.org/onlinedocs/gcc-4.5.2/gfortran/">The GNU Fortran Compiler</a><br /><a href="http://www-teaching.physics.ox.ac.uk/Unix+Prog/hargrove/tutorial_77/">Fortran 77 Tutorial</a><br /><a href="http://www.cs.mtu.edu/~shene/COURSES/cs201/NOTES/fortran.html">Fortran 90 Tutorial</a><br /><a href="http://gcc.gnu.org/wiki/GFortranStandards">Fortran Standards Documents</a><br /><a href="http://www.netlib.org/blas/blasqr.pdf">BLAS: A Quick Reference Guide (pdf)</a></p>
<p>Modern Fortran compilers support two source code formats: the traditional <em>fixed format</em> and the <em>free format</em> introduced with Fortran 90.</p>
<p>If a Fortran source file has a <tt>.f</tt> suffix, the gfortran compiler expects the code to have fixed format. If the suffix is <tt>.f90</tt> or <tt>.f95</tt> it expects free format code. Emacs is also suffix aware and provides <tt>fortran-mode</tt> and <tt>f90-mode</tt> for fixed format and free format code respectively.</p>
<p>Here is an example of fixed format code:</p>
<div class="code">
<pre>
<code>C Hello World
* in Fortran 77

      program hello
10000 write(*,*) 'Hello,'
     + , ' World!'
      end program hello</code>
</pre></div>
<p>This first column can contain a 'C', 'c', or '*' to indicate the line is a comment.</p>
<p>Columns 1 through 5 can contain an optional statement label. A statement label consists of digits. The statement label may contain leading zeros which are ignored. A statement label cannot consist entirely of zeros.</p>
<p>If column 6 contains a non-space character and columns 1 through 5 are blank, then the line is treated as a continuation of the previous line. The continuation character is not itself part of the statement, so any non-space character can be used, but '+' is a common choice.</p>
<p>Columns 7 through 72 contain the statement.</p>
<p>Columns 73 through 80 can contain optional sequence numbers. They were formerly used to help keep punch cards in the correct order.</p>
<p>Here is an example of free format code:</p>
<div class="code">
<pre>
<code>! Hello World in Fortran 90

program hello
  write(*,*) 'Hello,' &amp;
       , ' World!'
end program hello</code>
</pre></div>
<p>There are no special columns in free format code. There is no limit on the length of lines or statements. If it is desirable to split a statement up over multiple lines, the '&amp;' character can be used to indicate the statement continues on the following line.</p>

                    </div>
        </div>
      </div>
      <div id="license-area" class="license-area">
        content of this page licensed under
        <a rel="license" href="http://creativecommons.org/licenses/by-sa/3.0/">
        creative commons attribution-sharealike 3.0</a>
      </div>
    </div>
  </div>
</div>

<script type="text/javascript">

  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-17129977-2']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();

</script>

</body>
</html>
