<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="content-type" content="text/html;charset=UTF-8"/>
<link rel="icon" type="image/gif" href="/favicon.gif"/>
<link rel="apple-touch-icon" sizes="120x120" href="touch-icon-iphone-retina.png" />
<link rel="apple-touch-icon" sizes="152x152" href="touch-icon-ipad-retina.png" />
<title>Interpreted Languages: JavaScript, PHP, Python, Ruby (Sheet One) - Hyperpolyglot</title>
<style type="text/css" id="internal-style">
@import url(hyperpolyglot.css);
</style>
<meta http-equiv="content-type" content="text/html;charset=UTF-8"/>
<meta http-equiv="content-language" content="en"/>
</head>
<body>
<div id="container-wrap-wrap">
  <div id="container-wrap">
    <div id="container">
      <div id="header">
        <h1><a href="/"><span>Hyperpolyglot</span></a></h1>
      </div>
      <div id="content-wrap">
        <div id="main-content">
<div id="page-title">
                            Interpreted Languages: JavaScript, PHP, Python, Ruby (Sheet One)
                        </div>
<div id="page-content">
                        

<p><a name="top" id="top"></a><em>a side-by-side reference sheet</em></p>
<p><strong>sheet one:</strong> <a href="#grammar-invocation">grammar and invocation</a> | <a href="#var-expr">variables and expressions</a> | <a href="#arithmetic-logic">arithmetic and logic</a> | <a href="#strings">strings</a> | <a href="#regexes">regexes</a> | <a href="#dates-time">dates and time</a> | <a href="#arrays">arrays</a> | <a href="#dictionaries">dictionaries</a> | <a href="#functions">functions</a> | <a href="#execution-control">execution control</a> | <a href="#exceptions">exceptions</a> | <a href="#concurrency">concurrency</a></p>
<p><strong><a href="/scripting2">sheet two</a>:</strong> <a href="/scripting2#file-handles">file handles</a> | <a href="/scripting2#files">files</a> | <a href="/scripting2#file-fmt">file formats</a> | <a href="/scripting2#directories">directories</a> | <a href="/scripting2#processes-environment">processes and environment</a> | <a href="/scripting2#option-parsing">option parsing</a> | <a href="/scripting2#libraries-namespaces">libraries and namespaces</a> | <a href="/scripting2#objects">objects</a> | <a href="/scripting2#polymorphism">polymorphism</a> | <a href="/scripting2#reflection">reflection</a> | <a href="/scripting2#net-web">net and web</a> | <a href="/scripting2#unit-tests">unit tests</a> | <a href="/scripting2#debugging-profiling">debugging and profiling</a> | <a href="/scripting2#java-interop">java interop</a></p>
<table class="wiki-content-table"><tr><th><a name="general" id="general"></a></th>
<th><a href="#javascript">javascript</a></th>
<th><a href="#php">php</a></th>
<th><a href="#python">python</a></th>
<th><a href="#ruby">ruby</a></th>
</tr><tr><td><a name="version-used" id="version-used"></a><a href="#version-used-note">versions used</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td></td>
<td><span style="color: gray"><em>5.4; 5.5</em></span></td>
<td><span style="color: gray"><em>2.7; 3.3</em></span></td>
<td><span style="color: gray"><em>1.9; 2.0</em></span></td>
</tr><tr><td><a name="version" id="version"></a><a href="#version-note">show version</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td>$ node <span style="white-space: pre-wrap;">--</span>version</td>
<td>$ php <span style="white-space: pre-wrap;">--</span>version</td>
<td>$ python -V<br />
$ python <span style="white-space: pre-wrap;">--</span>version</td>
<td>$ ruby <span style="white-space: pre-wrap;">--</span>version</td>
</tr><tr><td><a name="implicit-prologue" id="implicit-prologue"></a><a href="#implicit-prologue-note">implicit prologue</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td>&lt;script src="underscore.js"&gt;<br />
&lt;/script&gt;</td>
<td><span style="color: gray"><em>none</em></span></td>
<td><span style="color: purple">import</span> os, re, sys</td>
<td><span style="color: gray"><em>none</em></span></td>
</tr><tr><th colspan="5"><a name="grammar-invocation" id="grammar-invocation"></a><a href="#grammar-invocation-note">grammar and invocation</a></th>
</tr><tr><th></th>
<th>javascript</th>
<th>php</th>
<th>python</th>
<th>ruby</th>
</tr><tr><td><a name="interpreter" id="interpreter"></a><a href="#interpreter-note">interpreter</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td>$ node foo.js</td>
<td>$ php -f foo.php</td>
<td>$ python foo.py</td>
<td>$ ruby foo.rb</td>
</tr><tr><td><a name="repl" id="repl"></a><a href="#repl-note">repl</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td>$ node</td>
<td>$ php -a</td>
<td>$ python</td>
<td>$ irb</td>
</tr><tr><td><a name="cmd-line-program" id="cmd-line-program"></a><a href="#cmd-line-program-note">command line program</a></td>
<td>$ node -e 'var sys = require("sys");<br />
sys.puts("hi world!");'</td>
<td>$ php -r 'echo "hi\n";'</td>
<td>$ python -c 'print("hi")'</td>
<td>$ ruby -e 'puts "hi"'</td>
</tr><tr><td><a name="block-delimiters" id="block-delimiters"></a><a href="#block-delimiters-note">block delimiters</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td>{}</td>
<td>{}</td>
<td>: <span style="color: gray"><em>and offside rule</em></span></td>
<td>{}<br /><span style="color: purple">do end</span></td>
</tr><tr><td><a name="statement-separator" id="statement-separator"></a><a href="#statement-separator-note">statement separator</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td><span style="color: gray"><em>; or newline<br /><br />
newline not separator inside (), [], {}, "", '', or after binary operator<br /><br />
newline sometimes not separator when following line would not parse as a valid statement</em></span></td>
<td>;<br /><br /><span style="color: gray"><em>statements must be semicolon terminated inside {}</em></span></td>
<td><span style="color: gray"><em>newline or</em></span> ;<br /><br /><span style="color: gray"><em>newlines not separators inside (), [], {}, triple quote literals, or after backslash: <span style="white-space: pre-wrap;">\</span></em></span></td>
<td><span style="color: gray"><em>newline or</em></span> ;<br /><br /><span style="color: gray"><em>newlines not separators inside (), [], {}, <span style="white-space: pre-wrap;">``</span>, '', "", or after binary operator or backslash: <span style="white-space: pre-wrap;">\</span></em></span></td>
</tr><tr><td><a name="source-code-encoding" id="source-code-encoding"></a><a href="#source-code-encoding-note">source code encoding</a></td>
<td></td>
<td><span style="color: gray"><em>none</em></span></td>
<td><span style="color: gray"><em>Python 3 source is UTF-8 by default</em></span><br /><br /><span style="color: gray"># -*- coding: utf-8 -*-</span></td>
<td><span style="color: gray"><em>Ruby 2.0 source is UTF-8 by default</em></span><br /><br /><span style="color: gray"># -*- coding: utf-8 -*-</span></td>
</tr><tr><td><a name="eol-comment" id="eol-comment"></a><a href="#eol-comment-note">end-of-line comment</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td><span style="color: gray"><span style="white-space: pre-wrap;">//</span> comment</span></td>
<td><span style="color: gray"><span style="white-space: pre-wrap;">//</span> comment<br />
# comment</span></td>
<td><span style="color: gray"># comment</span></td>
<td><span style="color: gray"># comment</span></td>
</tr><tr><td><a name="multiple-line-comment" id="multiple-line-comment"></a><a href="#multiple-line-comment-note">multiple line comment</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td><span style="color: gray">/* line<br />
another line */</span></td>
<td><span style="color: gray">/* comment line<br />
another line */</span></td>
<td><span style="color: gray"><em>use triple quote string literal:</em></span><br /><br /><span style="color: maroon">'''comment line<br />
another line'''</span></td>
<td><span style="color: gray">=begin<br />
comment line<br />
another line<br />
=end</span></td>
</tr><tr><th colspan="5"><a name="var-expr" id="var-expr"></a><a href="#var-expr-note">variables and expressions</a></th>
</tr><tr><th></th>
<th>javascript</th>
<th>php</th>
<th>python</th>
<th>ruby</th>
</tr><tr><td><a name="local-var" id="local-var"></a><a href="#local-var-note">local variable</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td>var x = 1;</td>
<td><span style="color: gray"># in function body:</span><br />
$<span style="color: peru">v</span> = <span style="color: teal">NULL</span>;<br />
$<span style="color: peru">a</span> = [];<br />
$<span style="color: peru">d</span> = [];<br />
$<span style="color: peru">x</span> = 1;<br />
list($<span style="color: peru">y</span>, $<span style="color: peru">z</span>) = [2, 3];</td>
<td><span style="color: gray"># in function body:</span><br /><span style="color: peru">v</span> = <span style="color: teal">None</span><br /><span style="color: peru">a</span>, <span style="color: peru">d</span> = [], {}<br /><span style="color: peru">x</span> = 1<br /><span style="color: peru">y</span>, <span style="color: peru">z</span> = 2, 3</td>
<td>v = <span style="color: peru">nil</span><br />
a, d = [], {}<br />
x = 1<br />
y, z = 2, 3</td>
</tr><tr><td><a name="local-scope-regions" id="local-scope-regions"></a><a href="#local-scope-regions-note">regions which define lexical scope</a></td>
<td><span style="color: gray"><em>top level:<br /><span style="white-space: pre-wrap;">  </span>html page<br /><br />
nestable:<br /><span style="white-space: pre-wrap;">  </span>function</em></span></td>
<td><span style="color: gray"><em>top level:<br /><span style="white-space: pre-wrap;">  </span>function or method body<br /><br />
nestable (with use clause):<br /><span style="white-space: pre-wrap;">  </span>anonymous function body</em></span></td>
<td><span style="color: gray"><em>nestable (read only):<br /><span style="white-space: pre-wrap;">  </span>function or method body</em></span></td>
<td><span style="color: gray"><em>top level:<br /><span style="white-space: pre-wrap;">  </span>file<br /><span style="white-space: pre-wrap;">  </span>class block<br /><span style="white-space: pre-wrap;">  </span>module block<br /><span style="white-space: pre-wrap;">  </span>method body<br /><br />
nestable:<br /><span style="white-space: pre-wrap;">  </span>anonymous function body<br /><span style="white-space: pre-wrap;">  </span>anonymous block</em></span></td>
</tr><tr><td><a name="global-var" id="global-var"></a><a href="#global-var-note">global variable</a></td>
<td><span style="color: gray"><span style="white-space: pre-wrap;">//</span> assign without using var</span><br />
g = 1;<br /><br />
function incr_global () { g++; }</td>
<td>list($<span style="color: peru">g1</span>, $<span style="color: peru">g2</span>) = [7, 8];<br /><br /><span style="color: purple">function</span> <span style="color: #0000cd">swap_globals</span>() {<br /><span style="white-space: pre-wrap;">  </span><span style="color: purple">global</span> $<span style="color: peru">g1</span>, $<span style="color: peru">g2</span>;<br /><span style="white-space: pre-wrap;">  </span>list($<span style="color: peru">g1</span>, $<span style="color: peru">g2</span>) = [$<span style="color: peru">g2</span>, $<span style="color: peru">g1</span>];<br />
}</td>
<td><span style="color: peru">g1</span>, <span style="color: peru">g2</span> = 7, 8<br /><br /><span style="color: purple">def</span> <span style="color: #0000cd">swap_globals</span>():<br /><span style="white-space: pre-wrap;">  </span><span style="color: purple">global</span> g1, g2<br /><span style="white-space: pre-wrap;">  </span>g1, g2 = g2, g1</td>
<td><span style="color: peru">$g1</span>, <span style="color: peru">$g2</span> = 7, 8<br /><br /><span style="color: purple">def</span> <span style="color: #0000cd">swap_globals</span><br /><span style="white-space: pre-wrap;">  </span><span style="color: peru">$g1</span>, <span style="color: peru">$g2</span> = <span style="color: peru">$g2</span>, <span style="color: peru">$g1</span><br />
end</td>
</tr><tr><td><a name="const" id="const"></a><a href="#const-note">constant</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td><span style="color: gray"><em>none</em></span></td>
<td>define(<span style="color: maroon">"PI"</span>, 3.14);</td>
<td><span style="color: gray"># uppercase identifiers<br />
# constant by convention</span><br /><span style="color: peru">PI</span> = 3.14</td>
<td><span style="color: gray"># warning if capitalized<br />
# identifier is reassigned</span><br /><span style="color: green">PI</span> = 3.14</td>
</tr><tr><td><a name="assignment" id="assignment"></a><a href="#assignment-note">assignment</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td>x = 1;</td>
<td>$<span style="color: peru">v</span> = 1;</td>
<td><span style="color: gray"><em>assignments can be chained but otherwise don't return values:</em></span><br /><span style="color: peru">v</span> = 1</td>
<td>v = 1</td>
</tr><tr><td><a name="parallel-assignment" id="parallel-assignment"></a><a href="#parallel-assignment-note">parallel assignment</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td><span style="color: gray"><em>none</em></span></td>
<td>list($<span style="color: peru">x</span>, $<span style="color: peru">y</span>, $<span style="color: peru">z</span>) = [1 ,2, 3];<br /><br /><span style="color: gray"># 3 is discarded:</span><br />
list($<span style="color: peru">x</span>, $<span style="color: peru">y</span>) = [1, 2, 3];<br /><br /><span style="color: gray"># $z set to NULL:</span><br />
list($<span style="color: peru">x</span>, $<span style="color: peru">y</span>, $<span style="color: peru">z</span>) = [1, 2];</td>
<td><span style="color: peru">x</span>, <span style="color: peru">y</span>, <span style="color: peru">z</span> = 1, 2, 3<br /><br /><span style="color: gray"># raises ValueError:</span><br /><span style="color: peru">x</span>, <span style="color: peru">y</span> = 1, 2, 3<br /><br /><span style="color: gray"># raises ValueError:</span><br /><span style="color: peru">x</span>, <span style="color: peru">y</span>, <span style="color: peru">z</span> = 1, 2</td>
<td>x, y, z = 1, 2, 3<br /><br /><span style="color: gray"># 3 is discarded:</span><br />
x, y = 1, 2, 3<br /><br /><span style="color: gray"># z set to nil:</span><br />
x, y, z = 1, 2</td>
</tr><tr><td><a name="swap" id="swap"></a><a href="#swap-note">swap</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td>tmp = x;<br />
x = y;<br />
y = tmp;</td>
<td>list($<span style="color: peru">x</span>, $<span style="color: peru">y</span>) = [$<span style="color: peru">y</span>, $<span style="color: peru">x</span>];</td>
<td><span style="color: peru">x</span>, <span style="color: peru">y</span> = y, x</td>
<td>x, y = y, x</td>
</tr><tr><td><a name="compound-assignment" id="compound-assignment"></a><a href="#compound-assignment-note">compound assignment</a><br /><span style="color: gray"><em>arithmetic, string, logical, bit</em></span></td>
<td>+= -= *= /= <span style="color: gray"><em>none</em></span> %=<br />
+=<br /><span style="color: gray"><em>none</em></span><br /><span style="white-space: pre-wrap;">&lt;&lt;= &gt;&gt;= </span>&amp;= |= ^=</td>
<td>+= -= *= <span style="color: gray"><em>none</em></span> /= %= <span style="white-space: pre-wrap;">**</span>=<br />
.= <span style="color: gray"><em>none</em></span><br />
&amp;= |= <span style="color: gray"><em>none</em></span><br /><span style="white-space: pre-wrap;">&lt;&lt;= &gt;&gt;= </span>&amp;= |= ^=</td>
<td><span style="color: gray"># do not return values:</span><br />
+= -= *= /= <span style="white-space: pre-wrap;">//</span>= %= <span style="white-space: pre-wrap;">**</span>=<br />
+= *=<br />
&amp;= <span style="white-space: pre-wrap;">|</span>= ^=<br /><span style="white-space: pre-wrap;">&lt;&lt;= &gt;&gt;= </span>&amp;= |= ^=</td>
<td>+= -= *= /= <span style="color: gray"><em>none</em></span> %= <span style="white-space: pre-wrap;">**</span>=<br />
+= *=<br />
&amp;&amp;= <span style="white-space: pre-wrap;">||</span>= ^=<br /><span style="white-space: pre-wrap;">&lt;&lt;= &gt;&gt;= </span>&amp;= |= ^=</td>
</tr><tr><td><a name="incr-decr" id="incr-decr"></a><a href="#incr-decr-note">increment and decrement</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td>var x = 1;<br />
var y = ++x;<br />
var z = <span style="white-space: pre-wrap;">--</span>y;</td>
<td>$<span style="color: peru">x</span> = 1;<br />
$<span style="color: peru">y</span> = ++$<span style="color: peru">x</span>;<br />
$<span style="color: peru">z</span> = <span style="white-space: pre-wrap;">--</span>$<span style="color: peru">y</span>;</td>
<td><span style="color: gray"><em>none</em></span></td>
<td>x = 1<br /><span style="color: gray"># x and y not mutated:</span><br />
y = x.succ<br />
z = y.pred</td>
</tr><tr><td><a name="null" id="null"></a><a href="#null-note">null</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td>null</td>
<td><span style="color: teal">NULL</span> <span style="color: gray"># case insensitive</span></td>
<td><span style="color: teal">None</span></td>
<td><span style="color: peru">nil</span></td>
</tr><tr><td><a name="null-test" id="null-test"></a><a href="#null-test-note">null test</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td>v === null</td>
<td>is_null($<span style="color: peru">v</span>)<br />
! isset($<span style="color: peru">v</span>)</td>
<td>v == <span style="color: teal">None</span><br />
v <span style="color: purple">is</span> <span style="color: teal">None</span></td>
<td>v == <span style="color: peru">nil</span><br />
v.nil?</td>
</tr><tr><td><a name="undef-access" id="undef-access"></a><a href="#undef-access-note">undefined variable access</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td>undefined</td>
<td><span style="color: teal">NULL</span></td>
<td><span style="color: gray"><em>raises</em> NameError</span></td>
<td><span style="color: gray"><em>raises</em> NameError</span></td>
</tr><tr><td><a name="conditional-expr" id="conditional-expr"></a><a href="#conditional-expr-note">conditional expression</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td>x &gt; 0 ? x : -x</td>
<td>$<span style="color: peru">x</span> &gt; 0 ? $<span style="color: peru">x</span> : -$<span style="color: peru">x</span></td>
<td>x <span style="color: purple">if</span> x &gt; 0 <span style="color: purple">else</span> -x</td>
<td>x &gt; 0 ? x : -x</td>
</tr><tr><th colspan="5"><a name="arithmetic-logic" id="arithmetic-logic"></a><a href="#arithmetic-logic-note">arithmetic and logic</a></th>
</tr><tr><th></th>
<th>javascript</th>
<th>php</th>
<th>python</th>
<th>ruby</th>
</tr><tr><td><a name="true-false" id="true-false"></a><a href="#true-false-note">true and false</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td>true false</td>
<td><span style="color: teal">TRUE FALSE</span> <span style="color: gray"># case insensitive</span></td>
<td><span style="color: purple">True False</span></td>
<td><span style="color: peru">true false</span></td>
</tr><tr><td><a name="falsehoods" id="falsehoods"></a><a href="#falsehoods-note">falsehoods</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td>false null undefined "" 0 NaN</td>
<td><span style="color: teal">FALSE NULL</span> 0 0.0 <span style="color: maroon">"" "0"</span> []</td>
<td><span style="color: purple">False</span> <span style="color: teal">None</span> 0 0.0 <span style="color: maroon">''</span> [] {}</td>
<td><span style="color: peru">false nil</span></td>
</tr><tr><td><a name="logical-op" id="logical-op"></a><a href="#logical-op-note">logical operators</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td><span style="white-space: pre-wrap;">&amp;&amp; ||</span> !</td>
<td>&amp;&amp; <span style="white-space: pre-wrap;">||</span> !<br /><span style="color: gray"><em>lower precedence:</em></span><br /><span style="color: purple">and or xor</span></td>
<td><span style="color: purple">and or not</span></td>
<td>&amp;&amp; <span style="white-space: pre-wrap;">||</span> !<br /><span style="color: gray"><em>lower precedence:</em></span><br /><span style="color: purple">and or not</span></td>
</tr><tr><td><a name="relational-op" id="relational-op"></a><a href="#relational-op-note">relational operators</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td><span style="white-space: pre-wrap;">===</span> !== &lt; &gt; &gt;= &lt;=<br /><br /><span style="color: gray"><em>perform type coercion:</em></span><br /><span style="white-space: pre-wrap;">==</span> !=</td>
<td>== != <span style="color: gray"><em>or</em></span> &lt;&gt; &gt; &lt; &gt;= &lt;=<br /><span style="color: gray"><em>no conversion:</em></span> === !==</td>
<td><span style="color: gray"><em>relational operators are chainable:</em></span><br />
== != &gt; &lt; &gt;= &lt;=</td>
<td>== != &gt; &lt; &gt;= &lt;=</td>
</tr><tr><td><a name="min-max" id="min-max"></a><a href="#min-max-note">min and max</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td>Math.min(1, 2, 3)<br />
Math.max(1, 2, 3)<br /><br />
Math.min.apply(Math, [1, 2, 3])<br />
Math.max.apply(Math, [1, 2, 3])</td>
<td>min(1, 2, 3)<br />
max(1, 2, 3)<br />
$<span style="color: peru">a</span> = [1, 2, 3]<br />
min($<span style="color: peru">a</span>)<br />
max($<span style="color: peru">a</span>)</td>
<td><span style="color: purple">min</span>(1, 2, 3)<br /><span style="color: purple">max</span>(1, 2, 3)<br /><br /><span style="color: purple">min</span>([1, 2, 3])<br /><span style="color: purple">max</span>([1, 2, 3])</td>
<td>[1, 2, 3].min<br />
[1, 2, 3].max</td>
</tr><tr><td><a name="three-val-comparison" id="three-val-comparison"></a><a href="#three-val-comparison-note">three value comparison</a></td>
<td><span style="color: gray"><em>none</em></span></td>
<td><span style="color: gray"><em>none</em></span></td>
<td><span style="color: gray"><em>removed from Python 3:</em></span><br /><span style="color: purple">cmp</span>(0, 1)<br /><span style="color: purple">cmp</span>(<span style="color: maroon">'do'</span>, <span style="color: maroon">'re'</span>)</td>
<td>0 &lt;=&gt; 1<br /><span style="color: maroon">"do"</span> &lt;=&gt; <span style="color: maroon">"re"</span></td>
</tr><tr><td><a name="arith-op" id="arith-op"></a><a href="#arith-op-note">arithmetic operators</a><br /><span style="color: gray"><em>addition, subtraction, multiplication, float division, quotient, remainder</em></span></td>
<td>+ - * / <span style="color: gray"><em>none</em></span> %</td>
<td>+ - * / <span style="color: gray"><em>none</em></span> %</td>
<td>+ - * <span style="color: gray"><em>see note</em></span> // %<br /><br /><span style="color: gray"><em>Python 2 does not have an operator which performs float division on integers. In Python 3 / always performs float division.</em></span></td>
<td>+ - * x.fdiv(y) / %</td>
</tr><tr><td><a name="int-div" id="int-div"></a><a href="#int-div-note">integer division</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td>Math.floor(x / y)</td>
<td>(<span style="color: green">int</span>)(13 / 5)</td>
<td>13 // 5</td>
<td>13 / 5</td>
</tr><tr><td><a name="divmod" id="divmod"></a><a href="#divmod-note">divmod</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td><span style="color: gray"><em>none</em></span></td>
<td><span style="color: gray"><em>none</em></span></td>
<td>q, r = <span style="color: purple">divmod</span>(13, 5)</td>
<td>q, r = 13.divmod(5)</td>
</tr><tr><td><a name="int-div-zero" id="int-div-zero"></a><a href="#int-div-zero-note">integer division by zero</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td><span style="color: gray"><em>returns assignable value Infinity, NaN, or -Infinity depending upon whether dividend is positive, zero, or negative.<br /><br />
There are literals for Infinity and NaN.</em></span></td>
<td><span style="color: gray"><em>returns</em> FALSE <em>with warning</em></span></td>
<td><span style="color: gray"><em>raises</em> ZeroDivisionError</span></td>
<td><span style="color: gray"><em>raises</em> ZeroDivisionError</span></td>
</tr><tr><td><a name="float-div" id="float-div"></a><a href="#float-div-note">float division</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td>13 / 5</td>
<td>13 / 5</td>
<td><span style="color: purple">float</span>(13) / 5<br /><br /><span style="color: gray"># Python 3:</span><br />
13 / 5</td>
<td>13.to_f / 5 <span style="color: gray"><em>or</em></span><br />
13.fdiv(5)</td>
</tr><tr><td><a name="float-div-zero" id="float-div-zero"></a><a href="#float-div-zero-note">float division by zero</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td><span style="color: gray"><em>same behavior as for integers</em></span></td>
<td><span style="color: gray"><em>returns</em> FALSE <em>with warning</em></span></td>
<td><span style="color: gray"><em>raises</em> ZeroDivisionError</span></td>
<td><span style="color: gray"><em>returns</em> -Infinity, NaN, <em>or</em> Infinity</span></td>
</tr><tr><td><a name="power" id="power"></a><a href="#power-note">power</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td>Math.pow(2, 32)</td>
<td>pow(2, 32)</td>
<td>2<span style="white-space: pre-wrap;">**</span>32</td>
<td>2<span style="white-space: pre-wrap;">**</span>32</td>
</tr><tr><td><a name="sqrt" id="sqrt"></a><a href="#sqrt-note">sqrt</a></td>
<td>Math.sqrt(2)</td>
<td>sqrt(2)</td>
<td><span style="color: purple">import</span> math<br /><br />
math.sqrt(2)</td>
<td>include <span style="color: green">Math</span><br /><br />
sqrt(2)</td>
</tr><tr><td><a name="sqrt-negative-one" id="sqrt-negative-one"></a><a href="#sqrt-negative-one-note">sqrt -1</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td>NaN</td>
<td>NaN</td>
<td><span style="color: gray"># raises ValueError:</span><br /><span style="color: purple">import</span> math<br />
math.sqrt(-1)<br /><br /><span style="color: gray"># returns complex float:</span><br /><span style="color: purple">import</span> cmath<br />
cmath.sqrt(-1)</td>
<td><span style="color: gray"><em>raises</em> Errno::EDOM</span></td>
</tr><tr><td><a name="transcendental-func" id="transcendental-func"></a><a href="#transcendental-func-note">transcendental functions</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td>Math.exp Math.log Math.sin Math.cos Math.tan Math.asin Math.acos Math.atan Math.atan2</td>
<td>exp log sin cos tan asin acos atan atan2</td>
<td><span style="color: purple">from</span> math <span style="color: purple">import</span> exp, log, \<br />
sin, cos, tan, asin, acos, atan, atan2</td>
<td>include <span style="color: green">Math</span><br /><br />
exp log sin cos tan asin acos atan atan2</td>
</tr><tr><td><a name="transcendental-const" id="transcendental-const"></a><a href="#transcendental-const-note">transcendental constants</a><br /><span style="color: gray"><em>π and e</em></span></td>
<td>Math.PI<br />
Math.E</td>
<td><span style="color: teal">M_PI M_E</span></td>
<td>import <span style="color: purple">math</span><br /><br />
math.pi math.e</td>
<td>include <span style="color: green">Math</span><br /><br /><span style="color: green">PI E</span></td>
</tr><tr><td><a name="float-truncation" id="float-truncation"></a><a href="#float-truncation-note">float truncation</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td><span style="color: gray"><em>none</em></span><br />
Math.round(3.1)<br />
Math.floor(3.1)<br />
Math.ceil(3.1)</td>
<td>(<span style="color: green">int</span>)$<span style="color: peru">x</span><br />
round($<span style="color: peru">x</span>)<br />
ceil($<span style="color: peru">x</span>)<br />
floor($<span style="color: peru">x</span>)</td>
<td><span style="color: purple">import</span> math<br /><br /><span style="color: purple">int</span>(x)<br /><span style="color: purple">int</span>(<span style="color: purple">round</span>(x))<br />
math.ceil(x)<br />
math.floor(x)</td>
<td>x.to_i<br />
x.round<br />
x.ceil<br />
x.floor</td>
</tr><tr><td><a name="abs-val" id="abs-val"></a><a href="#abs-val-note">absolute value</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td>Math.abs(-3)</td>
<td>abs($<span style="color: peru">x</span>)</td>
<td><span style="color: purple">abs</span>(x)</td>
<td>x.abs</td>
</tr><tr><td><a name="int-overflow" id="int-overflow"></a><a href="#int-overflow-note">integer overflow</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td><span style="color: gray"><em>all numbers are floats</em></span></td>
<td><span style="color: gray"><em>converted to float</em></span></td>
<td><span style="color: gray"><em>becomes arbitrary length integer of type</em> long</span></td>
<td><span style="color: gray"><em>becomes arbitrary length integer of type</em> Bignum</span></td>
</tr><tr><td><a name="float-overflow" id="float-overflow"></a><a href="#float-overflow-note">float overflow</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td>Infinity</td>
<td>INF</td>
<td><span style="color: gray"><em>raises</em> OverflowError</span></td>
<td><span style="color: green">Infinity</span></td>
</tr><tr><td><a name="rational-construction" id="rational-construction"></a><a href="#rational-construction-note">rational construction</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td></td>
<td><span style="color: gray"><em>none</em></span></td>
<td><span style="color: purple">from</span> fractions <span style="color: purple">import</span> Fraction<br /><br /><span style="color: peru">x</span> = Fraction(22, 7)</td>
<td>require <span style="color: maroon">'rational'</span><br /><br />
x = <span style="color: green">Rational</span>(22, 7)</td>
</tr><tr><td><a name="rational-decomposition" id="rational-decomposition"></a><a href="#rational-decomposition-note">rational decomposition</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td></td>
<td><span style="color: gray"><em>none</em></span></td>
<td>x.numerator<br />
x.denominator</td>
<td>x.numerator<br />
x.denominator</td>
</tr><tr><td><a name="complex-construction" id="complex-construction"></a><a href="#complex-constructionnote">complex construction</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td></td>
<td><span style="color: gray"><em>none</em></span></td>
<td><span style="color: peru">z</span> = 1 + 1.414j</td>
<td>require <span style="color: maroon">'complex'</span><br /><br />
z = 1 + 1.414.im</td>
</tr><tr><td><a name="complex-decomposition" id="complex-decomposition"></a><a href="#complex-decomposition-note">complex decomposition</a><br /><span style="color: gray"><em>real and imaginary component, argument, absolute value, conjugate</em></span></td>
<td></td>
<td><span style="color: gray"><em>none</em></span></td>
<td><span style="color: purple">import</span> cmath<br /><br />
z.real<br />
z.imag<br />
cmath.phase(z)<br />
abs(z)<br />
z.conjugate()</td>
<td>z.real<br />
z.imag<br />
z.arg<br />
z.abs<br />
z.conj</td>
</tr><tr><td><a name="random-num" id="random-num"></a><a href="#random-num-note">random number</a><br /><span style="color: gray"><em>uniform integer, uniform float, normal float</em></span></td>
<td>Math.floor(Math.random() * 100)<br />
Math.random()<br /><span style="color: gray"><em>none</em></span></td>
<td>rand(0,99)<br />
lcg_value()<br /><span style="color: gray"><em>none</em></span></td>
<td><span style="color: purple">import</span> random<br /><br />
random.randint(0, 99)<br />
random.random()<br />
random.gauss(0, 1)</td>
<td>rand(100)<br />
rand<br /><span style="color: gray"><em>none</em></span></td>
</tr><tr><td><a name="random-seed" id="random-seed"></a><a href="#random-seed-note">random seed</a><br /><span style="color: gray"><em>set, get, restore</em></span></td>
<td><span style="color: gray"><em>none</em></span></td>
<td>srand(17);<br /><br /><span style="color: gray"><em>none</em></span></td>
<td><span style="color: purple">import</span> random<br /><br />
random.seed(17)<br /><span style="color: peru">seed</span> = random.getstate()<br />
random.setstate(seed)</td>
<td>srand(17)<br /><br />
seed = srand<br />
srand(seed)</td>
</tr><tr><td><a name="bit-op" id="bit-op"></a><a href="#bit-op-note">bit operators</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td><span style="white-space: pre-wrap;">&lt;&lt; &gt;&gt; &amp; | ^ ~</span></td>
<td><span style="white-space: pre-wrap;">&lt;&lt; &gt;&gt; &amp; | ^ ~</span></td>
<td><span style="white-space: pre-wrap;">&lt;&lt; &gt;&gt; &amp; | ^ ~</span></td>
<td><span style="white-space: pre-wrap;">&lt;&lt; &gt;&gt; &amp; | ^ ~</span></td>
</tr><tr><td><a name="binary-octal-hex-literals" id="binary-octal-hex-literals"></a><a href="#binary-octal-hex-literals-note">binary, octal, and hex literals</a></td>
<td><span style="color: gray"><em>none</em></span><br />
052 <span style="color: gray"><span style="white-space: pre-wrap;">//</span> deprecated</span><br />
0x2a</td>
<td>0b101010<br />
052<br />
0x2a</td>
<td>0b101010<br />
052<br />
0x2a</td>
<td>0b101010<br />
052<br />
0x2a</td>
</tr><tr><td><a name="radix" id="radix"></a><a href="#radix-note">radix</a><br /><span style="color: gray"><em>convert integer to and from string with radix</em></span></td>
<td>(42).toString(7)<br /><span style="color: gray"><em>??</em></span></td>
<td>base_convert(<span style="color: maroon">"42"</span>, 10, 7);<br />
base_convert(<span style="color: maroon">"60"</span>, 7, 10);</td>
<td><span style="color: gray"><em>none</em></span><br />
int(<span style="color: maroon">"60"</span>, 7)</td>
<td>42.to_s(7)<br /><span style="color: maroon">"60"</span>.to_i(7)</td>
</tr><tr><th colspan="5"><a name="strings" id="strings"></a><a href="#strings-note">strings</a></th>
</tr><tr><th></th>
<th>javascript</th>
<th>php</th>
<th>python</th>
<th>ruby</th>
</tr><tr><td><a name="str-type" id="str-type"></a><a href="#str-type-note">string type</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td>String</td>
<td>string</td>
<td>str</td>
<td>String</td>
</tr><tr><td><a name="str-literal" id="str-literal"></a><a href="#str-literal-note">string literal</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td>"don't say \"no\""<br />
'don\'t say "no"'</td>
<td><span style="color: maroon">"don't say \"no\""</span><br /><span style="color: maroon">'don\'t say "no"'</span></td>
<td><span style="color: maroon">'don\'t say "no"'</span><br /><span style="color: maroon">"don't say \"no\""</span><br /><span style="color: maroon">"don't "</span> <span style="color: maroon">'say "no"'</span><br /><span style="color: maroon">'''don't say "no"'''</span><br /><span style="color: maroon">"""don't say "no\""""</span></td>
<td><span style="color: maroon">"don't say \"no\""</span><br /><span style="color: maroon">'don\'t say "no"'</span><br /><span style="color: maroon">"don't "</span> <span style="color: maroon">'say "no"'</span></td>
</tr><tr><td><a name="newline-in-str-literal" id="newline-in-str-literal"></a><a href="#newline-in-str-literal-note">newline in literal</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td><span style="color: gray"><em>yes</em></span></td>
<td><span style="color: maroon">'first line<br />
second line'<br /><br />
"first line<br />
second line"</span></td>
<td><span style="color: gray"><em>triple quote literals only:</em></span><br /><span style="color: maroon">'''first line<br />
second line'''<br /><br />
"""first line<br />
second line"""</span></td>
<td><span style="color: maroon">'first line<br />
second line'<br /><br />
"first line<br />
second line"</span></td>
</tr><tr><td><a name="str-literal-esc" id="str-literal-esc"></a><a href="#str-literal-esc-note">literal escapes</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td><span style="color: gray"><em>single and double quotes:</em></span><br />
\b \f \n \r \t \v \uhhhh \xhh \" \' \\</td>
<td><span style="color: gray"><em>double quoted:</em></span><br />
\f \n \r \t \v \x<span style="color: gray"><em>hh</em></span> \$ \" \\ \<span style="color: gray"><em>ooo</em></span><br /><br /><span style="color: gray"><em>single quoted:</em></span><br />
\' \\</td>
<td><span style="color: gray"><em>single and double quoted:</em></span><br />
\<span style="color: gray"><em>newline</em></span> \\ \' \" \a \b \f \n \r \t \v \<span style="color: gray"><em>ooo</em></span> \x<span style="color: gray"><em>hh</em></span><br /><br /><span style="color: gray"><em>Python 3:</em></span><br />
\u<span style="color: gray"><em>hhhh</em></span> \U<span style="color: gray"><em>hhhhhhhh</em></span></td>
<td><span style="color: gray"><em>double quoted:</em></span><br />
\a \b \c<span style="color: gray"><em>x</em></span> \e \f \n \r \s \t \v \x<span style="color: gray"><em>hh</em></span> \<span style="color: gray"><em>ooo</em></span> \u<span style="color: gray"><em>hhhh</em></span> \u{<span style="color: gray"><em>hhhhh</em></span>}<br /><br /><span style="color: gray"><em>single quoted:</em></span><br />
\' \\</td>
</tr><tr><td><a name="here-doc" id="here-doc"></a><a href="#here-doc-note">here document</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td><span style="color: gray"><em>none</em></span></td>
<td>$<span style="color: peru">word</span> = <span style="color: maroon">"amet"</span>;<br /><br />
$<span style="color: peru">s</span> = <span style="color: maroon"><span style="white-space: pre-wrap;">&lt;&lt;&lt;</span>EOF<br />
lorem ipsum<br />
dolor sit $word<br />
EOF</span>;</td>
<td><span style="color: gray"><em>none</em></span></td>
<td>word = <span style="color: maroon">"amet"</span><br /><br />
s = <span style="color: maroon"><span style="white-space: pre-wrap;">&lt;&lt;</span>EOF<br />
lorem ipsum<br />
dolor sit</span> <span style="color: peru">#{word}</span><br /><span style="color: maroon">EOF</span></td>
</tr><tr><td><a name="var-interpolation" id="var-interpolation"></a><a href="#var-interpolation-note">variable interpolation</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td><span style="color: gray"><span style="white-space: pre-wrap;">//</span> None; use string concatenation.<br /><span style="white-space: pre-wrap;">//</span> Both of these expressions are '11':</span><br />
1 + "1"<br />
"1" + 1</td>
<td>$<span style="color: peru">count</span> = 3;<br />
$<span style="color: peru">item</span> = <span style="color: maroon">"ball"</span>;<br /><span style="color: purple">echo</span> <span style="color: maroon">"$count ${item}s\n"</span>;</td>
<td><span style="color: peru">count</span> = 3<br /><span style="color: peru">item</span> = <span style="color: maroon">'ball'</span><br /><span style="color: purple">print</span>(<span style="color: maroon">'{count} {item}s'</span>.format(<br /><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">**</span><span style="color: purple">locals</span>()))</td>
<td>count = 3<br />
item = <span style="color: maroon">"ball"</span><br />
puts <span style="color: maroon">"</span><span style="color: peru">#{count} #{item}</span><span style="color: maroon">s"</span></td>
</tr><tr><td><a name="expr-interpolation" id="expr-interpolation"></a><a href="#expr-interpolation-note">expression interpolation</a></td>
<td><span style="color: gray"><em>none</em></span></td>
<td><span style="color: gray"><em>none</em></span></td>
<td><span style="color: maroon">'1 + 1 = {}'</span>.format(1 + 1)</td>
<td><span style="color: maroon">"1 + 1 = #{1 + 1}"</span></td>
</tr><tr><td><a name="format" id="format"></a><a href="#format-note">format</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td><span style="color: gray"><span style="white-space: pre-wrap;">//</span> None; use string concatenation.<br /><span style="white-space: pre-wrap;">//</span> Evaluates to "12.35":</span><br />
12.3456.toFixed(2)</td>
<td>$<span style="color: peru">fmt</span> = <span style="color: maroon">"lorem %s %d %f"</span>;<br />
sprintf($<span style="color: peru">fmt</span>, <span style="color: maroon">"ipsum"</span>, 13, 3.7);</td>
<td><span style="color: maroon">'lorem %s %d %f'</span> % (<span style="color: maroon">'ipsum'</span>, 13, 3.7)<br /><br /><span style="color: peru">fmt</span> = <span style="color: maroon">'lorem {0} {1} {2}'</span><br />
fmt.format(<span style="color: maroon">'ipsum'</span>, 13, 3.7)</td>
<td><span style="color: maroon">"lorem %s %d %f"</span> % [<span style="color: maroon">"ipsum"</span>, 13, 3.7]</td>
</tr><tr><td><a name="mutable-str" id="mutable-str"></a><a href="#mutable-str-note">are strings mutable?</a></td>
<td><span style="color: gray"><em>no</em></span></td>
<td>$<span style="color: peru">s</span> = <span style="color: maroon">"bar"</span>;<br />
$<span style="color: peru">s2</span> = $<span style="color: peru">s</span>;<br /><span style="color: gray"># sets s to "baz"; s2 is unchanged:</span><br />
$<span style="color: peru">s</span>[2] = <span style="color: maroon">"z"</span>;</td>
<td><span style="color: gray"><em>no</em></span></td>
<td>s = <span style="color: maroon">"bar"</span><br />
s2 = s<br /><span style="color: gray"># sets s and s2 to "baz":</span><br />
s[2] = <span style="color: maroon">"z"</span></td>
</tr><tr><td><a name="copy-str" id="copy-str"></a><a href="#copy-str-note">copy string</a></td>
<td><span style="color: gray"><em>none</em></span></td>
<td>$<span style="color: peru">s2</span> = $<span style="color: peru">s</span>;</td>
<td><span style="color: gray"><em>none</em></span></td>
<td>s = <span style="color: maroon">"bar"</span><br />
s2 = s.clone<br /><span style="color: gray"># s2 is not altered:</span><br />
s[2] = <span style="color: maroon">"z"</span></td>
</tr><tr><td><a name="str-concat" id="str-concat"></a><a href="#str-concat-note">concatenate</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td>s = "Hello, " + "World!";</td>
<td>$<span style="color: peru">s</span> = <span style="color: maroon">"Hello, "</span>;<br />
$<span style="color: peru">s2</span> = $<span style="color: peru">s</span> . <span style="color: maroon">"World!"</span>;</td>
<td><span style="color: peru">s</span> = <span style="color: maroon">'Hello, '</span><br /><span style="color: peru">s2</span> = s + <span style="color: maroon">'World!'</span><br /><br /><span style="color: gray"># juxtaposition can be used to<br />
# concatenate literals:</span><br /><span style="color: peru">s2</span> = <span style="color: maroon">'Hello, ' "World!"</span></td>
<td>s = <span style="color: maroon">"Hello, "</span><br />
s2 = s + <span style="color: maroon">"World!"</span><br /><br /><span style="color: gray"># juxtaposition can be used to<br />
# concatenate literals:</span><br />
s2 =<span style="color: maroon">"Hello, " 'World!'</span></td>
</tr><tr><td><a name="str-replicate" id="str-replicate"></a><a href="#str-replicate-note">replicate</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td>var hbar = Array(80).join("-");</td>
<td>$<span style="color: peru">hbar</span> = str_repeat(<span style="color: maroon">"-"</span>, 80);</td>
<td><span style="color: peru">hbar</span> = <span style="color: maroon">'-'</span> * 80</td>
<td>hbar = <span style="color: maroon">"-"</span> * 80</td>
</tr><tr><td><a name="translate-case" id="translate-case"></a><a href="#translate-case-note">translate case</a><br /><span style="color: gray"><em>to upper, to lower</em></span></td>
<td>"lorem".toUpperCase()<br />
"LOREM".toLowerCase()</td>
<td>strtoupper(<span style="color: maroon">"lorem"</span>)<br />
strtolower(<span style="color: maroon">"LOREM"</span>)</td>
<td><span style="color: maroon">'lorem'</span>.upper()<br /><span style="color: maroon">'LOREM'</span>.lower()</td>
<td><span style="color: maroon">"lorem"</span>.upcase<br /><span style="color: maroon">"LOREM"</span>.downcase</td>
</tr><tr><td><a name="capitalize" id="capitalize"></a><a href="#capitalize-note">capitalize</a><br /><span style="color: gray"><em>string, words</em></span></td>
<td><span style="color: gray"><em>none</em></span></td>
<td>ucfirst(<span style="color: maroon">"lorem"</span>)<br />
ucwords(<span style="color: maroon">"lorem ipsum"</span>)</td>
<td><span style="color: purple">import</span> string<br /><br /><span style="color: maroon">'lorem'</span>.capitalize()<br />
string.capwords(<span style="color: maroon">'lorem ipsum'</span>)</td>
<td><span style="color: maroon">"lorem"</span>.capitalize<br /><span style="color: gray"><em>none</em></span></td>
</tr><tr><td><a name="trim" id="trim"></a><a href="#trim-note">trim</a><br /><span style="color: gray"><em>both sides, left, right</em></span></td>
<td>" lorem ".trim()<br /><span style="color: gray"># some browsers:</span><br />
" lorem".trimLeft()<br />
"lorem ".trimRight()</td>
<td>trim(<span style="color: maroon">" lorem "</span>)<br />
ltrim(<span style="color: maroon">" lorem"</span>)<br />
rtrim(<span style="color: maroon">"lorem "</span>)</td>
<td><span style="color: maroon">' lorem '</span>.strip()<br /><span style="color: maroon">' lorem'</span>.lstrip()<br /><span style="color: maroon">'lorem '</span>.rstrip()</td>
<td><span style="color: maroon">" lorem "</span>.strip<br /><span style="color: maroon">" lorem"</span>.lstrip<br /><span style="color: maroon">"lorem "</span>.rstrip</td>
</tr><tr><td><a name="pad" id="pad"></a><a href="#pad-note">pad</a><br /><span style="color: gray"><em>on right, on left, centered</em></span></td>
<td><span style="color: gray"><em>none</em></span></td>
<td>str_pad(<span style="color: maroon">"lorem"</span>, 10)<br />
str_pad(<span style="color: maroon">"lorem"</span>, 10, <span style="color: maroon">" "</span>, <span style="color: teal">STR_PAD_LEFT</span>)<br />
str_pad(<span style="color: maroon">"lorem"</span>, 10, <span style="color: maroon">" "</span>, <span style="color: teal">STR_PAD_BOTH</span>)</td>
<td><span style="color: maroon">'lorem'</span>.ljust(10)<br /><span style="color: maroon">'lorem'</span>.rjust(10)<br /><span style="color: maroon">'lorem'</span>.center(10)</td>
<td><span style="color: maroon">"lorem"</span>.ljust(10)<br /><span style="color: maroon">"lorem"</span>.rjust(10)<br /><span style="color: maroon">"lorem"</span>.center(10)</td>
</tr><tr><td><a name="num-to-str" id="num-to-str"></a><a href="#num-to-str-note">number to string</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td>"value: " + 8</td>
<td><span style="color: maroon">"value: "</span> . 8</td>
<td><span style="color: maroon">'value: '</span> + <span style="color: purple">str</span>(8)</td>
<td><span style="color: maroon">"value: "</span> + 8.to_s</td>
</tr><tr><td><a name="str-to-num" id="str-to-num"></a><a href="#str-to-num-note">string to number</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td>7 + parseInt("12", 10)<br />
73.9 + parseFloat(".037")</td>
<td>7 + <span style="color: maroon">"12"</span><br />
73.9 + <span style="color: maroon">".037"</span></td>
<td>7 + <span style="color: purple">int</span>(<span style="color: maroon">'12'</span>)<br />
73.9 + <span style="color: purple">float</span>(<span style="color: maroon">'.037'</span>)</td>
<td>7 + <span style="color: maroon">"12"</span>.to_i<br />
73.9 + <span style="color: maroon">".037"</span>.to_f</td>
</tr><tr><td><a name="join" id="join"></a><a href="#join-note">join</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td>["do", "re", "mi"].join(" ")</td>
<td>$<span style="color: peru">a</span> = [<span style="color: maroon">"do"</span>, <span style="color: maroon">"re"</span>, <span style="color: maroon">"mi"</span>, <span style="color: maroon">"fa"</span>];<br />
implode(<span style="color: maroon">" "</span>, $<span style="color: peru">a</span>)</td>
<td><span style="color: maroon">' '</span>.join([<span style="color: maroon">'do'</span>, <span style="color: maroon">'re'</span>, <span style="color: maroon">'mi'</span>, <span style="color: maroon">'fa'</span>])<br /><br /><span style="color: gray"># raises TypeError:</span><br /><span style="color: maroon">' '</span>.join([1, 2, 3])</td>
<td>%w(do re mi fa).join(<span style="color: maroon">' '</span>)<br /><br /><span style="color: gray"># implicitly converted to strings:</span><br />
[1, 2, 3].join(<span style="color: maroon">' '</span>)</td>
</tr><tr><td><a name="split" id="split"></a><a href="#split-note">split</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td>"do re mi".split(" ")</td>
<td>explode(<span style="color: maroon">" "</span>, <span style="color: maroon">"do re mi fa"</span>)</td>
<td><span style="color: maroon">'do re mi fa'</span>.split()</td>
<td><span style="color: maroon">"do re mi fa"</span>.split</td>
</tr><tr><td><a name="split-in-two" id="split-in-two"></a><a href="#split-in-two-note">split in two</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td><span style="color: gray"><em>none</em></span></td>
<td>preg_split(<span style="color: maroon">'/\s+/'</span>, <span style="color: maroon">"do re mi fa"</span>, 2)</td>
<td><span style="color: maroon">'do re mi fa'</span>.split(<span style="color: purple">None</span>, 1)</td>
<td><span style="color: maroon">"do re mi fa"</span>.split(<span style="color: maroon">/\s+/</span>, 2)</td>
</tr><tr><td><a name="split-keep-delimiters" id="split-keep-delimiters"></a><a href="#split-keep-delimiters-note">split and keep delimiters</a></td>
<td><span style="color: gray"><em>none</em></span></td>
<td>preg_split(<span style="color: maroon">'/(\s+)/'</span>, <span style="color: maroon">"do re mi fa"</span>,<br /><span style="white-space: pre-wrap;">  </span><span style="color: teal">NULL</span>, <span style="color: teal">PREG_SPLIT_DELIM_CAPTURE</span>)</td>
<td>re.split(<span style="color: maroon">'(\s+)'</span>, <span style="color: maroon">'do re mi fa'</span>)</td>
<td><span style="color: maroon">"do re mi fa"</span>.split(<span style="color: maroon">/(\s+)/</span>)</td>
</tr><tr><td><a name="str-length" id="str-length"></a><a href="#str-length-note">length</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td>"lorem".length</td>
<td>strlen(<span style="color: maroon">"lorem"</span>)</td>
<td><span style="color: purple">len</span>(<span style="color: maroon">'lorem'</span>)</td>
<td><span style="color: maroon">"lorem"</span>.length<br /><span style="color: maroon">"lorem"</span>.size</td>
</tr><tr><td><a name="index-substr" id="index-substr"></a><a href="#index-substr-note">index of substring</a><br /><span style="color: gray"><em>first, last</em></span></td>
<td>"lorem ipsum".indexOf("ipsum")</td>
<td><span style="color: gray"># returns FALSE if not found:</span><br />
strpos(<span style="color: maroon">"do re re"</span>, <span style="color: maroon">"re"</span>)<br />
strrpos(<span style="color: maroon">"do re re"</span>, <span style="color: maroon">"re"</span>)</td>
<td><span style="color: gray"># raises ValueError if not found:</span><br /><span style="color: maroon">'do re re'</span>.index(<span style="color: maroon">'re'</span>)<br /><span style="color: maroon">'do re re'</span>.rindex(<span style="color: maroon">'re'</span>)<br /><br /><span style="color: gray"># returns -1 if not found:</span><br /><span style="color: maroon">'do re re'</span>.find(<span style="color: maroon">'re'</span>)<br /><span style="color: maroon">'do re re'</span>.rfind(<span style="color: maroon">'re'</span>)</td>
<td><span style="color: gray"># returns nil if not found:</span><br /><span style="color: maroon">"do re re"</span>.index(<span style="color: maroon">"re"</span>)<br /><span style="color: maroon">"do re re"</span>.rindex(<span style="color: maroon">"re"</span>)</td>
</tr><tr><td><a name="extract-substr" id="extract-substr"></a><a href="#extract-substr-note">extract substring</a><br /><span style="color: gray"><em>by start and length, by start and end, by successive starts</em></span></td>
<td>"lorem ipsum".substr(6, 5)<br />
"lorem ipsum".substring(6, 11)</td>
<td>substr(<span style="color: maroon">"lorem ipsum"</span>, 6, 5)<br /><span style="color: gray"><em>none</em></span><br /><span style="color: gray"><em>none</em></span></td>
<td><span style="color: gray"><em>none</em></span><br /><span style="color: gray"><em>none</em></span><br /><span style="color: maroon">'lorem ipsum'</span>[6:11]</td>
<td><span style="color: maroon">"lorem ipsum"</span>[6, 5]<br /><span style="color: maroon">"lorem ipsum"</span>[6<span style="white-space: pre-wrap;">..</span>10]<br /><span style="color: maroon">"lorem ipsum"</span>[6<span style="white-space: pre-wrap;">...</span>11]</td>
</tr><tr><td><a name="extract-char" id="extract-char"></a><a href="#extract-char-note">extract character</a></td>
<td>"lorem ipsum"[6]</td>
<td><span style="color: gray"># syntax error to use index notation<br />
# directly on string literal:</span><br />
$<span style="color: peru">s</span> = <span style="color: maroon">"lorem ipsum"</span>;<br />
$<span style="color: peru">s</span>[6];</td>
<td><span style="color: maroon">'lorem ipsum'</span>[6]</td>
<td><span style="color: maroon">"lorem ipsum"</span>[6]</td>
</tr><tr><td><a name="chr-ord" id="chr-ord"></a><a href="#chr-ord-note">chr and ord</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td>String.fromCharCode(65)<br />
"A".charCodeAt(0)</td>
<td>chr(65)<br />
ord(<span style="color: maroon">"A"</span>)</td>
<td><span style="color: purple">chr</span>(65)<br /><span style="color: purple">ord</span>(<span style="color: maroon">'A'</span>)</td>
<td>65.chr<br /><span style="color: maroon">"A"</span>.ord</td>
</tr><tr><td><a name="str-to-char-array" id="str-to-char-array"></a><a href="#str-to-char-array-note">to array of characters</a></td>
<td>"abcd".split("")</td>
<td>str_split(<span style="color: maroon">"abcd"</span>)</td>
<td><span style="color: purple">list</span>(<span style="color: maroon">'abcd'</span>)</td>
<td><span style="color: maroon">"abcd"</span>.split(<span style="color: maroon">""</span>)</td>
</tr><tr><td><a name="translate-char" id="translate-char"></a><a href="#translate-char-note">translate characters</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td><span style="color: gray"><em>none</em></span></td>
<td>$<span style="color: peru">ins</span> = implode(range(<span style="color: maroon">"a"</span>, <span style="color: maroon">"z"</span>));<br />
$<span style="color: peru">outs</span> = substr($<span style="color: peru">ins</span>, 13, 13) .<br /><span style="white-space: pre-wrap;">  </span>substr($<span style="color: peru">ins</span>, 0, 13);<br />
strtr(<span style="color: maroon">"hello"</span>, $<span style="color: peru">ins</span>, $<span style="color: peru">outs</span>)</td>
<td><span style="color: purple">from</span> string <span style="color: purple">import</span> lowercase <span style="color: purple">as</span> ins<br /><span style="color: purple">from</span> string <span style="color: purple">import</span> maketrans<br /><br /><span style="color: peru">outs</span> = ins[13:] + ins[:13]<br /><span style="color: maroon">'hello'</span>.translate(maketrans(ins,outs))</td>
<td><span style="color: maroon">"hello"</span>.tr(<span style="color: maroon">"a-z"</span>, <span style="color: maroon">"n-za-m"</span>)</td>
</tr><tr><td><a name="delete-char" id="delete-char"></a><a href="#delete-char-note">delete characters</a></td>
<td><span style="color: gray"><em>none</em></span></td>
<td>$<span style="color: peru">vowels</span> = str_split(<span style="color: maroon">"aeiou"</span>);<br />
$<span style="color: peru">s</span> = <span style="color: maroon">"disemvowel me"</span>;<br />
$<span style="color: peru">s</span> = str_replace($<span style="color: peru">vowels</span>, <span style="color: maroon">""</span>, $<span style="color: peru">s</span>);</td>
<td><span style="color: maroon">"disemvowel me"</span>.translate(<span style="color: teal">None</span>, <span style="color: maroon">"aeiou"</span>)</td>
<td><span style="color: maroon">"disemvowel me"</span>.delete(<span style="color: maroon">"aeiou"</span>)</td>
</tr><tr><td><a name="squeeze-char" id="squeeze-char"></a><a href="#squeeze-char-note">squeeze characters</a></td>
<td><span style="color: gray"><em>none</em></span></td>
<td>$<span style="color: peru">s</span> = <span style="color: maroon">"too<span style="white-space: pre-wrap;">  </span>much<span style="white-space: pre-wrap;">  </span>space"</span>;<br />
$<span style="color: peru">s</span> = = preg_replace(<span style="color: maroon">'/(\s)+/'</span>, <span style="color: maroon">'\1'</span>, $<span style="color: peru">s</span>);</td>
<td>re.sub(<span style="color: maroon">'(\s)+'</span>, r<span style="color: maroon">'\1'</span>, <span style="color: maroon">'too<span style="white-space: pre-wrap;">  </span>much<span style="white-space: pre-wrap;">  </span>space'</span>)</td>
<td><span style="color: maroon">"too<span style="white-space: pre-wrap;">  </span>much<span style="white-space: pre-wrap;">  </span>space"</span>.squeeze(<span style="color: maroon">" "</span>)</td>
</tr><tr><th colspan="5"><a name="regexes" id="regexes"></a><a href="#regexes-note">regular expressions</a></th>
</tr><tr><th></th>
<th>javascript</th>
<th>php</th>
<th>python</th>
<th>ruby</th>
</tr><tr><td><a name="regex-literal" id="regex-literal"></a><a href="#regex-literal-note">literal, custom delimited literal</a></td>
<td>/lorem|ipsum/</td>
<td><span style="color: maroon">'/lorem|ipsum/'</span><br /><span style="color: maroon">'(/etc/hosts)'</span></td>
<td>re.compile(<span style="color: maroon">'lorem|ipsum'</span>)<br /><span style="color: gray"><em>none</em></span></td>
<td><span style="color: maroon">/lorem|ipsum/<br />
%r(/etc/hosts)</span></td>
</tr><tr><td><a name="char-class-abbrev" id="char-class-abbrev"></a><a href="#char-class-abbrev-note">character class abbreviations</a></td>
<td>. \d \D \s \S \w \W</td>
<td>. \d \D \h \H \s \S \v \V \w \W</td>
<td>. \d \D \s \S \w \W</td>
<td>. \d \D \h \H \s \S \w \W</td>
</tr><tr><td><a name="regex-anchors" id="regex-anchors"></a><a href="#regex-anchors-note">anchors</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td>^ $ \b \B</td>
<td>^ $ \A \b \B \z \Z</td>
<td>^ $ \A \b \B \Z</td>
<td>^ $ \A \b \B \z \Z</td>
</tr><tr><td><a name="regex-test" id="regex-test"></a><a href="#regex-test-note">match test</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td>if (s.match(/1999/)) {<br /><span style="white-space: pre-wrap;">  </span>alert("party!");<br />
}</td>
<td>if (preg_match(<span style="color: maroon">'/1999/'</span>, $<span style="color: peru">s</span>)) {<br /><span style="white-space: pre-wrap;">  </span>echo <span style="color: maroon">"party!\n"</span>;<br />
}</td>
<td><span style="color: purple">if</span> re.search(<span style="color: maroon">'1999'</span>, s):<br /><span style="white-space: pre-wrap;">  </span><span style="color: purple">print</span>(<span style="color: maroon">'party!'</span>)</td>
<td><span style="color: purple">if</span> <span style="color: maroon">/1999/</span>.match(s)<br /><span style="white-space: pre-wrap;">  </span>puts <span style="color: maroon">"party!"</span><br /><span style="color: purple">end</span></td>
</tr><tr><td><a name="case-insensitive-regex" id="case-insensitive-regex"></a><a href="#case-insensitive-regex-note">case insensitive match test</a></td>
<td>"Lorem".match(/lorem/i)</td>
<td>preg_match(<span style="color: maroon">'/lorem/i'</span>, <span style="color: maroon">"Lorem"</span>)</td>
<td>re.search(<span style="color: maroon">'lorem'</span>, <span style="color: maroon">'Lorem'</span>, re.I)</td>
<td><span style="color: maroon">/lorem/</span>i.match(<span style="color: maroon">"Lorem"</span>)</td>
</tr><tr><td><a name="regex-modifiers" id="regex-modifiers"></a><a href="#regex-modifiers-note">modifiers</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td>g i m</td>
<td>e i m s x</td>
<td>re.I re.M re.S re.X</td>
<td>i o m x</td>
</tr><tr><td><a name="subst" id="subst"></a><a href="#subst-note">substitution</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td>s = "do re mi mi mi";<br />
s.replace(/mi/g, "ma");</td>
<td>$<span style="color: peru">s</span> = <span style="color: maroon">"do re mi mi mi"</span>;<br />
$<span style="color: peru">s</span> = preg_replace(<span style="color: maroon">'/mi/'</span>, <span style="color: maroon">"ma"</span>, $<span style="color: peru">s</span>);</td>
<td><span style="color: peru">s</span> = <span style="color: maroon">'do re mi mi mi'</span><br /><span style="color: peru">s</span> = re.compile(<span style="color: maroon">'mi'</span>).sub(<span style="color: maroon">'ma'</span>, s)</td>
<td>s = <span style="color: maroon">"do re mi mi mi"</span><br />
s.gsub!(<span style="color: maroon">/mi/</span>, <span style="color: maroon">"ma"</span>)</td>
</tr><tr><td><a name="match-prematch-postmatch" id="match-prematch-postmatch"></a><a href="#match-prematch-postmatch-note">match, prematch, postmatch</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td><span style="color: per">m</span> = /\d{4}/.exec(s);<br />
if (m) {<br /><span style="white-space: pre-wrap;">  </span>match = m[0];<br /><span style="white-space: pre-wrap;">  </span><span style="color: gray"># no prematch or postmatch</span><br />
}</td>
<td><span style="color: gray"><em>none</em></span></td>
<td><span style="color: peru">m</span> = re.search(<span style="color: maroon">'\d{4}'</span>, s)<br /><span style="color: purple">if</span> m:<br /><span style="white-space: pre-wrap;">  </span>match = m.group()<br /><span style="white-space: pre-wrap;">  </span>prematch = s[0:m.start(0)]<br /><span style="white-space: pre-wrap;">  </span>postmatch = s[m.end(0):<span style="color: purple">len</span>(s)]</td>
<td>m = <span style="color: maroon">/\d{4}/</span>.match(s)<br /><span style="color: purple">if</span> m<br /><span style="white-space: pre-wrap;">  </span>match = m[0]<br /><span style="white-space: pre-wrap;">  </span>prematch = m.pre_match<br /><span style="white-space: pre-wrap;">  </span>postmatch = m.post_match<br /><span style="color: purple">end</span></td>
</tr><tr><td><a name="group-capture" id="group-capture"></a><a href="#group-capture-note">group capture</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td>rx = /^(\d{4})-(\d{2})-(\d{2})$/;<br />
m = rx.exec('2009-06-03');<br />
yr = m[1];<br />
mo = m[2];<br />
dy = m[3];</td>
<td>$<span style="color: peru">s</span> = <span style="color: maroon">"2010-06-03"</span>;<br />
$<span style="color: peru">rx</span> = <span style="color: maroon">'/(\d{4})-(\d{2})-(\d{2})/'</span>;<br />
preg_match($<span style="color: peru">rx</span>, $<span style="color: peru">s</span>, $<span style="color: peru">m</span>);<br />
list($_, $<span style="color: peru">yr</span>, $<span style="color: peru">mo</span>, $<span style="color: peru">dy</span>) = $<span style="color: peru">m</span>;</td>
<td><span style="color: peru">rx</span> = <span style="color: maroon">'(\d{4})-(\d{2})-(\d{2})'</span><br /><span style="color: peru">m</span> = re.search(rx, <span style="color: maroon">'2010-06-03'</span>)<br /><span style="color: peru">yr</span>, <span style="color: peru">mo</span>, <span style="color: peru">dy</span> = m.groups()</td>
<td>rx = <span style="color: maroon">/(\d{4})-(\d{2})-(\d{2})/</span><br />
m = rx.match(<span style="color: maroon">"2010-06-03"</span>)<br />
yr, mo, dy = m[1..3]</td>
</tr><tr><td><a name="named-grouped-capture" id="named-grouped-capture"></a><a href="#named-group-capture-note">named group capture</a></td>
<td><span style="color: gray"><em>none</em></span></td>
<td>$<span style="color: peru">s</span> = <span style="color: maroon">"foo.txt"</span>;<br />
$<span style="color: peru">rx</span> = <span style="color: maroon">'/^(?P&lt;file&gt;.+)\.(?P&lt;suffix&gt;.+)$/'</span>;<br />
preg_match($<span style="color: peru">rx</span>, $<span style="color: peru">s</span>, $<span style="color: peru">m</span>);<br /><br />
$<span style="color: peru">m</span>[<span style="color: maroon">"file"</span>]<br />
$<span style="color: peru">m</span>[<span style="color: maroon">"suffix"</span>]</td>
<td><span style="color: peru">rx</span> = <span style="color: maroon">'^(?P&lt;file&gt;.+)\.(?P&lt;suffix&gt;.+)$'</span><br /><span style="color: peru">m</span> = re.search(rx, <span style="color: maroon">''foo.txt'</span>)<br /><br />
m.groupdict()[<span style="color: maroon">'file'</span>]<br />
m.groupdict()[<span style="color: maroon">'suffix'</span>]</td>
<td>rx = <span style="color: maroon">/^(?&lt;file&gt;.+)\.(?&lt;suffix&gt;.+)$/</span><br />
m = rx.match(<span style="color: maroon">'foo.txt'</span>)<br /><br />
m[<span style="color: maroon">"file"</span>]<br />
m[<span style="color: maroon">"suffix"</span>]</td>
</tr><tr><td><a name="scan" id="scan"></a><a href="#scan-note">scan</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td>var a = "dolor sit amet".match(/\w+/g);</td>
<td>$<span style="color: peru">s</span> = <span style="color: maroon">"dolor sit amet"</span>;<br />
preg_match_all(<span style="color: maroon">'/\w+/'</span>, $<span style="color: peru">s</span>, $<span style="color: peru">m</span>);<br />
$<span style="color: peru">a</span> = $<span style="color: peru">m</span>[0];</td>
<td><span style="color: peru">s</span> = <span style="color: maroon">'dolor sit amet'</span><br /><span style="color: peru">a</span> = re.findall(<span style="color: maroon">'\w+'</span>, s)</td>
<td>a = <span style="color: maroon">"dolor sit amet"</span>.scan(<span style="color: maroon">/\w+/</span>)</td>
</tr><tr><td><a name="backreference" id="backreference"></a><a href="#backreference-note">backreference in match and substitution</a></td>
<td>/(\w+) \1/.exec("do do")<br /><br />
"do re".replace(/(\w+) (\w+)/, '$2 $1')</td>
<td>preg_match(<span style="color: maroon">'/(\w+) \1/'</span>, <span style="color: maroon">"do do"</span>)<br /><br />
$<span style="color: peru">s</span> = <span style="color: maroon">"do re"</span>;<br />
$<span style="color: peru">rx</span> = <span style="color: maroon">'/(\w+) (\w+)/'</span>;<br />
$<span style="color: peru">s</span> = preg_replace($<span style="color: peru">rx</span>, <span style="color: maroon">'\2 \1'</span>, $<span style="color: peru">s</span>);</td>
<td><span style="color: gray"><em>none</em></span><br /><br /><span style="color: peru">rx</span> = re.compile(<span style="color: maroon">'(\w+) (\w+)'</span>)<br />
rx.sub(r<span style="color: maroon">'\2 \1'</span>, <span style="color: maroon">'do re'</span>)</td>
<td><span style="color: maroon">/(\w+) \1/</span>.match(<span style="color: maroon">"do do"</span>)<br /><br /><span style="color: maroon">"do re"</span>.sub(<span style="color: maroon">/(\w+) (\w+)/</span>, <span style="color: maroon">'\2 \1'</span>)</td>
</tr><tr><td><a name="recursive-regex" id="recursive-regex"></a><a href="#recursive-regex-note">recursive regex</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td><span style="color: gray"><em>none</em></span></td>
<td><span style="color: maroon">'/\(([^()]*|($R))\)/'</span></td>
<td><span style="color: gray"><em>none</em></span></td>
<td><span style="color: maroon">/(?&lt;foo&gt;\(([^()]*|\g&lt;foo&gt;)*\))/</span></td>
</tr><tr><th colspan="5"><a name="dates-time" id="dates-time"></a><a href="#dates-time-note">dates and time</a></th>
</tr><tr><th></th>
<th>javascript</th>
<th>php</th>
<th>python</th>
<th>ruby</th>
</tr><tr><td><a name="date-time-type" id="date-time-type"></a><a href="#date-time-type-note">date/time type</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td>Date</td>
<td><span style="color: green">DateTime</span></td>
<td>datetime.datetime</td>
<td><span style="color: green">Time</span></td>
</tr><tr><td><a name="current-date-time" id="current-date-time"></a><a href="#current-date-time-note">current date/time</a></td>
<td>var t = new Date();</td>
<td>$<span style="color: peru">t</span> = <span style="color: purple">new</span> <span style="color: green">DateTime</span>(<span style="color: maroon">"now"</span>);<br />
$<span style="color: peru">utc_tmz</span> = <span style="color: purple">new</span> <span style="color: green">DateTimeZone</span>(<span style="color: maroon">"UTC"</span>);<br />
$<span style="color: peru">utc</span> = <span style="color: purple">new</span> <span style="color: green">DateTime</span>(<span style="color: maroon">"now"</span>, $<span style="color: peru">utc_tmz</span>);</td>
<td><span style="color: purple">import</span> datetime<br /><br /><span style="color: peru">t</span> = datetime.datetime.now()<br /><span style="color: peru">utc</span> = datetime.datetime.utcnow()</td>
<td>t = <span style="color: green">Time</span>.now<br />
utc = <span style="color: green">Time</span>.now.utc</td>
</tr><tr><td><a name="unix-epoch" id="unix-epoch"></a><a href="#unix-epoch-note">to unix epoch, from unix epoch</a></td>
<td>Math.round(t.getTime() / 1000)<br />
var epoch = 1315716177;<br />
var t2 = new Date(epoch * 1000);</td>
<td>$<span style="color: peru">epoch</span> = $<span style="color: peru">t</span>-&gt;getTimestamp();<br />
$<span style="color: peru">t2</span> = <span style="color: purple">new</span> <span style="color: green">DateTime</span>();<br />
$<span style="color: peru">t2</span>-&gt;setTimestamp(1304442000);</td>
<td><span style="color: purple">from</span> datetime <span style="color: purple">import</span> datetime <span style="color: purple">as</span> dt<br /><br /><span style="color: peru">epoch</span> = <span style="color: purple">int</span>(t.strftime(<span style="color: maroon">"%s"</span>))<br /><span style="color: peru">t2</span> = dt.fromtimestamp(1304442000)</td>
<td>epoch = t.to_i<br />
t2 = <span style="color: green">Time</span>.at(1304442000)</td>
</tr><tr><td><a name="current-unix-epoch" id="current-unix-epoch"></a><a href="#current-unix-epoch-note">current unix epoch</a></td>
<td>(new Date()).getTime() / 1000</td>
<td>$<span style="color: peru">epoch</span> = time();</td>
<td><span style="color: purple">import</span> datetime<br /><br /><span style="color: peru">t</span> = datetime.datetime.now()<br /><span style="color: peru">epoch</span> = <span style="color: purple">int</span>(t.strftime(<span style="color: maroon">"%s"</span>))</td>
<td>epoch = <span style="color: green">Time</span>.now.to_i</td>
</tr><tr><td><a name="strftime" id="strftime"></a><a href="#strftime-note">strftime</a></td>
<td><span style="color: gray"><em>none</em></span></td>
<td>strftime(<span style="color: maroon">"%Y-%m-%d %H:%M:%S"</span>, $<span style="color: peru">epoch</span>);<br />
date(<span style="color: maroon">"Y-m-d H:i:s"</span>, $<span style="color: peru">epoch</span>);<br />
$<span style="color: peru">t</span>-&gt;format(<span style="color: maroon">"Y-m-d H:i:s"</span>);</td>
<td>t.strftime(<span style="color: maroon">'%Y-%m-%d %H:%M:%S'</span>)</td>
<td>t.strftime(<span style="color: maroon">"%Y-%m-%d %H:%M:%S"</span>)</td>
</tr><tr><td><a name="date-time-str" id="date-time-str"></a><a href="#date-time-str-note">default format example</a></td>
<td><span style="color: gray">Tue Apr 01 2014 13:05:36 GMT-0700 (PDT)</span></td>
<td><span style="color: gray"><em>no default string representation</em></span></td>
<td><span style="color: gray">2011-08-23 19:35:59.411135</span></td>
<td><span style="color: gray">2011-08-23 17:44:53 -0700</span></td>
</tr><tr><td><a name="strptime" id="strptime"></a><a href="#strptime-note">strptime</a></td>
<td><span style="color: gray"><em>none</em></span></td>
<td>$<span style="color: peru">fmt</span> = <span style="color: maroon">"Y-m-d H:i:s"</span>;<br />
$<span style="color: peru">s</span> = <span style="color: maroon">"2011-05-03 10:00:00"</span>;<br />
$<span style="color: peru">t</span> = <span style="color: green">DateTime</span>::createFromFormat($<span style="color: peru">fmt</span>,<br /><span style="white-space: pre-wrap;">  </span>$<span style="color: peru">s</span>);</td>
<td><span style="color: purple">from</span> datetime <span style="color: purple">import</span> datetime<br /><br /><span style="color: peru">s</span> = <span style="color: maroon">'2011-05-03 10:00:00'</span><br /><span style="color: peru">fmt</span> = <span style="color: maroon">'%Y-%m-%d %H:%M:%S'</span><br /><span style="color: peru">t</span> = datetime.strptime(s, fmt)</td>
<td>require <span style="color: maroon">'date'</span><br /><br />
s = <span style="color: maroon">"2011-05-03 10:00:00"</span><br />
fmt = <span style="color: maroon">"%Y-%m-%d %H:%M:%S"</span><br />
t = <span style="color: green">Date</span>.strptime(s, fmt).to_time</td>
</tr><tr><td><a name="parse-date" id="parse-date"></a><a href="#parse-date-note">parse date w/o format</a></td>
<td>var t = new Date("July 7, 1999");</td>
<td>$<span style="color: peru">epoch</span> = strtotime(<span style="color: maroon">"July 7, 1999"</span>);</td>
<td><span style="color: gray"># pip install python-dateutil</span><br /><span style="color: purple">import</span> dateutil.parser<br /><br /><span style="color: peru">s</span> = <span style="color: maroon">'July 7, 1999'</span><br /><span style="color: peru">t</span> = dateutil.parser.parse(s)</td>
<td>require <span style="color: maroon">'date'</span><br /><br />
s = <span style="color: maroon">"July 7, 1999"</span><br />
t = <span style="color: green">Date</span>.parse(s).to_time</td>
</tr><tr><td><a name="get-date-parts" id="get-date-parts"></a><a href="#get-date-parts-note">get date parts</a></td>
<td>t.getFullYear()<br />
t.getMonth() + 1<br />
t.getDate() <span style="color: gray"># getDay() is day of week</span></td>
<td>(int)$t-&gt;format("Y")<br />
(int)$t-&gt;format("m")<br />
(int)$t-&gt;format("d")</td>
<td>t.year<br />
t.month<br />
t.day</td>
<td>t.year<br />
t.month<br />
t.day</td>
</tr><tr><td><a name="get-time-parts" id="get-time-parts"></a><a href="#get-time-parts-note">get time parts</a></td>
<td>t.getHours()<br />
t.getMinutes()<br />
t.getSeconds()</td>
<td>(int)$t-&gt;format("H")<br />
(int)$t-&gt;format("i")<br />
(int)$t-&gt;format("s")</td>
<td>t.hour<br />
t.minute<br />
t.second</td>
<td>t.hour<br />
t.min<br />
t.sec</td>
</tr><tr><td><a name="date-from-parts" id="date-from-parts"></a><a href="#date-from-parts-note">build date/time from parts</a></td>
<td><span style="color: purple">var</span> <span style="color: peru">yr</span> = 1999;<br /><span style="color: purple">var</span> <span style="color: peru">mo</span> = 9;<br /><span style="color: purple">var</span> <span style="color: peru">dy</span> = 10;<br /><span style="color: purple">var</span> <span style="color: peru">hr</span> = 23;<br /><span style="color: purple">var</span> <span style="color: peru">mi</span> = 30;<br /><span style="color: purple">var</span> <span style="color: peru">ss</span> = 0;<br /><span style="color: purple">var</span> <span style="color: peru">t</span> = <span style="color: purple">new</span> <span style="color: green">Date</span>(yr,mo-1,dy,hr,mi,ss);</td>
<td></td>
<td>import datetime<br /><br />
yr = 1999<br />
mo = 9<br />
dy = 10<br />
hr = 23<br />
mi = 30<br />
ss = 0<br />
t = datetime.datetime(yr,mo,dy,hr,mi,ss)</td>
<td>yr = 1999<br />
mo = 9<br />
dy = 10<br />
hr = 23<br />
mi = 30<br />
ss = 0<br />
t = Time.new(yr,mo,dy,hr,mi,ss)</td>
</tr><tr><td><a name="date-subtraction" id="date-subtraction"></a><a href="#date-subtraction-note">result of date subtraction</a></td>
<td><span style="color: gray">number <em>containing time difference in milliseconds</em></span></td>
<td><span style="color: gray">DateInterval <em>object if</em> diff <em>method used:</em></span><br />
$<span style="color: peru">fmt</span> = <span style="color: maroon">"Y-m-d H:i:s"</span>;<br />
$<span style="color: peru">s</span> = <span style="color: maroon">"2011-05-03 10:00:00"</span>;<br />
$<span style="color: peru">then</span> = <span style="color: green">DateTime</span>::createFromFormat($<span style="color: peru">fmt</span>, $<span style="color: peru">s</span>);<br />
$<span style="color: peru">now</span> = <span style="color: purple">new</span> <span style="color: green">DateTime</span>(<span style="color: maroon">"now"</span>);<br />
$<span style="color: peru">interval</span> = $<span style="color: peru">now</span>-&gt;diff($<span style="color: peru">then</span>);</td>
<td><span style="color: gray">datetime.timedelta <em>object</em></span><br /><br /><span style="color: gray"><em>use</em> total_seconds() <em>method to convert to float representing difference in seconds</em></span></td>
<td><span style="color: gray">Float <em>containing time difference in seconds</em></span></td>
</tr><tr><td><a name="add-time-duration" id="add-time-duration"></a><a href="#add-time-duration-note">add time duration</a></td>
<td>var t1 = new Date();<br />
var delta = (10 * 60 + 3) * 1000;<br />
var t2 = new Date(t1.getTime() + delta);</td>
<td>$<span style="color: peru">now</span> = <span style="color: purple">new</span> <span style="color: green">DateTime</span>(<span style="color: maroon">"now"</span>);<br />
$<span style="color: peru">now</span>-&gt;add(<span style="color: purple">new</span> <span style="color: green">DateInterval</span>(<span style="color: maroon">"PT10M3S"</span>);</td>
<td><span style="color: purple">import</span> datetime<br /><br /><span style="color: peru">delta</span> = datetime.timedelta(<br /><span style="white-space: pre-wrap;">  </span>minutes=10,<br /><span style="white-space: pre-wrap;">  </span>seconds=3)<br /><span style="color: peru">t</span> = datetime.datetime.now() + delta</td>
<td>require <span style="color: maroon">'date/delta'</span><br /><br />
s = <span style="color: maroon">"10 min, 3 s"</span><br />
delta = <span style="color: green">Date</span>::<span style="color: green">Delta</span>.parse(s).in_secs<br />
t = <span style="color: green">Time</span>.now + delta</td>
</tr><tr><td><a name="local-tmz" id="local-tmz"></a><a href="#local-tmz-note">local timezone</a></td>
<td></td>
<td><span style="color: gray"><em>DateTime objects can be instantiated without specifying the timezone if a default is set:</em></span><br />
$<span style="color: peru">s</span> = <span style="color: maroon">"America/Los_Angeles"</span>;<br />
date_default_timezone_set($<span style="color: peru">s</span>);</td>
<td><span style="color: gray"><em>a</em> datetime <em>object has no timezone information unless a</em> tzinfo <em>object is provided when it is created</em></span></td>
<td><span style="color: gray"><em>if no timezone is specified the local timezone is used</em></span></td>
</tr><tr><td><a name="arbitrary-tmz" id="arbitrary-tmz"></a><a href="#arbitrary-tmz-note">arbitrary timezone</a></td>
<td></td>
<td></td>
<td># pip install pytz<br />
import pytz<br />
import datetime<br /><br />
tmz = pytz.timezone('Asia/Tokyo')<br />
utc = datetime.datetime.utcnow()<br />
utc_dt = datetime.datetime(<br /><span style="white-space: pre-wrap;">  </span>*utc.timetuple()[0:5],<br /><span style="white-space: pre-wrap;">  </span>tzinfo=pytz.utc)<br />
jp_dt = utc_dt.astimezone(tmz)</td>
<td># gem install tzinfo<br />
require 'tzinfo'<br /><br />
tmz = TZInfo::Timezone.get("Asia/Tokyo")<br />
jp_time = tmz.utc_to_local(Time.now.utc)</td>
</tr><tr><td><a name="timezone-offset" id="timezone-offset"></a><a href="#timezone-offset-note">timezone name; offset from UTC; is daylight savings?</a></td>
<td></td>
<td>$<span style="color: peru">tmz</span> = date_timezone_get($<span style="color: peru">t</span>);<br />
timezone_name_get($<span style="color: peru">tmz</span>);<br />
date_offset_get($<span style="color: peru">t</span>) / 3600;<br />
$<span style="color: peru">t</span>-&gt;format(<span style="color: maroon">"I"</span>);</td>
<td><span style="color: purple">import</span> time<br /><br /><span style="color: peru">tm</span> = time.localtime()<br /><span style="white-space: pre-wrap;">  </span><br />
time.tzname[tm.tm_isdst]<br />
(time.timezone / -3600) + tm.tm_isdst<br />
tm.tm_isdst</td>
<td>t.zone<br />
t.utc_offset / 3600<br />
t.dst?</td>
</tr><tr><td><a name="microseconds" id="microseconds"></a><a href="#microseconds-note">microseconds</a></td>
<td></td>
<td>list($<span style="color: peru">frac</span>, $<span style="color: peru">sec</span>) = explode(<span style="color: maroon">" "</span>,<br /><span style="white-space: pre-wrap;">  </span>microtime());<br />
$<span style="color: peru">usec</span> = $<span style="color: peru">frac</span> * 1000 * 1000;</td>
<td>t.microsecond</td>
<td>t.usec</td>
</tr><tr><td><a name="sleep" id="sleep"></a><a href="#sleep-note">sleep</a></td>
<td><span style="color: gray"><em>none</em></span></td>
<td><span style="color: gray"># a float argument will be truncated<br />
# to an integer:</span><br />
sleep(1);</td>
<td><span style="color: purple">import</span> time<br /><br />
time.sleep(0.5)</td>
<td>sleep(0.5)</td>
</tr><tr><td><a name="timeout" id="timeout"></a><a href="#timeout-note">timeout</a></td>
<td></td>
<td><span style="color: gray"><em>use</em> set_time_limit <em>to limit execution time of the entire script; use</em> stream_set_timeout <em>to limit time spent reading from a stream opened with</em> fopen <em>or</em> fsockopen</span></td>
<td><span style="color: purple">import</span> signal, time<br /><br /><span style="color: purple">class</span> <span style="color: green">Timeout</span>(<span style="color: green">Exception</span>): <span style="color: purple">pass</span><br /><br /><span style="color: purple">def</span> <span style="color: mediumblue">timeout_handler</span>(signo, fm):<br /><span style="white-space: pre-wrap;">  </span><span style="color: purple">raise</span> Timeout()<br /><br />
signal.signal(signal.SIGALRM,<br /><span style="white-space: pre-wrap;">  </span>timeout_handler)<br /><br /><span style="color: purple">try</span>:<br /><span style="white-space: pre-wrap;">  </span>signal.alarm(5)<br /><span style="white-space: pre-wrap;">  </span>time.sleep(10)<br /><span style="color: purple">except</span> Timeout:<br /><span style="white-space: pre-wrap;">  </span><span style="color: purple">pass</span><br />
signal.alarm(0)</td>
<td>require <span style="color: maroon">'timeout'</span><br /><br /><span style="color: purple">begin</span><br /><span style="white-space: pre-wrap;">  </span><span style="color: green">Timeout</span>.timeout(5) <span style="color: purple">do</span><br /><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span>sleep(10)<br /><span style="white-space: pre-wrap;">  </span><span style="color: purple">end</span><br /><span style="color: purple">rescue</span> <span style="color: green">Timeout</span>::<span style="color: green">Error</span><br /><span style="color: purple">end</span></td>
</tr><tr><th colspan="5"><a name="arrays" id="arrays"></a><a href="#arrays-note">arrays</a></th>
</tr><tr><th></th>
<th>javascript</th>
<th>php</th>
<th>python</th>
<th>ruby</th>
</tr><tr><td><a name="array-literal" id="array-literal"></a><a href="#array-literal-note">literal</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td>a = [1, 2, 3, 4]</td>
<td>$<span style="color: peru">a</span> = [1, 2, 3, 4];<br /><br /><span style="color: gray"># older syntax:</span><br />
$<span style="color: peru">a</span> = array(1, 2, 3, 4);</td>
<td><span style="color: peru">a</span> = [1, 2, 3, 4]</td>
<td>a = [1, 2, 3, 4]<br /><br /><span style="color: gray"># a = ['do', 're', 'mi']</span><br />
a = %w(do re mi)</td>
</tr><tr><td><a name="array-size" id="array-size"></a><a href="#array-size-note">size</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td>a.length</td>
<td>count($<span style="color: peru">a</span>)</td>
<td><span style="color: purple">len</span>(a)</td>
<td>a.size<br />
a.length <span style="color: gray"># same as size</span></td>
</tr><tr><td><a name="array-empty" id="array-empty"></a><a href="#array-empty-note">empty test</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td><span style="color: gray"><span style="white-space: pre-wrap;">//</span> TypeError if a is null or undefined:</span><br />
a.length === 0</td>
<td><span style="color: gray"># NULL tests as empty:</span><br />
!$<span style="color: peru">a</span></td>
<td><span style="color: gray"># None tests as empty:</span><br /><span style="color: purple">not</span> a</td>
<td><span style="color: gray"># NoMethodError if a is nil:</span><br />
a.empty?</td>
</tr><tr><td><a name="array-lookup" id="array-lookup"></a><a href="#array-lookup-note">lookup</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td>a[0]</td>
<td>$<span style="color: peru">a</span>[0]<br /><br /><span style="color: gray"># PHP uses the same type for arrays and<br />
# dictionaries; indices can be negative<br />
# integers or strings</span></td>
<td>a[0]<br /><br /><span style="color: gray"># returns last element:</span><br />
a[-1]</td>
<td>a[0]<br /><br /><span style="color: gray"># returns last element:</span><br />
a[-1]</td>
</tr><tr><td><a name="array-update" id="array-update"></a><a href="#array-update-note">update</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td>a[0] = "lorem"</td>
<td>$<span style="color: peru">a</span>[0] = <span style="color: maroon">"lorem"</span>;</td>
<td>a[0] = <span style="color: maroon">'lorem'</span></td>
<td>a[0] = <span style="color: maroon">"lorem"</span></td>
</tr><tr><td><a name="array-out-of-bounds" id="array-out-of-bounds"></a><a href="#array-out-of-bounds-note">out-of-bounds behavior</a></td>
<td><span style="color: gray"><em>returns</em> undefined</span></td>
<td>$<span style="color: peru">a</span> = [];<br /><span style="color: gray"># evaluates as NULL:</span><br />
$<span style="color: peru">a</span>[10];<br /><span style="color: gray"># increases array size to one:</span><br />
$<span style="color: peru">a</span>[10] = <span style="color: maroon">"lorem"</span>;</td>
<td><span style="color: peru">a</span> = []<br /><span style="color: gray"># raises IndexError:</span><br />
a[10]<br /><span style="color: gray"># raises IndexError:</span><br />
a[10] = <span style="color: maroon">'lorem'</span></td>
<td>a = []<br /><span style="color: gray"># evaluates as nil:</span><br />
a[10]<br /><span style="color: gray"># increases array size to 11:</span><br />
a[10] = <span style="color: maroon">"lorem"</span></td>
</tr><tr><td><a name="array-element-index" id="array-element-index"></a><a href="#array-element-index-note">index of element</a></td>
<td>[6, 7, 7, 8].indexOf(7)<br />
[6, 7, 7, 8].lastIndexOf(7)<br /><span style="color: gray"><span style="white-space: pre-wrap;">//</span> returns -1 if not found</span></td>
<td>$<span style="color: peru">a</span> = [<span style="color: maroon">"x"</span>, <span style="color: maroon">"y"</span>, <span style="color: maroon">"z"</span>, <span style="color: maroon">"w"</span>];<br />
$<span style="color: peru">i</span> = array_search(<span style="color: maroon">"y"</span>, $<span style="color: peru">a</span>);</td>
<td><span style="color: peru">a</span> = [<span style="color: maroon">'x'</span>, <span style="color: maroon">'y'</span>, <span style="color: maroon">'z'</span>, <span style="color: maroon">'w'</span>]<br /><span style="color: peru">i</span> = a.index(<span style="color: maroon">'y'</span>)</td>
<td>a = %w(x y z w)<br />
i = a.index(<span style="color: maroon">"y"</span>)</td>
</tr><tr><td><a name="array-slice" id="array-slice"></a><a href="#array-slice-note">slice</a><br /><span style="color: gray"><em>by endpoints, by length</em></span><br /><span style="white-space: pre-wrap;"> </span></td>
<td>["a", "b", "c", "d"].slice(1,3)</td>
<td><span style="color: gray"># select 3rd and 4th elements:</span><br /><span style="color: gray"><em>none</em></span><br />
array_slice($<span style="color: peru">a</span>, 2, 2)</td>
<td><span style="color: gray"># select 3rd and 4th elements:</span><br />
a[2:4]<br />
a[<span style="white-space: pre-wrap;">2:2</span> + 2]</td>
<td><span style="color: gray"># select 3rd and 4th elements:</span><br />
a[2..3]<br />
a[2, 2]</td>
</tr><tr><td><a name="array-slice-to-end" id="array-slice-to-end"></a><a href="#array-slice-to-end-note">slice to end</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td>["a", "b", "c", "d"].slice(1)</td>
<td>array_slice($<span style="color: peru">a</span>, 1)</td>
<td>a[1:]</td>
<td>a[1..-1]</td>
</tr><tr><td><a name="array-back" id="array-back"></a><a href="#array-back-note">manipulate back</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td>a = [6, 7, 8];<br />
a.push(9);<br />
i = a.pop();</td>
<td>$<span style="color: peru">a</span> = [6, 7, 8];<br />
array_push($<span style="color: peru">a</span>, 9);<br />
$<span style="color: peru">a</span>[] = 9; <span style="color: gray"># same as array_push</span><br />
array_pop($<span style="color: peru">a</span>);</td>
<td><span style="color: peru">a</span> = [6, 7, 8]<br />
a.append(9)<br />
a.pop()</td>
<td>a = [6, 7, 8]<br />
a.push(9)<br />
a <span style="white-space: pre-wrap;">&lt;&lt;</span> 9 <span style="color: gray"># same as push</span><br />
a.pop</td>
</tr><tr><td><a name="array-front" id="array-front"></a><a href="#array-front-note">manipulate front</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td>a = [6, 7, 8];<br />
a.unshift(5);<br />
i = a.shift();</td>
<td>$<span style="color: peru">a</span> = [6, 7, 8];<br />
array_unshift($<span style="color: peru">a</span>, 5);<br />
array_shift($<span style="color: peru">a</span>);</td>
<td><span style="color: peru">a</span> = [6, 7, 8]<br />
a.insert(0, 5)<br />
a.pop(0)</td>
<td>a = [6, 7, 8]<br />
a.unshift(5)<br />
a.shift</td>
</tr><tr><td><a name="array-concatenation" id="array-concatenation"></a><a href="#array-concatenation-note">concatenate</a></td>
<td>a = [1, 2, 3].concat([4, 5, 6]);</td>
<td>$<span style="color: peru">a</span> = [1, 2, 3];<br />
$<span style="color: peru">a2</span> = array_merge($<span style="color: peru">a</span>, [4, 5, 6]);<br />
$<span style="color: peru">a</span> = array_merge($<span style="color: peru">a</span>, [4, 5, 6]);</td>
<td><span style="color: peru">a</span> = [1, 2, 3]<br /><span style="color: peru">a2</span> = a + [4, 5, 6]<br />
a.extend([4, 5, 6])</td>
<td>a = [1, 2, 3]<br />
a2 = a + [4, 5, 6]<br />
a.concat([4, 5, 6])</td>
</tr><tr><td><a name="array-replication" id="array-replication"></a><a href="#array-replication-note">replicate</a></td>
<td><span style="color: gray"><em>none</em></span></td>
<td></td>
<td>a = [<span style="color: purple">None</span>] * 10<br />
a = [<span style="color: purple">None for</span> i <span style="color: purple">in range</span>(0, 10)]</td>
<td>a = [<span style="color: peru">nil</span>] * 10<br />
a = <span style="color: green">Array</span>.new(10, <span style="color: peru">nil</span>)</td>
</tr><tr><td><a name="array-copy" id="array-copy"></a><a href="#array-copy-note">copy</a><br /><span style="color: gray"><em>address copy, shallow copy, deep copy</em></span></td>
<td>a = [1, 2, [3, 4]];<br />
a2 = a;<br />
a3 = a.slice(0);<br />
a4 = JSON.parse(JSON.stringify(a));</td>
<td>$<span style="color: peru">a</span> = [1, 2, [3, 4]];<br />
$<span style="color: peru">a2</span> =&amp; $<span style="color: peru">a</span>;<br /><span style="color: gray"><em>none</em></span><br />
$<span style="color: peru">a4</span> = $<span style="color: peru">a</span>;</td>
<td><span style="color: purple">import</span> copy<br /><br /><span style="color: peru">a</span> = [1,2,[3,4]]<br /><span style="color: peru">a2</span> = a<br /><span style="color: peru">a3</span> = <span style="color: purple">list</span>(a)<br /><span style="color: peru">a4</span> = copy.deepcopy(a)</td>
<td>a = [1,2,[3,4]]<br />
a2 = a<br />
a3 = a.dup<br />
a4 = <span style="color: green">Marshal</span>.load(<span style="color: green">Marshal</span>.dump(a))</td>
</tr><tr><td><a name="array-arguments" id="array-arguments"></a><a href="#array-arguments-note">arrays as function arguments</a></td>
<td><span style="color: gray"><em>parameter contains address copy</em></span></td>
<td><span style="color: gray"><em>parameter contains deep copy</em></span></td>
<td><span style="color: gray"><em>parameter contains address copy</em></span></td>
<td><span style="color: gray"><em>parameter contains address copy</em></span></td>
</tr><tr><td><a name="array-iterate" id="array-iterate"></a><a href="#array-iterate-note">iterate over elements</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td>_.each([1, 2, 3], function(n) {<br /><span style="white-space: pre-wrap;">  </span>alert(n);<br />
})</td>
<td><span style="color: purple">foreach</span> ([1, 2, 3] <span style="color: purple">as</span> $<span style="color: peru">i</span>) {<br /><span style="white-space: pre-wrap;">  </span><span style="color: purple">echo</span> <span style="color: maroon">"$i\n"</span>;<br />
}</td>
<td><span style="color: purple">for</span> i <span style="color: purple">in</span> [1,2,3]:<br /><span style="white-space: pre-wrap;">  </span><span style="color: purple">print</span>(i)</td>
<td>[1,2,3].each { |i| puts i }</td>
</tr><tr><td><a name="indexed-array-iteration" id="indexed-array-iteration"></a><a href="#indexed-array-iteration-note">iterate over indices and elements</a></td>
<td>var len = a.length;<br />
for (var i = 0; i &lt; len; i++ ) {<br /><span style="white-space: pre-wrap;">  </span>alert(a[i]);<br />
}</td>
<td>$<span style="color: peru">a</span> = [<span style="color: maroon">"do"</span>, <span style="color: maroon">"re"</span>, <span style="color: maroon">"mi"</span> <span style="color: maroon">"fa"</span>];<br /><span style="color: purple">foreach</span> ($<span style="color: peru">a</span> as $<span style="color: peru">i</span> =&gt; $<span style="color: peru">s</span>) {<br /><span style="white-space: pre-wrap;">  </span><span style="color: purple">echo</span> <span style="color: maroon">"$s at index $i\n"</span>;<br />
}</td>
<td><span style="color: peru">a</span> = [<span style="color: maroon">'do'</span>, <span style="color: maroon">'re'</span>, <span style="color: maroon">'mi'</span>, <span style="color: maroon">'fa'</span>]<br /><span style="color: purple">for</span> i, s <span style="color: purple">in</span> enumerate(a):<br /><span style="white-space: pre-wrap;">  </span><span style="color: purple">print</span>(<span style="color: maroon">'%s at index %d'</span> % (s, i))</td>
<td>a = %w(do re mi fa)<br />
a.each_with_index do |s, i|<br /><span style="white-space: pre-wrap;">  </span>puts <span style="color: maroon">"</span><span style="color: peru">#{s}</span> <span style="color: maroon">at index</span> <span style="color: peru">#{i}</span><span style="color: maroon">"</span><br />
end</td>
</tr><tr><td><a name="range-iteration" id="range-iteration"></a><a href="#range-iteration-note">iterate over range</a></td>
<td><span style="color: gray"><em>not space efficient; use C-style for loop</em></span></td>
<td><span style="color: gray"><em>not space efficient; use C-style for loop</em></span></td>
<td><span style="color: gray"># use range() in Python 3:</span><br /><span style="color: purple">for</span> i <span style="color: purple">in xrange</span>(1, 1000001):<br /><span style="white-space: pre-wrap;">  </span><span style="color: gray"><em>code</em></span></td>
<td>(1..1_000_000).each <span style="color: purple">do</span> |i|<br /><span style="white-space: pre-wrap;">  </span><span style="color: gray"><em>code</em></span><br /><span style="color: purple">end</span></td>
</tr><tr><td><a name="range-array" id="range-array"></a><a href="#range-array-note">instantiate range as array</a></td>
<td>var a = _.range(1, 10);</td>
<td>$<span style="color: peru">a</span> = range(1, 10);</td>
<td><span style="color: peru">a</span> = <span style="color: purple">range</span>(1, 11)<br /><span style="color: gray"><em>Python 3:</em></span><br /><span style="color: peru">a</span> = <span style="color: purple">list</span>(<span style="color: purple">range</span>(1, 11))</td>
<td>a = (1..10).to_a</td>
</tr><tr><td><a name="array-reverse" id="array-reverse"></a><a href="#array-reverse-note">reverse</a><br /><span style="color: gray"><em>non-destructive, in-place</em></span></td>
<td>var a = [1, 2, 3];<br />
a.reverse();</td>
<td>$<span style="color: peru">a</span> = [1, 2, 3];<br /><br />
array_reverse($<span style="color: peru">a</span>);<br />
$<span style="color: peru">a</span> = array_reverse($<span style="color: peru">a</span>);</td>
<td><span style="color: peru">a</span> = [1, 2, 3]<br /><br />
a[::-1]<br />
a.reverse()</td>
<td>a = [1, 2, 3]<br /><br />
a.reverse<br />
a.reverse!</td>
</tr><tr><td><a name="array-sort" id="array-sort"></a><a href="#array-sort-note">sort</a><br /><span style="color: gray"><em>non-destructive,<br />
in-place,<br />
custom comparision</em></span></td>
<td>var a = [3, 1, 4, 2];<br />
a.sort();</td>
<td>$<span style="color: peru">a</span> = [<span style="color: maroon">"b"</span>, <span style="color: maroon">"A"</span>, <span style="color: maroon">"a"</span>, <span style="color: maroon">"B"</span>];<br /><br /><span style="color: gray"><em>none</em></span><br />
sort($<span style="color: peru">a</span>);<br /><span style="color: gray"><em>none, but</em> usort <em>sorts in place</em></span></td>
<td><span style="color: peru">a</span> = [<span style="color: maroon">'b'</span>, <span style="color: maroon">'A'</span>, <span style="color: maroon">'a'</span>, <span style="color: maroon">'B'</span>]<br /><br /><span style="color: purple">sorted</span>(a)<br />
a.sort()<br /><span style="color: gray"># custom binary comparision<br />
# removed from Python 3:</span><br />
a.sort(key=<span style="color: purple">str</span>.lower)</td>
<td>a = %w(b A a B)<br /><br />
a.sort<br />
a.sort!<br />
a.sort <span style="color: purple">do</span> |x, y|<br /><span style="white-space: pre-wrap;">  </span>x.downcase &lt;=&gt; y.downcase<br /><span style="color: purple">end</span></td>
</tr><tr><td><a name="array-dedupe" id="array-dedupe"></a><a href="#array-dedupe-note">dedupe</a><br /><span style="color: gray"><em>non-destructive, in-place</em></span></td>
<td>var a = [1, 2, 2, 3];<br /><br />
var a2 = _.uniq(a);<br />
a = _.uniq(a);</td>
<td>$<span style="color: peru">a</span> = [1, 2, 2, 3];<br /><br />
$<span style="color: peru">a2</span> = array_unique($<span style="color: peru">a</span>);<br />
$<span style="color: peru">a</span> = array_unique($<span style="color: peru">a</span>);</td>
<td><span style="color: peru">a</span> = [1, 2, 2, 3]<br /><br /><span style="color: peru">a2</span> = <span style="color: purple">list</span>(<span style="color: purple">set</span>(a))<br /><span style="color: peru">a</span> = <span style="color: purple">list</span>(<span style="color: purple">set</span>(a))</td>
<td>a = [1, 2, 2, 3]<br /><br />
a2 = a.uniq<br />
a.uniq!</td>
</tr><tr><td><a name="membership" id="membership"></a><a href="#membership-note">membership</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td>_.contains(a, 7)</td>
<td>in_array(7, $<span style="color: peru">a</span>)</td>
<td>7 <span style="color: purple">in</span> a</td>
<td>a.include?(7)</td>
</tr><tr><td><a name="intersection" id="intersection"></a><a href="#intersection-note">intersection</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td>_.intersection([1, 2], [2, 3, 4])</td>
<td>$<span style="color: peru">a</span> = [1, 2];<br />
$<span style="color: peru">b</span> = [2, 3, 4]<br />
array_intersect($<span style="color: peru">a</span>, $<span style="color: peru">b</span>)</td>
<td>{1,2} &amp; {2,3,4}</td>
<td>[1,2] &amp; [2,3,4]</td>
</tr><tr><td><a name="union" id="union"></a><a href="#union-note">union</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td>_.union([1, 2], [2, 3, 4])</td>
<td>$<span style="color: peru">a1</span> = [1, 2];<br />
$<span style="color: peru">a2</span> = [2, 3, 4];<br />
array_unique(array_merge($<span style="color: peru">a1</span>, $<span style="color: peru">a2</span>))</td>
<td>{1,2} | {2,3,4}</td>
<td>[1,2] | [2,3,4]</td>
</tr><tr><td><a name="set-diff" id="set-diff"></a><a href="#set-diff-note">relative complement, symmetric difference</a></td>
<td>_.difference([1,2,3], [2])<br /><span style="color: gray"><em>none</em></span></td>
<td>$<span style="color: peru">a1</span> = [1, 2, 3];<br />
$<span style="color: peru">a2</span> = [2];<br />
array_values(array_diff($<span style="color: peru">a1</span>, $<span style="color: peru">a2</span>))<br /><span style="color: gray"><em>none</em></span></td>
<td>{1,2,3} - {2}<br />
{1,2} ^ {2,3,4}</td>
<td>require <span style="color: maroon">'set'</span><br /><br />
[1,2,3] - [2]<br /><span style="color: green">Set</span>[1,2] ^ <span style="color: green">Set</span>[2,3,4]</td>
</tr><tr><td><a name="map" id="map"></a><a href="#map-note">map</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td><span style="color: gray"><span style="white-space: pre-wrap;">//</span> callback gets 3 args:<br /><span style="white-space: pre-wrap;">//</span> value, index, array</span><br />
a.map(function(x) { return x * x })</td>
<td>array_map(function ($<span style="color: peru">x</span>) {<br /><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span><span style="color: purple">return</span> $<span style="color: peru">x</span> * $<span style="color: peru">x</span>;<br /><span style="white-space: pre-wrap;">  </span>}, [1, 2, 3])</td>
<td><span style="color: purple">map</span>(<span style="color: purple">lambda</span> x: x * x, [1,2,3])<br /><span style="color: gray"># or use list comprehension:</span><br />
[x * x for x in [1,2,3]]</td>
<td>[1,2,3].map { |o| o * o }</td>
</tr><tr><td><a name="filter" id="filter"></a><a href="#filter-note">filter</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td>a.filter(function(x) { return x &gt; 1 })</td>
<td>array_filter([1, 2, 3],<br /><span style="white-space: pre-wrap;">  </span>function ($<span style="color: peru">x</span>) {<br /><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span><span style="color: purple">return</span> $<span style="color: peru">x</span>&gt;1;<br /><span style="white-space: pre-wrap;">  </span>})</td>
<td><span style="color: purple">filter</span>(<span style="color: purple">lambda</span> x: x &gt; 1, [1,2,3])<br /><span style="color: gray"># or use list comprehension:</span><br />
[x for x in [1,2,3] if x &gt; 1]</td>
<td>[1,2,3].select { |o| o &gt; 1 }</td>
</tr><tr><td><a name="reduce" id="reduce"></a><a href="#reduce-note">reduce</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td>a.reduce(function(m, o) {<br /><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span>return m + o;<br /><span style="white-space: pre-wrap;">  </span>}, 0)</td>
<td>array_reduce([1, 2, 3],<br /><span style="white-space: pre-wrap;">  </span>function($<span style="color: peru">x</span>,$<span style="color: peru">y</span>) {<br /><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span><span style="color: purple">return</span> $<span style="color: peru">x</span> + $<span style="color: peru">y</span>;<br /><span style="white-space: pre-wrap;">  </span>}, 0)</td>
<td><span style="color: gray"># import needed in Python 3 only</span><br /><span style="color: purple">from</span> functools <span style="color: purple">import reduce</span><br /><br /><span style="color: purple">reduce</span>(<span style="color: purple">lambda</span> x, y: x + y, [1, 2, 3], 0)</td>
<td>[1, 2, 3].inject(0) { |m, o| m + o }</td>
</tr><tr><td><a name="universal-existential-test" id="universal-existential-test"></a><a href="#universal-existential-test-note">universal and existential tests</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td>var a = [1, 2, 3, 4];<br />
var even = function(x) {<br /><span style="white-space: pre-wrap;">  </span>return x % 2 == 0;<br />
};<br /><br />
a.every(even)<br />
a.some(even)</td>
<td><span style="color: gray"><em>use array_filter</em></span></td>
<td><span style="color: purple">all</span>(i % 2 == 0 <span style="color: purple">for</span> i <span style="color: purple">in</span> [1,2,3,4])<br /><span style="color: purple">any</span>(i % 2 == 0 <span style="color: purple">for</span> i <span style="color: purple">in</span> [1,2,3,4])</td>
<td>[1,2,3,4].all? {|i| i.even? }<br />
[1,2,3,4].any? {|i| i.even? }</td>
</tr><tr><td><a name="shuffle-sample" id="shuffle-sample"></a><a href="#shuffle-sample-note">shuffle and sample</a></td>
<td>var a = [1, 2, 3, 4];<br />
a = _.shuffle(a);<br />
var samp = _.sample([1, 2, 3, 4], 2);</td>
<td>$<span style="color: peru">a</span> = [1, 2, 3, 4];<br />
shuffle($<span style="color: peru">a</span>);<br />
$<span style="color: peru">samp</span> = array_rand(|[1, 2, 3, 4], 2);</td>
<td><span style="color: purple">from</span> random <span style="color: purple">import</span> shuffle, sample<br /><br /><span style="color: peru">a</span> = [1, 2, 3, 4]<br />
shuffle(a)<br />
samp = sample([1, 2, 3, 4], 2)</td>
<td>[1, 2, 3, 4].shuffle!<br />
samp = [1, 2, 3, 4].sample(2)</td>
</tr><tr><td><a name="flatten" id="flatten"></a><a href="#flatten-note">flatten</a><br /><span style="color: gray"><em>one level, completely</em></span></td>
<td>var a = [1, [2, [3, 4]]];<br />
var a2 = _.flatten(a, true);<br />
var a3 = _.flatten(a);</td>
<td><span style="color: gray"><em>none</em></span></td>
<td><span style="color: gray"><em>none</em></span></td>
<td>a = [1, [2, [3, 4]]]<br />
a2 = a.flatten(1)<br />
a3 = a.flatten</td>
</tr><tr><td><a name="zip" id="zip"></a><a href="#zip-note">zip</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td>var a = _.zip(<br /><span style="white-space: pre-wrap;">  </span>[1, 2, 3],<br /><span style="white-space: pre-wrap;">  </span>["a", "b", "c"]);</td>
<td>$<span style="color: peru">a</span> = array_map(<span style="color: teal">NULL</span>,<br /><span style="white-space: pre-wrap;">  </span>[1, 2, 3],<br /><span style="white-space: pre-wrap;">  </span>[<span style="color: maroon">"a"</span>, <span style="color: maroon">"b"</span>, <span style="color: maroon">"c"</span>]);</td>
<td><span style="color: peru">a</span> = zip([1,2,3], [<span style="color: maroon">'a'</span>, <span style="color: maroon">'b'</span>, <span style="color: maroon">'c'</span>])</td>
<td>a = [1,2,3].zip([<span style="color: maroon">"a"</span>, <span style="color: maroon">"b"</span>, <span style="color: maroon">"c"</span>])</td>
</tr><tr><th colspan="5"><a name="dictionaries" id="dictionaries"></a><a href="#dictionaries-note">dictionaries</a></th>
</tr><tr><th></th>
<th>javascript</th>
<th>php</th>
<th>python</th>
<th>ruby</th>
</tr><tr><td><a name="dict-literal" id="dict-literal"></a><a href="#dict-literal-note">literal</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td>d = { "t":1, "f":0 };<br /><span style="color: gray"><span style="white-space: pre-wrap;">//</span> keys do not need to be quoted if they<br /><span style="white-space: pre-wrap;">//</span> are a legal JavaScript variable name<br /><span style="white-space: pre-wrap;">//</span>and not a reserved word</span></td>
<td>$<span style="color: peru">d</span> = [<span style="color: maroon">"t"</span> =&gt; 1, <span style="color: maroon">"f"</span> =&gt; 0];<br /><br /><span style="color: gray"># older syntax:</span><br />
$<span style="color: peru">d</span> = array(<span style="color: maroon">"t"</span> =&gt; 1, <span style="color: maroon">"f"</span> =&gt; 0);</td>
<td><span style="color: peru">d</span> = { <span style="color: maroon">'t'</span>:1, <span style="color: maroon">'f'</span>:0 }</td>
<td>d = { <span style="color: maroon">"t"</span> =&gt; 1, <span style="color: maroon">"f"</span> =&gt; 0 }</td>
</tr><tr><td><a name="dict-size" id="dict-size"></a><a href="#dict-size-note">size</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td>var size = 0;<br />
for (var k in d) {<br /><span style="white-space: pre-wrap;">  </span>if (d.hasOwnProperty(k)) size++;<br />
}</td>
<td>count($<span style="color: peru">d</span>)</td>
<td><span style="color: purple">len</span>(d)</td>
<td>d.size<br />
d.length <span style="color: gray"># same as size</span></td>
</tr><tr><td><a name="dict-lookup" id="dict-lookup"></a><a href="#dict-lookup-note">lookup</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td>d.t<br />
d["t"]</td>
<td>$<span style="color: peru">d</span>[<span style="color: maroon">"t"</span>]</td>
<td>d[<span style="color: maroon">'t'</span>]</td>
<td>d[<span style="color: maroon">"t"</span>]</td>
</tr><tr><td><a name="dict-update" id="dict-update"></a><a href="#dict-update-note">update</a></td>
<td>d["t"] = 2;<br />
d.t = 2;</td>
<td>$<span style="color: peru">d</span>[<span style="color: maroon">"t"</span>] = 2;</td>
<td>d[<span style="color: maroon">'t'</span>] = 2</td>
<td>d[<span style="color: maroon">"t"</span>] = 2</td>
</tr><tr><td><a name="dict-out-of-bounds" id="dict-out-of-bounds"></a><a href="#dict-out-of-bounds-note">out-of-bounds behavior</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td>var d = {};<br /><span style="color: gray"><span style="white-space: pre-wrap;">//</span> sets s to undefined:</span><br />
var s = d["lorem"];<br /><span style="color: gray"><span style="white-space: pre-wrap;">//</span> adds key/value pair:</span><br />
d["lorem"] = "ipsum";</td>
<td>$<span style="color: peru">d</span> = [];<br /><span style="color: gray"># sets $s to NULL:</span><br />
$<span style="color: peru">s</span> = $<span style="color: peru">d</span>[<span style="color: maroon">"lorem"</span>];<br /><span style="color: gray"># adds key/value pair:</span><br />
$<span style="color: peru">d</span>[<span style="color: maroon">"lorem"</span>] = <span style="color: maroon">"ipsum"</span>;</td>
<td><span style="color: peru">d</span> = {}<br /><span style="color: gray"># raises KeyError:</span><br /><span style="color: peru">s</span> = d[<span style="color: maroon">'lorem'</span>]<br /><span style="color: gray"># adds key/value pair:</span><br />
d[<span style="color: maroon">'lorem'</span>] = <span style="color: maroon">'ipsum'</span></td>
<td>d = {}<br /><span style="color: gray"># sets s to nil:</span><br />
s = d[<span style="color: maroon">"lorem"</span>]<br /><span style="color: gray"># adds key/value pair:</span><br />
d[<span style="color: maroon">"lorem"</span>] = <span style="color: maroon">"ipsum"</span></td>
</tr><tr><td><a name="dict-key-check" id="dict-key-check"></a><a href="#dict-key-check-note">is key present</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td>d.hasOwnProperty("t");</td>
<td>array_key_exists(<span style="color: maroon">"y"</span>, $<span style="color: peru">d</span>);</td>
<td><span style="color: maroon">'y'</span> <span style="color: purple">in</span> d</td>
<td>d.has_key?(<span style="color: maroon">"y"</span>)</td>
</tr><tr><td><a name="dict-delete" id="dict-delete"></a><a href="#dict-delete-note">delete entry</a></td>
<td>delete d["t"];<br />
delete d.t;</td>
<td>$<span style="color: peru">d</span> = [1 =&gt; <span style="color: maroon">"t"</span>, 0 =&gt; <span style="color: maroon">"f"</span>];<br />
unset($<span style="color: peru">d</span>[1]);</td>
<td><span style="color: peru">d</span> = {1: <span style="color: purple">True</span>, 0: <span style="color: purple">False</span>}<br /><span style="color: purple">del</span> d[1]</td>
<td>d = {1 =&gt; <span style="color: peru">true</span>, 0 =&gt; <span style="color: peru">false</span>}<br />
d.delete(1)</td>
</tr><tr><td><a name="dict-assoc-array" id="dict-assoc-array"></a><a href="#dict-assoc-array-note">from array of pairs, from even length array</a></td>
<td>var a = [["a", 1], ["b", 2], ["c", 3]];<br />
var d = _.object(a);<br /><br /><span style="color: gray"><em>none</em></span></td>
<td></td>
<td><span style="color: peru">a</span> = [[<span style="color: maroon">'a'</span>, 1], [<span style="color: maroon">'b'</span>, 2], [<span style="color: maroon">'c'</span>, 3]]<br /><span style="color: peru">d</span> = <span style="color: purple">dict</span>(a)<br /><br /><span style="color: peru">a</span> = [<span style="color: maroon">'a'</span>, 1, <span style="color: maroon">'b'</span>, 2, <span style="color: maroon">'c'</span>, 3]<br /><span style="color: peru">d</span> = <span style="color: purple">dict</span>(<span style="color: purple">zip</span>(a[::2], a[1::2]))</td>
<td>a = [[<span style="color: maroon">"a"</span>, 1], [<span style="color: maroon">"b"</span>, 2], [<span style="color: maroon">"c"</span>, 3]]<br />
d = <span style="color: green">Hash</span>[a]<br /><br />
a = [<span style="color: maroon">"a"</span>, 1, <span style="color: maroon">"b"</span>, 2, <span style="color: maroon">"c"</span>, 3]<br />
d = <span style="color: green">Hash</span>[*a]</td>
</tr><tr><td><a name="dict-merge" id="dict-merge"></a><a href="#dict-merge-note">merge</a></td>
<td>var d1 = {"a": 1, "b": 2};<br />
var d2 = {"c": 3, "d": 4};<br />
d1 = _.extend(d1, d2);</td>
<td>$<span style="color: peru">d1</span> = [<span style="color: maroon">"a"</span> =&gt; 1, <span style="color: maroon">"b"</span> =&gt; 2];<br />
$<span style="color: peru">d2</span> = [<span style="color: maroon">"b"</span> =&gt; 3, <span style="color: maroon">"c"</span> =&gt; 4];<br />
$<span style="color: peru">d1</span> = array_merge($<span style="color: peru">d1</span>, $<span style="color: peru">d2</span>);</td>
<td><span style="color: peru">d1</span> = {<span style="color: maroon">'a'</span>: 1, <span style="color: maroon">'b'</span>: 2}<br /><span style="color: peru">d2</span> = {<span style="color: maroon">'b'</span>: 3, <span style="color: maroon">'c'</span>: 4}<br />
d1.update(d2)</td>
<td>d1 = {<span style="color: maroon">"a"</span> =&gt; 1, <span style="color: maroon">"b"</span> =&gt; 2}<br />
d2 = {<span style="color: maroon">"b"</span> =&gt; 3, <span style="color: maroon">"c"</span> =&gt; 4}<br />
d1.merge!(d2)</td>
</tr><tr><td><a name="dict-invert" id="dict-invert"></a><a href="#dict-invert-note">invert</a></td>
<td>var to_num = {'t': 1, 'f': 0};<br />
var to_let = _.invert(to_num);</td>
<td>$<span style="color: peru">to_num</span> = [<span style="color: maroon">"t"</span> =&gt; 1, <span style="color: maroon">"f"</span> =&gt; 0];<br />
$<span style="color: peru">to_let</span> = array_flip($<span style="color: peru">to_num</span>);</td>
<td><span style="color: peru">to_num</span> = {<span style="color: maroon">'t</span>': 1, <span style="color: maroon">'f'</span>: 0}<br /><span style="color: gray"># dict comprehensions added in 2.7:</span><br /><span style="color: peru">to_let</span> = {v: k <span style="color: purple">for</span> k, v<br /><span style="white-space: pre-wrap;">  </span><span style="color: purple">in</span> to_num.items()}</td>
<td>to_num = {<span style="color: maroon">"t"</span> =&gt; 1, <span style="color: maroon">"f"</span> =&gt; 0}<br />
to_let = to_num.invert</td>
</tr><tr><td><a name="dict-iter" id="dict-iter"></a><a href="#dict-iter-note">iteration</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td>for (var k in d) {<br /><span style="white-space: pre-wrap;">  </span><span style="color: gray"><em>use k or d[k]</em></span><br />
}</td>
<td><span style="color: purple">foreach</span> ($<span style="color: peru">d</span> as $<span style="color: peru">k</span> =&gt; $<span style="color: peru">v</span>) {<br /><span style="white-space: pre-wrap;">  </span><span style="color: gray"><em>code</em></span><br />
}</td>
<td><span style="color: purple">for</span> k, v <span style="color: purple">in</span> d.iteritems():<br /><span style="white-space: pre-wrap;">  </span><span style="color: gray"><em>code</em></span><br /><br /><span style="color: gray"><em>Python 3:</em></span><br /><span style="color: purple">for</span> k, v <span style="color: purple">in</span> d.items():<br /><span style="white-space: pre-wrap;">  </span><span style="color: gray"><em>code</em></span></td>
<td>d.each <span style="color: purple">do</span> |k,v|<br /><span style="white-space: pre-wrap;">  </span><span style="color: gray"><em>code</em></span><br /><span style="color: purple">end</span></td>
</tr><tr><td><a name="dict-key-val" id="dict-key-val"></a><a href="#dict-key-val-note">keys and values as arrays</a></td>
<td>_.keys(d)<br />
_.values(d)</td>
<td>array_keys($<span style="color: peru">d</span>)<br />
array_values($<span style="color: peru">d</span>)</td>
<td>d.keys()<br />
d.values()<br /><br /><span style="color: gray"><em>Python 3:</em></span><br />
list(d.keys())<br />
list(d.values())</td>
<td>d.keys<br />
d.values</td>
</tr><tr><td><a name="dict-sort-values" id="dict-sort-values"></a><a href="#dict-sort-values-note">sort by values</a></td>
<td>function cmp2(a, b) {<br /><span style="white-space: pre-wrap;">  </span>if (a[1] &lt; b[1]) { return -1; }<br /><span style="white-space: pre-wrap;">  </span>if (a[1] &gt; b[1]) { return 1; }<br /><span style="white-space: pre-wrap;">  </span>return 0;<br />
}<br /><br />
for (p in _.pairs(d).sort(cmp2)) {<br /><span style="white-space: pre-wrap;">  </span>alert(p[0] + ": " + p[1]);<br />
}</td>
<td>asort($<span style="color: peru">d</span>);<br /><br /><span style="color: purple">foreach</span> ($<span style="color: peru">d</span> <span style="color: purple">as</span> $<span style="color: peru">k</span> =&gt; $<span style="color: peru">v</span>) {<br /><span style="white-space: pre-wrap;">  </span><span style="color: purple">print</span> <span style="color: maroon">"$k: $v\n"</span>;<br />
}</td>
<td><span style="color: purple">from</span> operator <span style="color: purple">import</span> itemgetter<br /><br /><span style="color: peru">pairs</span> = <span style="color: purple">sorted</span>(d.iteritems(),<br /><span style="white-space: pre-wrap;">  </span>key=itemgetter(1))<br /><br /><span style="color: purple">for</span> k, v <span style="color: purple">in</span> pairs:<br /><span style="white-space: pre-wrap;">  </span><span style="color: purple">print</span>(<span style="color: maroon">'{}: {}'</span>.format(k, v))</td>
<td>d.sort_by {|k, v| v}.each <span style="color: purple">do</span> |k, v|<br /><span style="white-space: pre-wrap;">  </span>puts <span style="color: maroon">"#{k}: #{v}"</span><br /><span style="color: purple">end</span></td>
</tr><tr><td><a name="dict-default-val" id="dict-default-val"></a><a href="#dict-default-val-note">default value, computed value</a></td>
<td><span style="color: gray"><em>none</em></span></td>
<td>$<span style="color: peru">counts</span> = [];<br />
$<span style="color: peru">counts</span>[<span style="color: maroon">'foo'</span>] += 1;<br /><br /><span style="color: gray"><em>extend</em> ArrayObject <em>for computed values and defaults other than zero or empty string.</em></span></td>
<td><span style="color: purple">from</span> collections <span style="color: purple">import</span> defaultdict<br /><br /><span style="color: peru">counts</span> = defaultdict(<span style="color: purple">lambda</span>: 0)<br />
counts[<span style="color: maroon">'foo'</span>] += 1<br /><br /><span style="color: purple">class</span> <span style="color: green">Factorial</span>(dict):<br /><span style="white-space: pre-wrap;">  </span><span style="color: purple">def</span> <span style="color: mediumblue"><span style="white-space: pre-wrap;">__missing__</span></span>(<span style="color: purple">self</span>, k):<br /><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span><span style="color: purple">if</span> k &gt; 1:<br /><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span><span style="color: purple">return</span> k * <span style="color: purple">self</span>[k-1]<br /><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span><span style="color: purple">else</span>:<br /><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span><span style="color: purple">return</span> 1<br /><br /><span style="color: peru">factorial</span> = Factorial()</td>
<td>counts = <span style="color: green">Hash</span>.new(0)<br />
counts[<span style="color: maroon">'foo'</span>] += 1<br /><br />
factorial = <span style="color: green">Hash</span>.new <span style="color: purple">do</span> |h,k|<br /><span style="white-space: pre-wrap;">  </span>k &gt; 1 ? k * h[k-1] : 1<br /><span style="color: purple">end</span></td>
</tr><tr><th colspan="5"><a name="functions" id="functions"></a><a href="#functions-note">functions</a></th>
</tr><tr><th></th>
<th>javascript</th>
<th>php</th>
<th>python</th>
<th>ruby</th>
</tr><tr><td><a name="def-func" id="def-func"></a><a href="#def-func-note">define function</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td>function add(x, y) {<br /><span style="white-space: pre-wrap;">  </span>return x+y;<br />
}</td>
<td><span style="color: purple">function</span> <span style="color: #0000cd">add3</span>($<span style="color: peru">x1</span>, $<span style="color: peru">x2</span>, $<span style="color: peru">x3</span>)<br />
{<br /><span style="white-space: pre-wrap;">  </span><span style="color: purple">return</span> $<span style="color: peru">x1</span> + $<span style="color: peru">x2</span> + $<span style="color: peru">x3</span>;<br />
}</td>
<td><span style="color: purple">def</span> <span style="color: #0000cd">add3</span>(x1, x2, x3):<br /><span style="white-space: pre-wrap;">  </span><span style="color: purple">return</span> x1 + x2 + x3</td>
<td><span style="color: purple">def</span> <span style="color: #0000cd">add3</span>(x1, x2, x3)<br /><span style="white-space: pre-wrap;">  </span>x1 + x2 + x3<br /><span style="color: purple">end</span><br /><br /><span style="color: gray"># parens are optional and customarily<br />
# omitted when defining functions<br />
# with no parameters</span></td>
</tr><tr><td><a name="invoke-func" id="invoke-func"></a><a href="#invoke-func-note">invoke function</a></td>
<td>add(1, 2)</td>
<td>add3(1, 2, 3);<br /><br /><span style="color: gray"># function names are case insensitive:</span><br />
ADD3(1, 2, 3);</td>
<td>add3(1, 2, 3)</td>
<td>add3(1, 2, 3)<br /><br /><span style="color: gray"># parens are optional:</span><br />
add3 1, 2, 3</td>
</tr><tr><td><a name="missing-arg" id="missing-arg"></a><a href="#missing-arg-note">missing argument behavior</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td><span style="color: gray"><em>set to</em> undefined</span></td>
<td><span style="color: gray"><em>set to</em> NULL <em>with warning</em></span></td>
<td><span style="color: gray"><em>raises</em> TypeError <em>if number of arguments doesn't match function arity</em></span></td>
<td><span style="color: gray"><em>raises</em> ArgumentError <em>if number of arguments doesn't match function arity</em></span></td>
</tr><tr><td><a name="default-arg" id="default-arg"></a><a href="#default-arg-note">default argument</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td><span style="color: gray"><em>none</em></span></td>
<td><span style="color: purple">function</span> <span style="color: mediumblue">my_log</span>($<span style="color: peru">x</span>, $<span style="color: peru">base</span>=10)<br />
{<br /><span style="white-space: pre-wrap;">  </span><span style="color: purple">return</span> log($<span style="color: peru">x</span>) / log($<span style="color: peru">base</span>);<br />
}<br /><br />
my_log(42);<br />
my_log(42, <span style="color: teal">M_E</span>);</td>
<td><span style="color: purple">import</span> math<br /><br /><span style="color: purple">def</span> <span style="color: mediumblue">my_log</span>(x, base=10):<br /><span style="white-space: pre-wrap;">  </span><span style="color: purple">return</span> math.log(x) / math.log(base)<br /><br />
my_log(42)<br />
my_log(42, math.e)</td>
<td><span style="color: purple">def</span> <span style="color: mediumblue">my_log</span>(x, base=10)<br /><span style="white-space: pre-wrap;">  </span><span style="color: green">Math</span>.log(x) / <span style="color: green">Math</span>.log(base)<br /><span style="color: purple">end</span><br /><br />
my_log(42)<br />
my_log(42, <span style="color: green">Math</span>::<span style="color: green">E</span>)</td>
</tr><tr><td><a name="variable-num-arg" id="variable-num-arg"></a><a href="#variable-num-arg-note">variable number of arguments</a></td>
<td><span style="color: gray"><em>args in</em></span> arguments[0], arguments[1], <span style="color: gray"><em>… with number of args in</em></span> arguments.length</td>
<td><span style="color: purple">function</span> <span style="color: mediumblue">first_and_last</span>()<br />
{<br /><br /><span style="white-space: pre-wrap;">  </span>$<span style="color: peru">arg_cnt</span> = func_num_args();<br /><br /><span style="white-space: pre-wrap;">  </span><span style="color: purple">if</span> ($<span style="color: peru">arg_cnt</span> &gt;= 1) {<br /><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span>$<span style="color: peru">n</span> = func_get_arg(0);<br /><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span><span style="color: purple">echo</span> <span style="color: maroon">"first: "</span> . $<span style="color: peru">n</span> . <span style="color: maroon">"\n"</span>;<br /><span style="white-space: pre-wrap;">  </span>}<br /><br /><span style="white-space: pre-wrap;">  </span><span style="color: purple">if</span> ($<span style="color: peru">arg_cnt</span> &gt;= 2) {<br /><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span>$<span style="color: peru">a</span> = func_get_args();<br /><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span>$<span style="color: peru">n</span> = $<span style="color: peru">a</span>[$<span style="color: peru">arg_cnt</span>-1];<br /><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span><span style="color: purple">echo</span> <span style="color: maroon">"last: "</span> . $<span style="color: peru">n</span> . <span style="color: maroon">"\n"</span>;<br /><span style="white-space: pre-wrap;">  </span>}<br />
}</td>
<td><span style="color: purple">def</span> <span style="color: mediumblue">first_and_last</span>(*a):<br /><br /><span style="white-space: pre-wrap;">  </span><span style="color: purple">if len</span>(a) &gt;= 1:<br /><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span><span style="color: purple">print</span>(<span style="color: maroon">'first: '</span> + <span style="color: purple">str</span>(a[0]))<br /><br /><span style="white-space: pre-wrap;">  </span><span style="color: purple">if len</span>(a) &gt;= 2:<br /><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span><span style="color: purple">print</span>(<span style="color: maroon">'last: '</span> + <span style="color: purple">str</span>(a[-1]))</td>
<td><span style="color: purple">def</span> <span style="color: mediumblue">first_and_last</span>(*a)<br /><br /><span style="white-space: pre-wrap;">  </span><span style="color: purple">if</span> a.size &gt;= 1<br /><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span>puts <span style="color: maroon">"first: #{a[0]}"</span><br /><span style="white-space: pre-wrap;">  </span><span style="color: purple">end</span><br /><br /><span style="white-space: pre-wrap;">  </span><span style="color: purple">if</span> a.size &gt;= 2<br /><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span>puts <span style="color: maroon">"last: #{a[-1]}"</span><br /><span style="white-space: pre-wrap;">  </span><span style="color: purple">end</span><br /><span style="color: purple">end</span></td>
</tr><tr><td><a name="apply-func" id="apply-func"></a><a href="#apply-func-note">pass array elements as separate arguments</a></td>
<td><span style="color: gray"><em>none</em></span></td>
<td>$<span style="color: peru">a</span> = [1, 2, 3];<br /><br />
call_user_func_array(<span style="color: maroon">"add3"</span>, $<span style="color: peru">a</span>);</td>
<td><span style="color: peru">a</span> = [2, 3]<br /><br />
add3(1, *a)<br /><br /><span style="color: gray"># splat operator can only be used once<br />
# and must appear after other<br />
# unnamed arguments</span></td>
<td>a = [2, 3]<br /><br />
add3(1, *a)<br /><br /><span style="color: gray"># splat operator can be used multiple<br />
# times and can appear before regular<br />
# arguments</span></td>
</tr><tr><td><a name="named-param" id="named-param"></a><a href="#named-param-note">named parameters</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td><span style="color: gray"><em>none</em></span></td>
<td><span style="color: gray"><em>none</em></span></td>
<td><span style="color: purple">def</span> <span style="color: mediumblue">fequal</span>(x, y, eps=0.01):<br /><span style="white-space: pre-wrap;">  </span><span style="color: purple">return abs</span>(x - y) &lt; eps<br /><br />
fequal(1.0, 1.001)<br />
fequal(1.0, 1.001, eps=0.1<span style="white-space: pre-wrap;">**</span>10)</td>
<td><span style="color: purple">def</span> <span style="color: mediumblue">fequal</span>(x, y, opts={})<br /><span style="white-space: pre-wrap;">  </span>eps = opts[<span style="color: teal">:eps</span>] <span style="white-space: pre-wrap;">||</span> 0.01<br /><span style="white-space: pre-wrap;">  </span>(x - y).abs &lt; eps<br /><span style="color: purple">end</span><br /><br />
fequal(1.0, 1.001)<br />
fequal(1.0, 1.001, <span style="color: teal">:eps</span>=&gt;0.1<span style="white-space: pre-wrap;">**</span>10)<br /><br /><span style="color: gray"># Ruby 2.0:</span><br /><span style="color: purple">def</span> <span style="color: mediumblue">fequals</span>(x, y, <span style="color: teal">eps</span>: 0.01)<br /><span style="white-space: pre-wrap;">  </span>(x - y).abs &lt; eps<br />
end<br /><br />
fequals(1.0, 1.001)<br />
fequals(1.0, 1.001, <span style="color: teal">eps</span>: 0.1**10)</td>
</tr><tr><td><a name="pass-num-str-by-ref" id="pass-num-str-by-ref"></a><a href="#pass-num-str-by-ref-note">pass number or string by reference</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td><span style="color: gray"><em>not possible</em></span></td>
<td><span style="color: purple">function</span> <span style="color: #0000cd">impure</span>(&amp;$<span style="color: peru">x</span>, &amp;$<span style="color: peru">y</span>)<br />
{<br /><span style="white-space: pre-wrap;">  </span>$<span style="color: peru">x</span> += 1;<br /><span style="white-space: pre-wrap;">  </span>$<span style="color: peru">y</span> .= <span style="color: maroon">"ly"</span>;<br />
}<br /><br />
$<span style="color: peru">n</span> = 7;<br />
$<span style="color: peru">s</span> = <span style="color: maroon">"hard"</span>;<br />
impure($<span style="color: peru">n</span>, $<span style="color: peru">s</span>);</td>
<td><span style="color: gray"><em>not possible</em></span></td>
<td><span style="color: gray"><em>not possible</em></span></td>
</tr><tr><td><a name="pass-array-dict-by-ref" id="pass-array-dict-by-ref"></a><a href="#pass-array-dict-by-ref-note">pass array or dictionary by reference</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td>function impure(x, y) {<br /><span style="white-space: pre-wrap;">  </span>x[2] = 5;<br /><span style="white-space: pre-wrap;">  </span>y["f"] = -1;<br />
}<br /><br />
var a = [1, 2, 3];<br />
var d = {"t": 1, "f": 0};<br />
impure(a, d);</td>
<td><span style="color: purple">function</span> <span style="color: #0000cd">impure</span>(&amp;$<span style="color: peru">x</span>, &amp;$<span style="color: peru">y</span>)<br />
{<br /><span style="white-space: pre-wrap;">  </span>$<span style="color: peru">x</span>[2] = 5;<br /><span style="white-space: pre-wrap;">  </span>$<span style="color: peru">y</span>[<span style="color: maroon">"f"</span>] = -1;<br />
}<br /><br />
$<span style="color: peru">a</span> = [1, 2, 3];<br />
$<span style="color: peru">d</span> = [<span style="color: maroon">"t"</span> =&gt; 1, <span style="color: maroon">"f"</span> =&gt; 0];<br />
impure($<span style="color: peru">a</span>, $<span style="color: peru">d</span>);</td>
<td><span style="color: purple">def</span> <span style="color: #0000cd">impure</span>(x, y):<br /><span style="white-space: pre-wrap;">  </span>x[2] = 5<br /><span style="white-space: pre-wrap;">  </span>y[<span style="color: maroon">'f'</span>] = -1<br /><br /><span style="color: peru">a</span> = [1, 2, 3]<br /><span style="color: peru">d</span> = {<span style="color: maroon">'t'</span>:1, <span style="color: maroon">'f'</span>:0}<br />
impure(a, d)</td>
<td><span style="color: purple">def</span> <span style="color: #0000cd">impure</span>(x, y)<br /><span style="white-space: pre-wrap;">  </span>x[2] = 5<br /><span style="white-space: pre-wrap;">  </span>y[<span style="color: maroon">"f"</span>] = -1<br />
end<br /><br />
a = [1, 2, 3]<br />
d = {<span style="color: maroon">"t"</span> =&gt; 1, <span style="color: maroon">"f"</span> =&gt; 0 }<br />
impure(a, d)</td>
</tr><tr><td><a name="retval" id="retval"></a><a href="#retval-note">return value</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td>return <span style="color: gray"><em>arg or</em></span> undefined. <span style="color: gray"><em>If invoked with</em></span> new <span style="color: gray"><em>and return value not an object, returns</em></span> this</td>
<td><span style="color: gray">return <em>arg or</em> NULL</span></td>
<td><span style="color: gray">return <em>arg or</em> None</span></td>
<td><span style="color: gray">return <em>arg or last expression evaluated</em></span></td>
</tr><tr><td><a name="multiple-retval" id="multiple-retval"></a><a href="#multiple-retval-note">multiple return values</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td><span style="color: gray"><em>none</em></span></td>
<td><span style="color: purple">function</span> <span style="color: #0000cd">first_and_second</span>(&amp;$<span style="color: peru">a</span>)<br />
{<br /><span style="white-space: pre-wrap;">  </span><span style="color: purple">return</span> [$<span style="color: peru">a</span>[0], $<span style="color: peru">a</span>[1]];<br />
}<br /><br />
$<span style="color: peru">a</span> = [1, 2, 3];<br />
list($<span style="color: peru">x</span>, $<span style="color: peru">y</span>) =<br /><span style="white-space: pre-wrap;">  </span>first_and_second($a);</td>
<td><span style="color: purple">def</span> <span style="color: #0000cd">first_and_second</span>(a):<br /><span style="white-space: pre-wrap;">  </span><span style="color: purple">return</span> a[0], a[1]<br /><br /><span style="color: peru">x</span>, <span style="color: peru">y</span> = first_and_second([1,2,3])</td>
<td><span style="color: purple">def</span> <span style="color: #0000cd">first_and_second</span>(a)<br /><span style="white-space: pre-wrap;">  </span><span style="color: purple">return</span> a[0], a[1]<br /><span style="color: purple">end</span><br /><br />
x, y = first_and_second([1,2,3])</td>
</tr><tr><td><a name="lambda" id="lambda"></a><a href="#lambda-note">lambda declaration</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td>var sqr = function(x) { return x*x; }</td>
<td>$<span style="color: peru">sqr</span> = function ($<span style="color: peru">x</span>) {<br /><span style="white-space: pre-wrap;">  </span>return $<span style="color: peru">x</span> * $<span style="color: peru">x</span>;<br />
};</td>
<td><span style="color: gray"># body must be an expression:</span><br /><span style="color: peru">sqr</span> = <span style="color: purple">lambda</span> x: x * x</td>
<td>sqr = lambda { |x| x * x }</td>
</tr><tr><td><a href="#lambda-note">lambda invocation</a></td>
<td>sqr(2)</td>
<td>$<span style="color: peru">sqr</span>(2)</td>
<td>sqr(2)</td>
<td>sqr.call(2) <span style="color: gray"><em>or</em></span><br />
sqr[2]</td>
</tr><tr><td><a name="func-as-val" id="func-as-val"></a><a href="#func-as-val-note">function as value</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td>var func = add;</td>
<td>$<span style="color: peru">func</span> = <span style="color: maroon">"add"</span>;</td>
<td><span style="color: peru">func</span> = add</td>
<td>func = lambda {|*args| add(*args)}</td>
</tr><tr><td><a name="private-state-func" id="private-state-func"></a><a href="#private-state-func-note">function with private state</a></td>
<td>function counter() {<br /><span style="white-space: pre-wrap;">  </span>counter.i += 1;<br /><span style="white-space: pre-wrap;">  </span>return counter.i;<br />
}<br /><br />
counter.i = 0;<br />
alert(counter());</td>
<td><span style="color: purple">function</span> <span style="color: #0000cd">counter</span>()<br />
{<br /><span style="white-space: pre-wrap;">  </span><span style="color: purple">static</span> $<span style="color: peru">i</span> = 0;<br /><span style="white-space: pre-wrap;">  </span><span style="color: purple">return</span> ++$<span style="color: peru">i</span>;<br />
}<br /><br /><span style="color: purple">echo</span> counter();</td>
<td><span style="color: gray"># state not private:</span><br /><span style="color: purple">def</span> <span style="color: #0000cd">counter</span>():<br /><span style="white-space: pre-wrap;">  </span>counter.i += 1<br /><span style="white-space: pre-wrap;">  </span><span style="color: purple">return</span> counter.i<br /><br />
counter.i = 0<br /><span style="color: purple">print</span>(counter())</td>
<td><span style="color: gray"><em>none</em></span></td>
</tr><tr><td><a name="closure" id="closure"></a><a href="#closure-note">closure</a></td>
<td>function make_counter() {<br /><span style="white-space: pre-wrap;">  </span>var i = 0;<br /><br /><span style="white-space: pre-wrap;">  </span>return function() {<br /><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span>i += 1;<br /><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span>return i;<br /><span style="white-space: pre-wrap;">  </span>}<br />
}</td>
<td><span style="color: purple">function</span> <span style="color: #0000cd">make_counter()</span><br />
{<br /><span style="white-space: pre-wrap;">  </span>$<span style="color: peru">i</span> = 0;<br /><span style="white-space: pre-wrap;">  </span><span style="color: purple">return</span> function () use (&amp;$<span style="color: peru">i</span>) {<br /><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span><span style="color: purple">return</span> ++$<span style="color: peru">i</span>;<br /><span style="white-space: pre-wrap;">  </span>};<br />
}<br /><br />
$<span style="color: peru">nays</span> = make_counter();<br /><span style="color: purple">echo</span> $<span style="color: peru">nays</span>();</td>
<td><span style="color: gray"># Python 3:</span><br /><span style="color: purple">def</span> <span style="color: #0000cd">make_counter</span>():<br /><span style="white-space: pre-wrap;">  </span>i = 0<br /><span style="white-space: pre-wrap;">  </span><span style="color: purple">def</span> <span style="color: #0000cd">counter</span>():<br /><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span>nonlocal i<br /><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span>i += 1<br /><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span><span style="color: purple">return</span> i<br /><span style="white-space: pre-wrap;">  </span><span style="color: purple">return</span> counter<br /><br />
nays = make_counter()</td>
<td><span style="color: purple">def</span> <span style="color: #0000cd">make_counter</span><br /><span style="white-space: pre-wrap;">  </span>i = 0<br /><span style="white-space: pre-wrap;">  </span><span style="color: purple">return</span> lambda { i +=1; i }<br /><span style="color: purple">end</span><br /><br />
nays = make_counter<br />
puts nays.call</td>
</tr><tr><td><a name="generator" id="generator"></a><a href="#generator-note">generator</a></td>
<td></td>
<td><span style="color: gray"># PHP 5.5:</span><br /><span style="color: purple">function</span> <span style="color: mediumblue">make_counter</span>() {<br /><span style="white-space: pre-wrap;">  </span>$<span style="color: peru">i</span> = 0;<br /><span style="white-space: pre-wrap;">  </span><span style="color: purple">while</span> (1) {<br /><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span><span style="color: purple">yield</span> ++$<span style="color: peru">i</span>;<br /><span style="white-space: pre-wrap;">  </span>}<br />
}<br /><br />
$<span style="color: peru">nays</span> = make_counter();<br /><span style="color: gray"># does not return a value:</span><br />
$<span style="color: peru">nays</span>-&gt;next();<br /><span style="color: gray"># runs generator if generator has not<br />
# yet yielded:</span><br /><span style="color: purple">echo</span> $<span style="color: peru">nays</span>-&gt;current();</td>
<td><span style="color: gray"># The itertools library contains<br />
# standard generators.<br />
# c.f. itertools.count()</span><br /><br /><span style="color: purple">def</span> <span style="color: #0000cd">make_counter</span>():<br /><span style="white-space: pre-wrap;">  </span>i = 0<br /><span style="white-space: pre-wrap;">  </span><span style="color: purple">while True</span>:<br /><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span>i += 1<br /><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span><span style="color: purple">yield</span> i<br /><br /><span style="color: peru">nays</span> = make_counter()<br /><span style="color: purple">print</span>(nays.next())</td>
<td><span style="color: purple">def</span> <span style="color: #0000cd">make_counter</span><br /><span style="white-space: pre-wrap;">  </span><span style="color: purple">return</span> <span style="color: green">Fiber</span>.new <span style="color: purple">do</span><br /><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span>i = 0<br /><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span><span style="color: purple">while</span> <span style="color: peru">true</span><br /><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span>i += 1<br /><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span><span style="color: green">Fiber</span>.yield i<br /><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span><span style="color: purple">end</span><br /><span style="white-space: pre-wrap;">  </span><span style="color: purple">end</span><br /><span style="color: purple">end</span><br /><br />
nays = make_counter<br />
puts nays.resume</td>
</tr><tr><td><a name="decorator" id="decorator"></a><a href="#decorator-note">decorator</a></td>
<td></td>
<td></td>
<td><span style="color: purple">def</span> <span style="color: mediumblue">logcall</span>(f):<br /><span style="white-space: pre-wrap;">  </span><span style="color: purple">def</span> <span style="color: mediumblue">wrapper</span>(*a, **opts):<br /><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span><span style="color: purple">print</span>(<span style="color: maroon">'calling '</span> + f.<span style="white-space: pre-wrap;">__name__</span>)<br /><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span>f(*a, **opts)<br /><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span><span style="color: purple">print</span>(<span style="color: maroon">'called '</span> + f.<span style="white-space: pre-wrap;">__name__</span>)<br /><span style="white-space: pre-wrap;">  </span><span style="color: purple">return</span> wrapper<br /><br /><span style="color: green">@logcall</span><br /><span style="color: purple">def</span> <span style="color: mediumblue">square</span>(x):<br /><span style="white-space: pre-wrap;">  </span><span style="color: purple">return</span> x * x</td>
<td></td>
</tr><tr><td><a name="op-as-func" id="op-as-func"></a><a href="#op-as-func-note">operator as function</a></td>
<td></td>
<td></td>
<td><span style="color: purple">import</span> operator<br /><br />
operator.mul(3, 7)<br /><br /><span style="color: peru">a</span> = [<span style="color: maroon">'foo'</span>, <span style="color: maroon">'bar'</span>, <span style="color: maroon">'baz'</span>]<br />
operator.itemgetter(2)(a)</td>
<td>3.*(7)<br /><br />
a = [<span style="color: maroon">'foo'</span>, <span style="color: maroon">'bar'</span>, <span style="color: maroon">'baz'</span>]<br />
a.[](2)</td>
</tr><tr><th colspan="5"><a name="execution-control" id="execution-control"></a><a href="#execution-control-note">execution control</a></th>
</tr><tr><th></th>
<th>javascript</th>
<th>php</th>
<th>python</th>
<th>ruby</th>
</tr><tr><td><a name="if" id="if"></a><a href="#if-note">if</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td>if (0 == n) {<br /><span style="white-space: pre-wrap;">  </span>alert("no hits");<br />
} else if (1 == n) {<br /><span style="white-space: pre-wrap;">  </span>alert("1 hit");<br />
} else {<br /><span style="white-space: pre-wrap;">  </span>alert(n + " hits");<br />
}</td>
<td><span style="color: purple">if</span> ( 0 == $<span style="color: peru">n</span> ) {<br /><span style="white-space: pre-wrap;">  </span><span style="color: purple">echo</span> <span style="color: maroon">"no hits\n"</span>;<br />
} <span style="color: purple">elseif</span> ( 1 == $<span style="color: peru">n</span> ) {<br /><span style="white-space: pre-wrap;">  </span><span style="color: purple">echo</span> <span style="color: maroon">"one hit\n"</span>;<br />
} <span style="color: purple">else</span> {<br /><span style="white-space: pre-wrap;">  </span><span style="color: purple">echo</span> <span style="color: maroon">"$n hits\n"</span>;<br />
}</td>
<td><span style="color: purple">if</span> 0 == n:<br /><span style="white-space: pre-wrap;">  </span><span style="color: purple">print</span>(<span style="color: maroon">'no hits'</span>)<br /><span style="color: purple">elif</span> 1 == n:<br /><span style="white-space: pre-wrap;">  </span><span style="color: purple">print</span>(<span style="color: maroon">'one hit'</span>)<br /><span style="color: purple">else</span>:<br /><span style="white-space: pre-wrap;">  </span><span style="color: purple">print</span>(<span style="color: purple">str</span>(n) + <span style="color: maroon">' hits'</span>)</td>
<td><span style="color: purple">if</span> n == 0<br /><span style="white-space: pre-wrap;">  </span>puts <span style="color: maroon">"no hits"</span><br /><span style="color: purple">elsif</span> 1 == n<br /><span style="white-space: pre-wrap;">  </span>puts <span style="color: maroon">"one hit"</span><br /><span style="color: purple">else</span><br /><span style="white-space: pre-wrap;">  </span>puts <span style="color: maroon">"</span><span style="color: peru">#{n}</span> <span style="color: maroon">hits"</span><br /><span style="color: purple">end</span></td>
</tr><tr><td><a name="switch" id="switch"></a><a href="#switch-note">switch</a></td>
<td>switch (n) {<br />
case 0:<br /><span style="white-space: pre-wrap;">  </span>alert("no hits\n");<br /><span style="white-space: pre-wrap;">  </span>break;<br />
case 1:<br /><span style="white-space: pre-wrap;">  </span>alert("one hit\n");<br /><span style="white-space: pre-wrap;">  </span>break;<br />
default:<br /><span style="white-space: pre-wrap;">  </span>alert(3 + " hits\n");<br />
}</td>
<td><span style="color: purple">switch</span> ($<span style="color: peru">n</span>) {<br /><span style="color: purple">case</span> <span style="color: green">0</span>:<br /><span style="white-space: pre-wrap;">  </span><span style="color: purple">echo</span> <span style="color: maroon">"no hits\n"</span>;<br /><span style="white-space: pre-wrap;">  </span><span style="color: purple">break</span>;<br /><span style="color: purple">case</span> <span style="color: green">1</span>:<br /><span style="white-space: pre-wrap;">  </span><span style="color: purple">echo</span> <span style="color: maroon">"one hit\n"</span>;<br /><span style="white-space: pre-wrap;">  </span><span style="color: purple">break</span>;<br /><span style="color: purple">default</span>:<br /><span style="white-space: pre-wrap;">  </span><span style="color: purple">echo</span> <span style="color: maroon">"$n hits\n"</span>;<br />
}</td>
<td><span style="color: gray"><em>none</em></span></td>
<td><span style="color: purple">case</span> n<br /><span style="color: purple">when</span> 0<br /><span style="white-space: pre-wrap;">  </span>puts <span style="color: maroon">"no hits"</span><br /><span style="color: purple">when</span> 1<br /><span style="white-space: pre-wrap;">  </span>puts <span style="color: maroon">"one hit"</span><br /><span style="color: purple">else</span><br /><span style="white-space: pre-wrap;">  </span>puts <span style="color: maroon">"#{n} hits"</span><br /><span style="color: purple">end</span></td>
</tr><tr><td><a name="while" id="while"></a><a href="#while-note">while</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td>while (i &lt; 100) {<br /><span style="white-space: pre-wrap;">  </span>i += 1;<br />
}</td>
<td><span style="color: purple">while</span> ( $<span style="color: peru">i</span> &lt; 100 ) { $<span style="color: peru">i</span>++; }</td>
<td><span style="color: purple">while</span> i &lt; 100:<br /><span style="white-space: pre-wrap;">  </span>i += 1</td>
<td><span style="color: purple">while</span> i &lt; 100 <span style="color: purple">do</span><br /><span style="white-space: pre-wrap;">  </span>i += 1<br /><span style="color: purple">end</span></td>
</tr><tr><td><a name="for" id="for"></a><a href="#for-note">c-style for</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td>for (var i = 0; i &lt; 10; i++) {<br /><span style="white-space: pre-wrap;">  </span>alert(i);<br />
}</td>
<td><span style="color: purple">for</span> ($<span style="color: peru">i</span> = 1; $<span style="color: peru">i</span> &lt;= 10; $<span style="color: peru">i</span>++) {<br /><span style="white-space: pre-wrap;">  </span><span style="color: purple">echo</span> <span style="color: maroon">"$i\n"</span>;<br />
}</td>
<td><span style="color: gray"><em>none</em></span></td>
<td><span style="color: gray"><em>none</em></span></td>
</tr><tr><td><a name="break-continue" id="break-continue"></a><a href="#break-continue-note">break, continue, redo</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td>break continue <span style="color: gray"><em>none</em></span></td>
<td><span style="color: purple">break continue</span> <span style="color: gray"><em>none</em></span></td>
<td><span style="color: purple">break continue</span> <span style="color: gray"><em>none</em></span></td>
<td><span style="color: purple">break next redo</span></td>
</tr><tr><td><a name="control-keywords" id="control-keywords"></a><a href="#control-keywords-note">control structure keywords</a></td>
<td>case catch debugger default do else finally for if switch throw try while</td>
<td><span style="color: purple">case default do else elseif for foreach goto if switch while</span></td>
<td><span style="color: purple">elif else for if while</span></td>
<td><span style="color: purple">case do else elsif end for loop when while unless until</span></td>
</tr><tr><td><a name="do" id="do"></a><a href="#do-note">what do does</a></td>
<td><span style="color: gray"><em>starts body of a</em> do-while <em>loop, a loop which checks the condition after the body is executed</em></span></td>
<td><span style="color: gray"><em>starts body of a</em> do-while <em>loop, a loop which checks the condition after the body is executed</em></span></td>
<td><span style="color: gray"><em>raises</em> NameError <em>unless a value was assigned to it</em></span></td>
<td><span style="color: gray"><em>starts an anonymous block. Also starts the body of a</em> loop, while, <em>or</em> until <em>loop</em></span></td>
</tr><tr><td><a name="statement-modifiers" id="statement-modifiers"></a><a href="#statement-modifiers-note">statement modifiers</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td><span style="color: gray"><em>none</em></span></td>
<td><span style="color: gray"><em>none</em></span></td>
<td><span style="color: gray"><em>none</em></span></td>
<td>puts <span style="color: maroon">"positive"</span> <span style="color: purple">if</span> i &gt; 0<br />
puts <span style="color: maroon">"nonzero"</span> <span style="color: purple">unless</span> i == 0</td>
</tr><tr><th colspan="5"><a name="exceptions" id="exceptions"></a><a href="#exceptions-note">exceptions</a></th>
</tr><tr><th></th>
<th>javascript</th>
<th>php</th>
<th>python</th>
<th>ruby</th>
</tr><tr><td><a name="base-exc" id="base-exc"></a><a href="#base-exc-note">base exception</a></td>
<td><span style="color: gray"><em>Any value can be thrown.</em></span></td>
<td>Exception</td>
<td>BaseException<br /><br /><span style="color: gray"><em>User-defined exceptions should subclass</em> Exception.</span><br /><br /><span style="color: gray"><em>In Python 2 old-style classes can be thrown.</em></span></td>
<td>Exception<br /><br /><span style="color: gray"><em>User-defined exceptions should subclass</em> StandardError.</span></td>
</tr><tr><td><a name="predefined-exc" id="predefined-exc"></a><a href="#predefined-exc-note">predefined exceptions</a></td>
<td>Error<br /><span style="white-space: pre-wrap;">  </span>EvalError<br /><span style="white-space: pre-wrap;">  </span>RangeError<br /><span style="white-space: pre-wrap;">  </span>ReferenceError<br /><span style="white-space: pre-wrap;">  </span>SyntaxError<br /><span style="white-space: pre-wrap;">  </span>TypeError<br /><span style="white-space: pre-wrap;">  </span>URIError</td>
<td>Exception<br /><span style="white-space: pre-wrap;">  </span>LogicException<br /><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span>BadFunctionCallException<br /><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span>BadMethodCallException<br /><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span>DomainException<br /><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span>InvalidArgumentException<br /><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span>LengthException<br /><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span>OutOfRangeException<br /><span style="white-space: pre-wrap;">  </span>RuntimeException<br /><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span>OutOfBoundsException<br /><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span>OverflowException<br /><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span>RangeException<br /><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span>UnderflowException<br /><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span>UnexpectedValueException</td>
<td>BaseException<br /><span style="white-space: pre-wrap;">  </span>SystemExit<br /><span style="white-space: pre-wrap;">  </span>KeyboardInterrupt<br /><span style="white-space: pre-wrap;">  </span>GeneratorExit<br /><span style="white-space: pre-wrap;">  </span>Exception<br /><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span>StopIteration<br /><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span>StandardError<br /><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span>BufferError<br /><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span>ArithmeticError<br /><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span>FloatingPointError<br /><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span>OverflowError<br /><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span>ZeroDivisionError<br /><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span>AssertionError<br /><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span>AttributeError<br /><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span>EnvironmentError<br /><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span> EOFError<br /><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span>ImportError<br /><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span>LookupError<br /><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span>IndexError<br /><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span>KeyError<br /><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span>MemoryError<br /><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span>NameError<br /><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span>ReferenceError<br /><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span>RuntimeError<br /><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span>NotImplementedError<br /><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span>SyntaxError<br /><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span>SystemError<br /><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span>TypeError<br /><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span>ValueError<br /><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span>UnicodeError<br /><br /><span style="color: gray"><em>Python 3 has a different tree</em></span></td>
<td>Exception<br /><span style="white-space: pre-wrap;">  </span>NoMemoryError<br /><span style="white-space: pre-wrap;">  </span>ScriptError<br /><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span>LoadError<br /><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span>NotImplementedError<br /><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span>SyntaxError<br /><span style="white-space: pre-wrap;">  </span>SignalException<br /><span style="white-space: pre-wrap;">  </span>StandardError<br /><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span>ArgumentError<br /><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span>IOError<br /><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span>EOFError<br /><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span>IndexError<br /><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span>LocalJumpError<br /><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span>NameError<br /><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span>RangeError<br /><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span>RegexpError<br /><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span>RuntimeError<br /><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span>SecurityError<br /><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span>SocketError<br /><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span>SystemCallError<br /><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span>Errno::*<br /><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span>SystemStackError<br /><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span>ThreadError<br /><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span>TypeError<br /><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span>ZeroDivisionError<br /><span style="white-space: pre-wrap;">  </span>SystemExit<br /><span style="white-space: pre-wrap;">  </span>fatal</td>
</tr><tr><td><a name="raise-exc" id="raise-exc"></a><a href="#raise-exc-note">raise exception</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td>throw new Error("bad arg");</td>
<td><span style="color: purple">throw new</span> <span style="color: green">Exception</span>(<span style="color: maroon">"bad arg"</span>);</td>
<td><span style="color: purple">raise</span> <span style="color: green">Exception</span>(<span style="color: maroon">'bad arg'</span>)</td>
<td><span style="color: gray"># raises RuntimeError</span><br /><span style="color: purple">raise</span> <span style="color: maroon">"bad arg"</span></td>
</tr><tr><td><a name="catch-exc" id="catch-exc"></a><a href="#catch-exc-note">catch exception</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td>try {<br /><span style="white-space: pre-wrap;">  </span>risky();<br />
}<br />
catch (e) {<br /><span style="white-space: pre-wrap;">  </span>alert("risky failed: " + e.message);<br />
}</td>
<td><span style="color: purple">try</span> {<br /><span style="white-space: pre-wrap;">  </span>risky();<br />
} <span style="color: purple">catch</span> (<span style="color: green">Exception</span> $<span style="color: peru">e</span>) {<br /><span style="white-space: pre-wrap;">  </span><span style="color: purple">echo</span> <span style="color: maroon">"risky failed: "</span>,<br /><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span>$<span style="color: peru">e</span>-&gt;getMessage(), <span style="color: maroon">"\n"</span>;<br />
}</td>
<td><span style="color: purple">try</span>:<br /><span style="white-space: pre-wrap;">  </span>risky()<br /><span style="color: purple">except</span>:<br /><span style="white-space: pre-wrap;">  </span><span style="color: purple">print</span>(<span style="color: maroon">'risky failed'</span>)</td>
<td><span style="color: gray"># catches StandardError</span><br /><span style="color: purple">begin</span><br /><span style="white-space: pre-wrap;">  </span>risky<br /><span style="color: purple">rescue</span><br /><span style="white-space: pre-wrap;">  </span>print <span style="color: maroon">"risky failed: "</span><br /><span style="white-space: pre-wrap;">  </span>puts <span style="color: peru">$!</span>.message<br /><span style="color: purple">end</span></td>
</tr><tr><td><a name="re-raise-exc" id="re-raise-exc"></a><a href="#re-raise-exc-note">re-raise exception</a></td>
<td>try {<br /><span style="white-space: pre-wrap;">  </span>throw new Error("bam!");<br />
}<br />
catch (e) {<br /><span style="white-space: pre-wrap;">  </span>alert("re-raising<span style="white-space: pre-wrap;">...</span>");<br /><span style="white-space: pre-wrap;">  </span>throw e;<br />
}</td>
<td></td>
<td><span style="color: purple">try</span>:<br /><span style="white-space: pre-wrap;">  </span><span style="color: purple">raise</span> <span style="color: green">Exception</span>(<span style="color: maroon">'bam!'</span>)<br /><span style="color: purple">except</span>:<br /><span style="white-space: pre-wrap;">  </span><span style="color: purple">print</span>(<span style="color: maroon">'re-raising<span style="white-space: pre-wrap;">...</span>'</span>)<br /><span style="white-space: pre-wrap;">  </span><span style="color: purple">raise</span></td>
<td><span style="color: purple">begin</span><br /><span style="white-space: pre-wrap;">  </span><span style="color: purple">raise</span> <span style="color: maroon">"bam!"</span><br /><span style="color: purple">rescue</span><br /><span style="white-space: pre-wrap;">  </span>puts <span style="color: maroon">"re-raising…"</span><br /><span style="white-space: pre-wrap;">  </span><span style="color: purple">raise</span><br /><span style="color: purple">end</span></td>
</tr><tr><td><a name="last-exc-global" id="last-exc-global"></a><a href="#last-exc-global-note">global variable for last exception</a></td>
<td><span style="color: gray"><em>none</em></span></td>
<td><span style="color: gray"><em>none</em></span></td>
<td><span style="color: gray"><em>last exception:</em> sys.exc_info()[1]</span></td>
<td><span style="color: gray"><em>last exception:</em> $!</span><br /><span style="color: gray"><em>backtrace array of exc.:</em> $@</span><br /><span style="color: gray"><em>exit status of child:</em> $?</span></td>
</tr><tr><td><a name="def-exc" id="def-exc"></a><a href="#def-exc-note">define exception</a></td>
<td>function Bam(msg) {<br /><span style="white-space: pre-wrap;">  </span>this.message = msg;<br />
}<br /><br />
Bam.prototype = new Error;</td>
<td><span style="color: purple">class</span> <span style="color: green">Bam</span> <span style="color: purple">extends</span> <span style="color: green">Exception</span><br />
{<br /><span style="white-space: pre-wrap;">  </span><span style="color: purple">function</span> <span style="color: #0000cd"><span style="white-space: pre-wrap;">__</span>construct</span>()<br /><span style="white-space: pre-wrap;">  </span>{<br /><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span><span style="color: teal">parent</span>::<span style="white-space: pre-wrap;">__</span>construct(<span style="color: maroon">"bam!"</span>);<br /><span style="white-space: pre-wrap;">  </span>}<br />
}</td>
<td><span style="color: purple">class</span> <span style="color: green">Bam</span>(<span style="color: green">Exception</span>):<br /><span style="white-space: pre-wrap;">  </span><span style="color: purple">def</span> <span style="color: #0000cd"><span style="white-space: pre-wrap;">__init__</span></span>(<span style="color: purple">self</span>):<br /><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span><span style="color: purple">super</span>(Bam, <span style="color: purple">self</span>).<span style="white-space: pre-wrap;">__init__</span>(<span style="color: maroon">'bam!'</span>)</td>
<td><span style="color: purple">class</span> <span style="color: green">Bam</span> &lt; <span style="color: green">Exception</span><br /><span style="white-space: pre-wrap;">  </span><span style="color: purple">def</span> initialize<br /><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span><span style="color: purple">super</span>(<span style="color: maroon">"bam!"</span>)<br /><span style="white-space: pre-wrap;">  </span><span style="color: purple">end</span><br /><span style="color: purple">end</span></td>
</tr><tr><td><a name="name-exc" id="name-exc"></a><a href="#name-exc-note">catch exception by type</a></td>
<td>try {<br /><span style="white-space: pre-wrap;">  </span>throw new Bam("bam!");<br />
}<br />
catch (e) {<br /><span style="white-space: pre-wrap;">  </span>if (e instanceof Bam) {<br /><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span>alert(e.message);<br /><span style="white-space: pre-wrap;">  </span>}<br /><span style="white-space: pre-wrap;">  </span>else {<br /><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span>throw e;<br /><span style="white-space: pre-wrap;">  </span>}<br />
}</td>
<td><span style="color: purple">try</span> {<br /><span style="white-space: pre-wrap;">  </span><span style="color: purple">throw new</span> <span style="color: green">Bam</span>;<br />
} <span style="color: purple">catch</span> (<span style="color: green">Bam</span> $<span style="color: peru">e</span>) {<br /><span style="white-space: pre-wrap;">  </span><span style="color: purple">echo</span> $<span style="color: peru">e</span>-&gt;getMessage(), <span style="color: maroon">"\n"</span>;<br />
}</td>
<td><span style="color: purple">try</span>:<br /><span style="white-space: pre-wrap;">  </span><span style="color: purple">raise</span> Bam()<br /><span style="color: purple">except</span> Bam <span style="color: purple">as</span> e:<br /><span style="white-space: pre-wrap;">  </span><span style="color: purple">print</span>(e)</td>
<td><span style="color: purple">begin</span><br /><span style="white-space: pre-wrap;">  </span><span style="color: purple">raise</span> <span style="color: green">Bam</span>.new<br /><span style="color: purple">rescue</span> <span style="color: green">Bam</span> =&gt; e<br /><span style="white-space: pre-wrap;">  </span>puts e.message<br /><span style="color: purple">end</span></td>
</tr><tr><td><a name="finally-ensure" id="finally-ensure"></a><a href="#finally-ensure-note">finally/ensure</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td>acquire_resource();<br />
try {<br /><span style="white-space: pre-wrap;">  </span>risky();<br />
}<br />
finally {<br /><span style="white-space: pre-wrap;">  </span>release_resource();<br />
}</td>
<td><span style="color: gray"><em>PHP 5.5:</em></span><br />
acquire_resource();<br />
try {<br /><span style="white-space: pre-wrap;">  </span>risky();<br />
}<br />
finally {<br /><span style="white-space: pre-wrap;">  </span>release_resource();<br />
}</td>
<td>acquire_resource()<br /><span style="color: purple">try</span>:<br /><span style="white-space: pre-wrap;">  </span>risky()<br /><span style="color: purple">finally</span>:<br /><span style="white-space: pre-wrap;">  </span>release_resource()</td>
<td>acquire_resource<br /><span style="color: purple">begin</span><br /><span style="white-space: pre-wrap;">  </span>risky<br /><span style="color: purple">ensure</span><br /><span style="white-space: pre-wrap;">  </span>release_resource<br /><span style="color: purple">end</span></td>
</tr><tr><th colspan="5"><a name="concurrency" id="concurrency"></a><a href="#concurrency-note">concurrency</a></th>
</tr><tr><th></th>
<th>javascript</th>
<th>php</th>
<th>python</th>
<th>ruby</th>
</tr><tr><td><a name="start-thread" id="start-thread"></a><a href="#start-thread-note">start thread</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td></td>
<td><span style="color: gray"><em>none</em></span></td>
<td><span style="color: purple">class</span> <span style="color: green">sleep10</span>(threading.Thread):<br /><span style="white-space: pre-wrap;">  </span><span style="color: purple">def</span> <span style="color: #0000cd">run</span>(<span style="color: purple">self</span>):<br /><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span>time.sleep(10)<br /><br /><span style="color: peru">thr</span> = sleep10()<br />
thr.start()</td>
<td>thr = <span style="color: green">Thread</span>.new { sleep 10 }</td>
</tr><tr><td><a name="wait-on-thread" id="wait-on-thread"></a><a href="#wait-on-thread-note">wait on thread</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td></td>
<td></td>
<td>thr.join()</td>
<td>thr.join</td>
</tr><tr><th></th>
<th><span style="color: #efefef"><span style="white-space: pre-wrap;">____________________________________________</span></span></th>
<th><span style="color: #efefef"><span style="white-space: pre-wrap;">____________________________________________</span></span></th>
<th><span style="color: #efefef"><span style="white-space: pre-wrap;">_____________________________________________</span></span></th>
<th><span style="color: #efefef"><span style="white-space: pre-wrap;">_____________________________________________</span></span></th>
</tr></table><p><strong><a href="/scripting2">sheet two</a>:</strong> <a href="/scripting2#file-handles">file handles</a> | <a href="/scripting2#file">files</a> | <a href="/scripting2#directories">directories</a> | <a href="/scripting2#processes-environment">processes and environment</a> | <a href="/scripting2#option-parsing">option parsing</a> | <a href="/scripting2#libraries-namespaces">libraries and namespaces</a> | <a href="/scripting2#objects">objects</a> | <a href="/scripting2#polymorphism">polymorphism</a> | <a href="/scripting2#reflection">reflection</a> | <a href="/scripting2#net-web">net and web</a> | <a href="/scripting2#unit-tests">unit tests</a> | <a href="/scripting2#debugging-profiling">debugging and profiling</a> | <a href="/scripting2#deployment">deployment</a></p>
<p><a name="general-note" id="general-note"></a></p>
<h1 id="toc0"><span><a href="#general">General</a></span></h1>
<p><a name="version-used-note" id="version-used-note"></a></p>
<h2 id="toc1"><span><a href="#version-used">versions used</a></span></h2>
<p>The versions used for testing code in the reference sheet.</p>
<p><a name="version-note" id="version-note"></a></p>
<h2 id="toc2"><span><a href="#version">show version</a></span></h2>
<p>How to get the version.</p>
<p><strong>php:</strong></p>
<p>The function <tt>phpversion()</tt> will return the version number as a string.</p>
<p><strong>python:</strong></p>
<p>The following function will return the version number as a string:</p>
<div class="code">
<pre>
<code>import platform

platform.python_version()</code>
</pre></div>
<p><strong>ruby:</strong></p>
<p>Also available in the global constant <tt>RUBY_VERSION</tt>.</p>
<p><a name="implicit-prologue-note" id="implicit-prologue-note"></a></p>
<h2 id="toc3"><span><a href="#implicit-prologue">implicit prologue</a></span></h2>
<p>Code which examples in the sheet assume to have already been executed.</p>
<p><strong>javascript:</strong></p>
<p><tt>underscore.js</tt> adds some convenience functions as attributes of an object which is normally stored in the underscore <tt>_</tt> variable. E.g.:</p>
<div class="code">
<pre>
<code>_.map([1, 2, 3], function(n){ return n * n; });</code>
</pre></div>
<p><a href="http://cdnjs.com/libraries/underscore.js">cdnjs</a> hosts underscore.js and other JavaScript libraries for situations where it is inconvenient to have the webserver host the libraries.</p>
<p>When using <tt>underscore.js</tt> with the Node REPL, there is a conflict, since the Node REPL uses the underscore <tt>_</tt> variable to store the result of the last evaluation.</p>
<div class="code">
<pre>
<code>$ npm install underscore

$ node

&gt; var us = require('underscore'); _

&gt; us.keys({"one": 1, "two": 2});
[ 'one', 'two' ]</code>
</pre></div>
<p><strong>python:</strong></p>
<p>We assume that <tt>os</tt>, <tt>re</tt>, and <tt>sys</tt> are always imported.</p>
<p><a name="grammar-invocation-note" id="grammar-invocation-note"></a></p>
<h1 id="toc4"><span><a href="#grammar-invocation">Grammar and Invocation</a></span></h1>
<p><a name="interpreter-note" id="interpreter-note"></a></p>
<h2 id="toc5"><span><a href="#interpreter">interpreter</a></span></h2>
<p>The customary name of the interpreter and how to invoke it.</p>
<p><strong>php:</strong></p>
<p><tt>php -f</tt> will only execute portions of the source file within a &lt;?php <span style="color: gray"><em>php code</em></span> ?&gt; tag as php code. Portions of the source file outside of such tags is not treated as executable code and is echoed to standard out.</p>
<p>If short tags are enabled, then php code can also be placed inside &lt;? <span style="color: gray"><em>php code</em></span> ?&gt; and &lt;?= <span style="color: gray"><em>php code</em></span> ?&gt; tags.</p>
<p>&lt;?= <span style="color: gray"><em>php code</em></span> ?&gt; is identical to &lt;?php echo <span style="color: gray"><em>php code</em></span> ?&gt;.</p>
<p><a name="repl-note" id="repl-note"></a></p>
<h2 id="toc6"><span><a href="#repl">repl</a></span></h2>
<p>The customary name of the repl.</p>
<p><strong>php:</strong></p>
<p>The <tt>php -a</tt> REPL does not save or display the result of an expression.</p>
<p><strong>python:</strong></p>
<p>The python repl saves the result of the last statement in <span style="white-space: pre-wrap;">_</span>.</p>
<p><strong>ruby:</strong></p>
<p><tt>irb</tt> saves the result of the last statement in <span style="white-space: pre-wrap;">_</span>.</p>
<p><a name="cmd-line-program-note" id="cmd-line-program-note"></a></p>
<h2 id="toc7"><span><a href="#cmd-line-program">command line program</a></span></h2>
<p>How to pass the code to be executed to the interpreter as a command line argument.</p>
<p><a name="block-delimiters-note" id="block-delimiters-note"></a></p>
<h2 id="toc8"><span><a href="#block-delimiters">block delimiters</a></span></h2>
<p>How blocks are delimited.</p>
<p><strong>python:</strong></p>
<p>Python blocks begin with a line that ends in a colon. The block ends with the first line that is not indented further than the initial line. Python raises an IndentationError if the statements in the block that are not in a nested block are not all indented the same. Using tabs in Python source code is unrecommended and many editors replace them automatically with spaces. If the Python interpreter encounters a tab, it is treated as 8 spaces.</p>
<p>The python repl switches from a <tt><span style="white-space: pre-wrap;">&gt;&gt;&gt;</span></tt> prompt to a … prompt inside a block. A blank line terminates the block.</p>
<p>Colons are also used to separate keys from values in dictionary literals and in sequence slice notation.</p>
<p><strong>ruby:</strong></p>
<p>Curly brackets {} delimit blocks. A matched curly bracket pair can be replaced by the <tt>do</tt> and <tt>end</tt> keywords. By convention curly brackets are used for one line blocks.</p>
<p>The <tt>end</tt> keyword also terminates blocks started by <tt>def</tt>, <tt>class</tt>, or <tt>module</tt>.</p>
<p>Curly brackets are also used for hash literals, and the #{ } notation is used to interpolate expressions into strings.</p>
<p><a name="statement-separator-note" id="statement-separator-note"></a></p>
<h2 id="toc9"><span><a href="#statement-separator">statement separator</a></span></h2>
<p>How the parser determines the end of a statement.</p>
<p><strong>php:</strong></p>
<p>Inside braces statements must be terminated by a semicolon. The following causes a parse error:</p>
<div class="code">
<pre>
<code>&lt;? if (true) { echo "true" } ?&gt;</code>
</pre></div>
<p>The last statement inside <tt>&lt;?= ?&gt;</tt> or <tt>&lt;? ?&gt;</tt> tags does not need to be semicolon terminated, however. The following code is legal:</p>
<div class="code">
<pre>
<code>&lt;?= $a = 1 ?&gt;
&lt;? echo $a ?&gt;</code>
</pre></div>
<p><strong>python:</strong></p>
<p>Newline does not terminate a statement when:</p>
<ul><li>inside parens</li>
<li>inside list [] or dictionary {} literals</li>
</ul><p>Python single quote '' and double quote "" strings cannot contain newlines except as the two character escaped form \n. Putting a newline in these strings results in a syntax error. There is however a multi-line string literal which starts and ends with three single quotes ''' or three double quotes: """.</p>
<p>A newline that would normally terminate a statement can be escaped with a backslash.</p>
<p><strong>ruby:</strong></p>
<p>Newline does not terminate a statement when:</p>
<ul><li>inside single quotes '', double quotes "", backticks ``, or parens ()</li>
<li>after an operator such as + or , that expects another argument</li>
</ul><p>Ruby permits newlines in array [] or hash literals, but only after a comma , or associator =&gt;. Putting a newline before the comma or associator results in a syntax error.</p>
<p>A newline that would normally terminate a statement can be escaped with a backslash.</p>
<p><a name="source-code-encoding-note" id="source-code-encoding-note"></a></p>
<h2 id="toc10"><span><a href="#source-code-encoding">source code encoding</a></span></h2>
<p>How to identify the character encoding for a source code file.</p>
<p>Setting the source code encoding makes it possible to safely use non-ASCII characters in string literals and regular expression literals.</p>
<p><a name="eol-comment-note" id="eol-comment-note"></a></p>
<h2 id="toc11"><span><a href="#eol-comment">end-of-line comment</a></span></h2>
<p>How to create a comment that ends at the next newline.</p>
<p><a name="multiple-line-comment-note" id="multiple-line-comment-note"></a></p>
<h2 id="toc12"><span><a href="#multiple-line-comment">multiple line comment</a></span></h2>
<p>How to comment out multiple lines.</p>
<p><strong>python:</strong></p>
<p>The triple single quote ''' and triple double quote """ syntax is a syntax for string literals.</p>
<p><a name="var-expr-note" id="var-expr-note"></a></p>
<h1 id="toc13"><span><a href="#var-expr">Variables and Expressions</a></span></h1>
<p><a name="local-var-note" id="local-var-note"></a></p>
<h2 id="toc14"><span><a href="#local-var">local variable</a></span></h2>
<p>How to declare variables which are local to the scope defining region which immediately contain them.</p>
<p><strong>php:</strong></p>
<p>Variables do not need to be declared and there is no syntax for declaring a local variable. If a variable with no previous reference is accessed, its value is <em>NULL</em>.</p>
<p><strong>python:</strong></p>
<p>A variable is created by assignment if one does not already exist. If the variable is inside a function or method, then its scope is the body of the function or method. Otherwise it is a global.</p>
<p><strong>ruby:</strong></p>
<p>Variables are created by assignment. If the variable does not have a dollar sign ($) or ampersand (@) as its first character then its scope is scope defining region which most immediately contains it.</p>
<p>A lower case name can refer to a local variable or method. If both are defined, the local variable takes precedence. To invoke the method make the receiver explicit: e.g. self.<em>name</em>. However, outside of class and modules local variables hide functions because functions are private methods in the class <em>Object</em>. Assignment to <em>name</em> will create a local variable if one with that name does not exist, even if there is a method <em>name</em>.</p>
<p><a name="local-scope-regions-note" id="local-scope-regions-note"></a></p>
<h2 id="toc15"><span><a href="#local-scope-regions">regions which define lexical scope</a></span></h2>
<p>A list of regions which define a lexical scope for the local variables they contain.</p>
<p>Local variables defined inside the region are only in scope while code within the region is executing. If the language does not have closures, then code outside the region has no access to local variables defined inside the region. If the language does have closures, then code inside the region can make local variables accessible to code outside the region by returning a reference.</p>
<p>A region which is <em>top level</em> hides local variables in the scope which contains it from the code it contains. A region can also be top level if the syntax requirements of the language prohibit it from being placed inside another scope defining region.</p>
<p>A region is <em>nestable</em> if it can be placed inside another scope defining region, and if code in the inner region can access local variables in the outer region.</p>
<p><strong>php:</strong></p>
<p>Only function bodies and method bodies define scope. Function definitions can be nested, but when this is done lexical variables in the outer function are not visible to code in the body of the inner function.</p>
<p>Braces can be used to set off blocks of codes in a manner similar to the anonymous blocks of Perl. However, these braces do not define a scope. Local variables created inside the braces will be visible to subsequent code outside of the braces.</p>
<p>Local variables cannot be created in class bodies.</p>
<p><strong>python:</strong></p>
<p>Only functions and methods define scope. Function definitions can be nested. When this is done, inner scopes have read access to variables defined in outer scopes. Attempting to write (i.e. assign) to a variable defined in an outer scope will instead result in a variable getting created in the inner scope. Python trivia question: what would happen if the following code were executed?</p>
<div class="code">
<pre>
<code>def foo():
    v = 1
    def bar():
        print(v)
        v = 2
        print(v)
    bar()

foo()</code>
</pre></div>
<p><strong>ruby:</strong></p>
<p>The keywords <em>if</em>, <em>unless</em>, <em>case</em>, <em>while</em>, and <em>until</em> each define a block which is terminated by an <em>end</em> keyword, but none of these blocks have their own scope.</p>
<p>Anonymous functions can be created with the <em>lambda</em> keyword. Ruby anonymous blocks can be provided after a function invocation and are bounded by curly brackets { } or the <em>do</em> and <em>end</em> keywords. Both anonymous functions and anonymous blocks can have parameters which are specified at the start of the block within pipes. Here are some examples:</p>
<div class="code">
<pre>
<code>id = lambda { |x| x }

[3, 1, 2, 4].sort { |a,b| a &lt;=&gt; b }

10.times do |i|
  print "#{i}..." 
end</code>
</pre></div>
<p>The scope of the parameters of an anonymous block or anonymous function is local to the block or function body.</p>
<p>It is possible to mark variables as local, even when they are already defined in the containing scope. Such variables are listed inside the parameter pipes, separated from the parameters by a semicolon:</p>
<div class="code">
<pre>
<code>x = 3
noop = lambda { |; x| x = 15 }
noop.call
# x is still 3</code>
</pre></div>
<p><a name="global-var-note" id="global-var-note"></a></p>
<h2 id="toc16"><span><a href="#global-var">global variable</a></span></h2>
<p>How to declare and access a variable with global scope.</p>
<p><strong>php:</strong></p>
<p>A variable is global if it is used at the top level (i.e. outside any function definition) or if it is declared inside a function with the <em>global</em> keyword. A function must use the <em>global</em> keyword to access the global variable.</p>
<p><strong>python:</strong></p>
<p>A variable is global if it is defined at the top level of a file (i.e. outside any function definition). Although the variable is global, it must be imported individually or be prefixed with the module name prefix to be accessed from another file. To be accessed from inside a function or method it must be declared with the <em>global</em> keyword.</p>
<p><strong>ruby:</strong></p>
<p>A variable is global if it starts with a dollar sign: $.</p>
<p><a name="const-note" id="const-note"></a></p>
<h2 id="toc17"><span><a href="#const">constant</a></span></h2>
<p>How to declare a constant.</p>
<p><strong>php:</strong></p>
<p>A constant can be declared inside a class:</p>
<div class="code">
<pre>
<code>class Math {
  const pi = 3.14;
}</code>
</pre></div>
<p>Refer to a class constant like this:</p>
<div class="code">
<pre>
<code>Math::pi</code>
</pre></div>
<p><strong>ruby:</strong></p>
<p>Capitalized variables contain constants and class/module names. By convention, constants are all caps and class/module names are camel case. The ruby interpreter does not prevent modification of constants, it only gives a warning. Capitalized variables are globally visible, but a full or relative namespace name must be used to reach them: e.g. Math::PI.</p>
<p><a name="assignment-note" id="assignment-note"></a></p>
<h2 id="toc18"><span><a href="#assignment">assignment</a></span></h2>
<p>How to assign a value to a variable.</p>
<p><strong>python:</strong></p>
<p>If the variable on the left has not previously been defined in the current scope, then it is created. This may hide a variable in a containing scope.</p>
<p>Assignment does not return a value and cannot be used in an expression. Thus, assignment cannot be used in a conditional test, removing the possibility of using assignment (=) when an equality test (==) was intended. Assignments can nevertheless be chained to assign a value to multiple variables:</p>
<div class="code">
<pre>
<code>a = b = 3</code>
</pre></div>
<p><strong>ruby:</strong></p>
<p>Assignment operators have right precedence and evaluate to the right argument, so they can be chained. If the variable on the left does not exist, then it is created.</p>
<p><a name="parallel-assignment-note" id="parallel-assignment-note"></a></p>
<h2 id="toc19"><span><a href="#parallel-assignment">parallel assignment</a></span></h2>
<p>How to assign values to variables in parallel.</p>
<p><strong>python:</strong></p>
<p>The r-value can be a list or tuple:</p>
<div class="code">
<pre>
<code>nums = [1,2,3]
a,b,c = nums
more_nums = (6,7,8)
d,e,f = more_nums</code>
</pre></div>
<p>Nested sequences of expression can be assigned to a nested sequences of l-values, provided the nesting matches. This assignment will set a to 1, b to 2, and c to 3:</p>
<div class="code">
<pre>
<code>(a,[b,c]) = [1,(2,3)]</code>
</pre></div>
<p>This assignment will raise a <tt>TypeError</tt>:</p>
<div class="code">
<pre>
<code>(a,(b,c)) = ((1,2),3)</code>
</pre></div>
<p>In Python 3 the splat operator <tt>*</tt> can be used to collect the remaining right side elements in a list:</p>
<div class="code">
<pre>
<code>x, y, *z = 1, 2        # assigns [] to z
x, y, *z = 1, 2, 3     # assigns [3] to z
x, y, *z = 1, 2, 3, 4  # assigns [3, 4] to z</code>
</pre></div>
<p><strong>ruby:</strong></p>
<p>The r-value can be an array:</p>
<div class="code">
<pre>
<code>nums = [1,2,3]
a,b,c = nums</code>
</pre></div>
<p><a name="swap-note" id="swap-note"></a></p>
<h2 id="toc20"><span><a href="#swap">swap</a></span></h2>
<p>How to swap the values held by two variables.</p>
<p><a name="compound-assignment-note" id="compound-assignment-note"></a></p>
<h2 id="toc21"><span><a href="#compound-assignment">compound assignment</a></span></h2>
<p>Compound assignment operators mutate a variable, setting it to the value of an operation which takes the previous value of the variable as an argument.</p>
<p>If <tt>&lt;OP&gt;</tt> is a binary operator and the language has the compound assignment operator <tt>&lt;OP&gt;=</tt>, then the following are equivalent:</p>
<div class="code">
<pre>
<code>x &lt;OP&gt;= y
x = x &lt;OP&gt; y</code>
</pre></div>
<p>The compound assignment operators are displayed in this order:</p>
<p><em>First row:</em> arithmetic operator assignment: addition, subtraction, multiplication, (float) division, integer division, modulus, and exponentiation.<br /><em>Second row:</em> string concatenation assignment and string replication assignment<br /><em>Third row:</em> logical operator assignment: and, or, xor<br /><em>Fourth row:</em> bit operator assignment: left shift, right shift, and, or, xor.</p>
<p><strong>python:</strong></p>
<p>Python compound assignment operators do not return a value and hence cannot be used in expressions.</p>
<p><a name="incr-decr-note" id="incr-decr-note"></a></p>
<h2 id="toc22"><span><a href="#incr-decr">increment and decrement</a></span></h2>
<p>The C-style increment and decrement operators can be used to increment or decrement values. They return values and thus can be used in expressions. The prefix versions return the value in the variable after mutation, and the postfix version return the value before mutation.</p>
<p>Incrementing a value two or more times in an expression makes the order of evaluation significant:</p>
<div class="code">
<pre>
<code>x = 1;
foo(++x, ++x); // foo(2, 3) or foo(3, 2)?

x = 1;
y = ++x/++x;  // y = 2/3 or y = 3/2?</code>
</pre></div>
<p>Python avoids the problem by not having an in-expression increment or decrement.</p>
<p>Ruby mostly avoids the problem by providing a non-mutating increment and decrement. However, here is a Ruby expression which is dependent on order of evaluation:</p>
<div class="code">
<pre>
<code>x = 1
y = (x += 1)/(x += 1)</code>
</pre></div>
<p><strong>php:</strong></p>
<p>The increment and decrement operators also work on strings. There are postfix versions of these operators which evaluate to the value before mutation:</p>
<div class="code">
<pre>
<code>$x = 1;
$x++;
$x--;</code>
</pre></div>
<p><strong>ruby:</strong></p>
<p>The Integer class defines <tt>succ</tt>, <tt>pred</tt>, and <tt>next</tt>, which is a synonym for <tt>succ</tt>.</p>
<p>The String class defines <tt>succ</tt>, <tt>succ!</tt>, <tt>next</tt>, and <tt>next!</tt>. <tt>succ!</tt> and <tt>next!</tt> mutate the string.</p>
<p><a name="null-note" id="null-note"></a></p>
<h2 id="toc23"><span><a href="#null">null</a></span></h2>
<p>The null literal.</p>
<p><a name="null-test-note" id="null-test-note"></a></p>
<h2 id="toc24"><span><a href="#null-test">null test</a></span></h2>
<p>How to test if a variable contains null.</p>
<p><strong>php:</strong></p>
<p><em>$v == NULL</em> does not imply that <em>$v</em> is <em>NULL</em>, since any comparison between <em>NULL</em> and a falsehood will return true. In particular, the following comparisons are true:</p>
<div class="code">
<pre>
<code>$v = NULL;
if ($v == NULL) { echo "true"; }

$v = 0;
if ($v == NULL) { echo "sadly true"; }

$v = '';
if ($v == NULL) { echo "sadly true"; }</code>
</pre></div>
<p><a name="undef-access-note" id="undef-access-note"></a></p>
<h2 id="toc25"><span><a href="#undef-access">undefined variable access</a></span></h2>
<p>The result of attempting to access an undefined variable.</p>
<p><strong>php:</strong></p>
<p>PHP does not provide the programmer with a mechanism to distinguish an undefined variable from a variable which has been set to NULL.</p>
<p><a href="https://gist.github.com/1157508">A test</a> showing that <tt>isset</tt> is the logical negation of <tt>is_null</tt>.</p>
<p><strong>python:</strong></p>
<p>How to test if a variable is defined:</p>
<div class="code">
<pre>
<code>not_defined = False
try: v
except NameError:
  not_defined = True</code>
</pre></div>
<p><strong>ruby:</strong></p>
<p>How to test if a variable is defined:</p>
<div class="code">
<pre>
<code>! defined?(v)</code>
</pre></div>
<p><a name="conditional-expr-note" id="conditional-expr-note"></a></p>
<h2 id="toc26"><span><a href="#conditional-expr">conditional expression</a></span></h2>
<p>How to write a conditional expression. A ternary operator is an operator which takes three arguments. Since</p>
<p><span style="color: gray"><em>condition</em></span> ? <span style="color: gray"><em>true value</em></span> : <span style="color: gray"><em>false value</em></span></p>
<p>is the only ternary operator in C, it is unambiguous to refer to it as <em>the</em> ternary operator.</p>
<p><strong>python:</strong></p>
<p>The Python conditional expression comes from Algol.</p>
<p><strong>ruby:</strong></p>
<p>The Ruby <tt>if</tt> statement is also an expression:</p>
<div class="code">
<pre>
<code>x = if x &gt; 0
  x
else
  -x
end</code>
</pre></div>
<p><a name="arithmetic-logic-note" id="arithmetic-logic-note"></a></p>
<h1 id="toc27"><span><a href="#arithmetic-logic">Arithmetic and Logic</a></span></h1>
<p><a name="true-false-note" id="true-false-note"></a></p>
<h2 id="toc28"><span><a href="#true-false">true and false</a></span></h2>
<p>Literals for the booleans.</p>
<p>These are the return values of the relational operators.</p>
<p><strong>php:</strong></p>
<p>Any identifier which matches TRUE case-insensitive can be used for the TRUE boolean. Similarly for FALSE.</p>
<p>In general, PHP variable names are case-sensitive, but function names are case-insensitive.</p>
<p>When converted to a string for display purposes, TRUE renders as "1" and FALSE as "". The equality tests <tt>TRUE == 1</tt> and <tt>FALSE == ""</tt> evaluate as TRUE but the equality tests <tt>TRUE === 1</tt> and <tt>FALSE === ""</tt> evaluate as FALSE.</p>
<p><a name="falsehoods-note" id="falsehoods-note"></a></p>
<h2 id="toc29"><span><a href="#falsehoods">falsehoods</a></span></h2>
<p>Values which behave like the false boolean in a conditional context.</p>
<p>Examples of conditional contexts are the conditional clause of an <tt>if</tt> statement and the test of a <tt>while</tt> loop.</p>
<p><strong>python:</strong></p>
<p>Whether a object evaluates to True or False in a boolean context can be customized by implementing a <span style="white-space: pre-wrap;">__nonzero__</span> (Python 2) or <span style="white-space: pre-wrap;">__bool__</span> (Python 3) instance method for the class.</p>
<p><a name="logical-op-note" id="logical-op-note"></a></p>
<h2 id="toc30"><span><a href="#logical-op">logical operators</a></span></h2>
<p>Logical and, or, and not.</p>
<p><strong>php, ruby:</strong></p>
<p>&amp;&amp; and <span style="white-space: pre-wrap;">||</span> have higher precedence than assignment, compound assignment, and the ternary operator (?:), which have higher precedence than <em>and</em> and <em>or</em>.</p>
<p><a name="relational-op-note" id="relational-op-note"></a></p>
<h2 id="toc31"><span><a href="#relational-op">relational operators</a></span></h2>
<p>Equality, inequality, greater than, less than, greater than or equal, less than or equal.</p>
<p><strong>php:</strong></p>
<p>Most of the relational operators will convert a string to a number if the other operand is a number. Thus 0 == "0" is true. The operators === and !== do not perform this conversion, so 0 === "0" is false.</p>
<p><strong>python:</strong></p>
<p>Relational operators can be chained. The following expressions evaluate to true:</p>
<div class="code">
<pre>
<code>1 &lt; 2 &lt; 3
1 == 1 != 2</code>
</pre></div>
<p>In general if <em>A<sub>i</sub></em> are expressions and <em>op<sub>i</sub></em> are relational operators, then</p>
<p><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span><tt>A<sub>1</sub> op<sub>1</sub> A<sub>2</sub> op<sub>2</sub> A<sub>3</sub> … A<sub>n</sub> op<sub>n</sub> A<sub>n+1</sub></tt></p>
<p>is true if and only if each of the following is true</p>
<p><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span><tt>A<sub>1</sub> op<sub>1</sub> A<sub>2</sub></tt><br /><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span><tt>A<sub>2</sub> op<sub>2</sub> A<sub>3</sub></tt><br /><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span>…<br /><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span><tt>A<sub>n</sub> op<sub>n</sub> A<sub>n+1</sub></tt></p>
<p><a name="min-max-note" id="min-max-note"></a></p>
<h2 id="toc32"><span><a href="#min-max">min and max</a></span></h2>
<p>How to get the min and max.</p>
<p><a name="three-val-comparison-note" id="three-val-comparison-note"></a></p>
<h2 id="toc33"><span><a href="#three-val-comparison">three value comparison</a></span></h2>
<p>Binary comparison operators which return -1, 0, or 1 depending upon whether the left argument is less than, equal to, or greater than the right argument.</p>
<p>The <tt>&lt;=&gt;</tt> symbol is called the spaceship operator.</p>
<p><a name="arith-op-note" id="arith-op-note"></a></p>
<h2 id="toc34"><span><a href="#arith-op">arithmetic operators</a></span></h2>
<p>The operators for addition, subtraction, multiplication, float division, integer division, modulus, and exponentiation.</p>
<p><a name="int-div-note" id="int-div-note"></a></p>
<h2 id="toc35"><span><a href="#int-div">integer division</a></span></h2>
<p>How to get the integer quotient of two integers.</p>
<p><a name="divmod-note" id="divmod-note"></a></p>
<h2 id="toc36"><span><a href="#divmod">divmod</a></span></h2>
<p>How to get the quotient and remainder with single function call.</p>
<p><a name="int-div-zero-note" id="int-div-zero-note"></a></p>
<h2 id="toc37"><span><a href="#int-div-zero">integer division by zero</a></span></h2>
<p>What happens when an integer is divided by zero.</p>
<p><a name="float-div-note" id="float-div-note"></a></p>
<h2 id="toc38"><span><a href="#float-div">float division</a></span></h2>
<p>How to perform floating point division, even if the operands might be integers.</p>
<p><a name="float-div-zero-note" id="float-div-zero-note"></a></p>
<h2 id="toc39"><span><a href="#float-div-zero">float division by zero</a></span></h2>
<p>What happens when a float is divided by zero.</p>
<p><a name="power-note" id="power-note"></a></p>
<h2 id="toc40"><span><a href="#power">power</a></span></h2>
<p>How to get the value of a number raised to a power.</p>
<p><a name="sqrt-note" id="sqrt-note"></a></p>
<h2 id="toc41"><span><a href="#sqrt">sqrt</a></span></h2>
<p>The square root function.</p>
<p><a name="sqrt-negative-one-note" id="sqrt-negative-one-note"></a></p>
<h2 id="toc42"><span><a href="#sqrt-negative-one">sqrt -1</a></span></h2>
<p>The result of taking the square root of negative one.</p>
<p><a name="transcendental-func-note" id="transcendental-func-note"></a></p>
<h2 id="toc43"><span><a href="#transcendental-func">transcendental functions</a></span></h2>
<p>Some mathematical functions. Trigonometric functions are in radians unless otherwise noted. Logarithms are natural unless otherwise noted.</p>
<p><strong>python:</strong></p>
<p>Python also has <em>math.log10</em>. To compute the log of <em>x</em> for base <em>b</em>, use:</p>
<div class="code">
<pre>
<code>math.log(x)/math.log(b)</code>
</pre></div>
<p><strong>ruby:</strong></p>
<p>Ruby also has <em>Math.log2</em>, <em>Math.log10</em>. To compute the log of <em>x</em> for base <em>b</em>, use</p>
<div class="code">
<pre>
<code>Math.log(x)/Math.log(b)</code>
</pre></div>
<p><a name="transcendental-const-note" id="transcendental-const-note"></a></p>
<h2 id="toc44"><span><a href="#transcendental-const">transcendental constants</a></span></h2>
<p>Constants for π and Euler's constant.</p>
<p><a name="float-truncation-note" id="float-truncation-note"></a></p>
<h2 id="toc45"><span><a href="#float-truncation">float truncation</a></span></h2>
<p>How to truncate a float to the nearest integer towards zero; how to round a float to the nearest integer; how to find the nearest integer above a float; how to find the nearest integer below a float; how to take the absolute value.</p>
<p><a name="abs-val-note" id="abs-val-note"></a></p>
<h2 id="toc46"><span><a href="#abs-val">absolute value</a></span></h2>
<p>How to get the absolute value of a number.</p>
<p><a name="int-overflow-note" id="int-overflow-note"></a></p>
<h2 id="toc47"><span><a href="#int-overflow">integer overflow</a></span></h2>
<p>What happens when the largest representable integer is exceeded.</p>
<p><a name="float-overflow-note" id="float-overflow-note"></a></p>
<h2 id="toc48"><span><a href="#float-overflow">float overflow</a></span></h2>
<p>What happens when the largest representable float is exceeded.</p>
<p><a name="rational-note" id="rational-note"></a></p>
<h2 id="toc49"><span><a href="#rational">rational numbers</a></span></h2>
<p>How to create rational numbers and get the numerator and denominator.</p>
<p><strong>ruby:</strong></p>
<p>Require the library <em>mathn</em> and integer division will yield rationals instead of truncated integers.</p>
<p><a name="complex-note" id="complex-note"></a></p>
<h2 id="toc50"><span><a href="#complex">complex numbers</a></span></h2>
<p><strong>python:</strong></p>
<p>Most of the functions in <em>math</em> have analogues in <em>cmath</em> which will work correctly on complex numbers.</p>
<p><a name="random-note" id="random-note"></a></p>
<h2 id="toc51"><span><a href="#random">random integer, uniform float, normal float</a></span></h2>
<p>How to generate a random integer between 0 and 99, include, float between zero and one in a uniform distribution, or a float in a normal distribution with mean zero and standard deviation one.</p>
<p><a name="random-seed-note" id="random-seed-note"></a></p>
<h2 id="toc52"><span><a href="#random-seed">set random seed, get and restore seed</a></span></h2>
<p>How to set the random seed; how to get the current random seed and later restore it.</p>
<p>All the languages in the sheet set the seed automatically to a value that is difficult to predict. The Ruby MRI interpreter uses the current time and process ID, for example. As a result there is usually no need to set the seed.</p>
<p>Setting the seed to a hardcoded value yields a random but repeatable sequence of numbers. This can be used to ensure that unit tests which cover code using random numbers doesn't intermittently fail.</p>
<p>The seed is global state. If multiple functions are generating random numbers then saving and restoring the seed may be necessary to produce a repeatable sequence.</p>
<p><a name="bit-op-note" id="bit-op-note"></a></p>
<h2 id="toc53"><span><a href="#bit-op">bit operators</a></span></h2>
<p>The bit operators for left shift, right shift, and, inclusive or, exclusive or, and negation.</p>
<p><a name="binary-octal-hex-literals-note" id="binary-octal-hex-literals-note"></a></p>
<h2 id="toc54"><span><a href="#binary-octal-hex-literals">binary, octal, and hex literals</a></span></h2>
<p>Binary, octal, and hex integer literals</p>
<p><a name="radix-note" id="radix-note"></a></p>
<h2 id="toc55"><span><a href="#radix">radix</a></span></h2>
<p>How to convert integers to strings of digits of a given base. How to convert such strings into integers.</p>
<p><strong>python</strong></p>
<p>Python has the functions <tt>bin</tt>, <tt>oct</tt>, and <tt>hex</tt> which take an integer and return a string encoding the integer in base 2, 8, and 16.</p>
<div class="code">
<pre>
<code>bin(42)
oct(42)
hex(42)</code>
</pre></div>
<p><a name="strings-note" id="strings-note"></a></p>
<h1 id="toc56"><span><a href="#strings">Strings</a></span></h1>
<p><a name="str-type-note" id="str-type-note"></a></p>
<h2 id="toc57"><span><a href="#str-type">string type</a></span></h2>
<p>The type or types using for strings.</p>
<p><strong>php:</strong></p>
<p>PHP assumes all strings have single byte characters.</p>
<p><strong>python:</strong></p>
<p>In Python 2.7 the <tt>str</tt> type assumes single byte characters. A separate <tt>unicode</tt> type is available for working with Unicode strings.</p>
<p>In Python 3 the <tt>str</tt> type supports multibtye characters and the <tt>unicode</tt> type has been removed.</p>
<p>There is a mutable <tt>bytearray</tt> type and an immutable <tt>bytes</tt> type for working with sequences of bytes.</p>
<p><strong>ruby:</strong></p>
<p>The {String}} type supports multibtye characters. All strings have an explicit <tt>Encoding</tt>.</p>
<p><a name="str-literal-note" id="str-literal-note"></a></p>
<h2 id="toc58"><span><a href="#str-literal">string literal</a></span></h2>
<p>The syntax for string literals.</p>
<p><strong>ruby:</strong></p>
<p>How to specify custom delimiters for single and double quoted strings. These can be used to avoid backslash escaping. If the left delimiter is (, [, or { the right delimiter must be ), ], or }, respectively.</p>
<div class="code">
<pre>
<code>s1 = %q(lorem ipsum)
s2 = %Q(#{s1} dolor sit amet)</code>
</pre></div>
<p><a name="newline-in-str-literal-note" id="newline-in-str-literal-note"></a></p>
<h2 id="toc59"><span><a href="#newline-in-str-literal">newline in literal</a></span></h2>
<p>Whether newlines are permitted in string literals.</p>
<p><strong>python:</strong></p>
<p>Newlines are not permitted in single quote and double quote string literals. A string can continue onto the following line if the last character on the line is a backslash. In this case, neither the backslash nor the newline are taken to be part of the string.</p>
<p>Triple quote literals, which are string literals terminated by three single quotes or three double quotes, can contain newlines:</p>
<div class="code">
<pre>
<code>'''This is
two lines'''

"""This is also
two lines"""</code>
</pre></div>
<p><a name="str-literal-esc-note" id="str-literal-esc-note"></a></p>
<h2 id="toc60"><span><a href="#str-literal-esc">literal escapes</a></span></h2>
<p>Backslash escape sequences for inserting special characters into string literals.</p>
<table class="wiki-content-table"><tr><th colspan="3">unrecognized backslash escape sequence</th>
</tr><tr><th></th>
<th>double quote</th>
<th>single quote</th>
</tr><tr><td>JavaScript</td>
<td></td>
<td></td>
</tr><tr><td>PHP</td>
<td>preserve backslash</td>
<td>preserve backslash</td>
</tr><tr><td>Python</td>
<td>preserve backslash</td>
<td>preserve backslash</td>
</tr><tr><td>Ruby</td>
<td>drop backslash</td>
<td>preserve backslash</td>
</tr></table><p><strong>python:</strong></p>
<p>When string literals have an <tt>r</tt> or <tt>R</tt> prefix there are no backslash escape sequences and any backslashes thus appear in the created string. The delimiter can be inserted into a string if it is preceded by a backslash, but the backslash is also inserted. It is thus not possible to create a string with an <tt>r</tt> or <tt>R</tt> prefix that ends in a backslash. The <tt>r</tt> and <tt>R</tt> prefixes can be used with single or double quotes:</p>
<div class="code">
<pre>
<code>r'C:\Documents and Settings\Admin'
r"C:\Windows\System32"</code>
</pre></div>
<p>The \u<span style="color: gray"><em>hhhh</em></span> escapes are also available inside Python 2 Unicode literals. Unicode literals have a <em>u</em> prefiix:</p>
<div class="code">
<pre>
<code>u'lambda: \u03bb'</code>
</pre></div>
<p>This syntax is also available in Python 3.3, but not Python 3.2. In Python 3.3 it creates a string of type <tt>str</tt> which has the same features as the <tt>unicode</tt> type of Python 2.7.</p>
<p><a name="here-doc-note" id="here-doc-note"></a></p>
<h2 id="toc61"><span><a href="#here-doc">here document</a></span></h2>
<p>Here documents are strings terminated by a custom identifier. They perform variable substitution and honor the same backslash escapes as double quoted strings.</p>
<p><strong>python:</strong></p>
<p>Python lacks variable interpolation in strings. Triple quotes honor the same backslash escape sequences as regular quotes, so triple quotes can otherwise be used like here documents:</p>
<div class="code">
<pre>
<code>s = '''here document
there computer
'''</code>
</pre></div>
<p><strong>ruby:</strong></p>
<p>Put the customer identifier in single quotes to prevent variable interpolation and backslash escape interpretation:</p>
<div class="code">
<pre>
<code>s = &lt;&lt;'EOF'
Ruby code uses #{var} type syntax
to interpolate variables into strings.
EOF</code>
</pre></div>
<p><a name="var-interpolation-note" id="var-interpolation-note"></a></p>
<h2 id="toc62"><span><a href="#var-interpolation">variable interpolation</a></span></h2>
<p>How to interpolate variables into strings.</p>
<p><strong>python:</strong></p>
<p><tt>str.format</tt> will take named or positional parameters. When used with named parameters <tt>str.format</tt> can mimic the variable interpolation feature of the other languages.</p>
<p>A selection of variables in scope can be passed explicitly:</p>
<div class="code">
<pre>
<code>count = 3
item = 'ball'
print('{count} {item}s'.format(
  count=count,
  item=item))</code>
</pre></div>
<p>Python 3 has <tt>format_map</tt> which accepts a <tt>dict</tt> as an argument:</p>
<div class="code">
<pre>
<code>count = 3
item = 'ball'
print('{count} {item}s'.format_map(locals()))</code>
</pre></div>
<p><a name="expr-interpolation-note" id="expr-interpolation-note"></a></p>
<h2 id="toc63"><span><a href="#expr-interpolation">expression interpolation</a></span></h2>
<p>How to interpolate the result of evaluating an expression into a string.</p>
<p><a name="format-note" id="format-note"></a></p>
<h2 id="toc64"><span><a href="#format">format</a></span></h2>
<p>How to create a string using a printf style format.</p>
<p><strong>python:</strong></p>
<p>The % operator will interpolate arguments into printf-style format strings.</p>
<p>The <tt>str.format</tt> with positional parameters provides an alternative format using curly braces {0}, {1}, … for replacement fields.</p>
<p>The curly braces are escaped by doubling:</p>
<div class="code">
<pre>
<code>'to insert parameter {0} into a format, use {{{0}}}'.format(3)</code>
</pre></div>
<p>If the replacement fields appear in sequential order and aren't repeated, the numbers can be omitted:</p>
<div class="code">
<pre>
<code>'lorem {} {} {}'.format('ipsum', 13, 3.7)</code>
</pre></div>
<p><a name="mutable-str-note" id="mutable-str-note"></a></p>
<h2 id="toc65"><span><a href="#mutable-str">are strings mutable?</a></span></h2>
<p>Are strings mutable?</p>
<p><a name="copy-str-note" id="copy-str-note"></a></p>
<h2 id="toc66"><span><a href="#copy-str">copy string</a></span></h2>
<p>How to copy a string such that changes to the original do not modify the copy.</p>
<p><a name="str-concat-note" id="str-concat-note"></a></p>
<h2 id="toc67"><span><a href="#str-concat">concatenate</a></span></h2>
<p>The string concatenation operator.</p>
<p><a name="str-replicate-note" id="str-replicate-note"></a></p>
<h2 id="toc68"><span><a href="#str-replicate">replicate</a></span></h2>
<p>The string replication operator.</p>
<p><a name="translate-case-note" id="translate-case-note"></a></p>
<h2 id="toc69"><span><a href="#translate-case">translate case</a></span></h2>
<p>How to put a string into all caps or all lower case letters.</p>
<p><a name="capitalize-note" id="capitalize-note"></a></p>
<h2 id="toc70"><span><a href="#capitalize">capitalize</a></span></h2>
<p>How to capitalize a string and the words in a string.</p>
<p><strong>ruby:</strong></p>
<p>Rails monkey patches the <tt>String</tt> class with the <tt>titleize</tt> method for capitalizing the words in a string.</p>
<p><a name="trim-note" id="trim-note"></a></p>
<h2 id="toc71"><span><a href="#trim">trim</a></span></h2>
<p>How to remove whitespace from the ends of a string.</p>
<p><a name="pad-note" id="pad-note"></a></p>
<h2 id="toc72"><span><a href="#pad">pad</a></span></h2>
<p>How to pad the edge of a string with spaces so that it is a prescribed length.</p>
<p><a name="num-to-str-note" id="num-to-str-note"></a></p>
<h2 id="toc73"><span><a href="#num-to-str">number to string</a></span></h2>
<p>How to convert numeric data to string data.</p>
<p><a name="str-to-num-note" id="str-to-num-note"></a></p>
<h2 id="toc74"><span><a href="#str-to-num">string to number</a></span></h2>
<p>How to convert string data to numeric data.</p>
<p><strong>php:</strong></p>
<p>PHP converts a scalar to the desired type automatically and does not raise an error if the string contains non-numeric data. If the start of the string is not numeric, the string evaluates to zero in a numeric context.</p>
<p><strong>python:</strong></p>
<p>float and int raise an error if called on a string and any part of the string is not numeric.</p>
<p><strong>ruby:</strong></p>
<p>to_i and to_f always succeed on a string, returning the numeric value of the digits at the start of the string, or zero if there are no initial digits.</p>
<p><a name="join-note" id="join-note"></a></p>
<h2 id="toc75"><span><a href="#join">join</a></span></h2>
<p>How to concatenate the elements of an array into a string with a separator.</p>
<p><a name="split-note" id="split-note"></a></p>
<h2 id="toc76"><span><a href="#split">split</a></span></h2>
<p>How to split a string containing a separator into an array of substrings.</p>
<p>See also <a href="#scan">scan</a>.</p>
<p><strong>python:</strong></p>
<p><tt>str.split()</tt> takes simple strings as delimiters; use <tt>re.split()</tt> to split on a regular expression:</p>
<div class="code">
<pre>
<code>re.split('\s+', 'do re mi fa')
re.split('\s+', 'do re mi fa', 1)</code>
</pre></div>
<p><a name="split-in-two-note" id="split-in-two-note"></a></p>
<h2 id="toc77"><span><a href="#split-in-two">split in two</a></span></h2>
<p>How to split a string in two.</p>
<p><strong>javascript:</strong></p>
<p>A regular expression is probably the best method for splitting a string in two:</p>
<div class="code">
<pre>
<code>var m = /^([^ ]+) (.+)/.exec("do re mi");
var first = m[1];
var rest = m[2];</code>
</pre></div>
<p>This technique works when the delimiter is a fixed string:</p>
<div class="code">
<pre>
<code>var a = "do re mi".split(" ");
var first = a[0];
var rest = a.splice(1).join(" ");</code>
</pre></div>
<p><strong>python:</strong></p>
<p>Methods for splitting a string into three parts using the first or last occurrence of a substring:</p>
<div class="code">
<pre>
<code>'do re mi'.partition(' ')         # returns ('do', ' ', 're mi')
'do re mi'.rpartition(' ')        # returns ('do re', ' ', 'mi')</code>
</pre></div>
<p><a name="split-keep-delimiters-note" id="split-keep-delimiters-note"></a></p>
<h2 id="toc78"><span><a href="#split-keep-delimiters">split and keep delimiters</a></span></h2>
<p>How to split a string with the delimiters preserved as separate elements.</p>
<p><a name="str-length-note" id="str-length-note"></a></p>
<h2 id="toc79"><span><a href="#str-length">length</a></span></h2>
<p>How to get the length in characters of a string.</p>
<p><a name="index-substr-note" id="index-substr-note"></a></p>
<h2 id="toc80"><span><a href="#index-substr">index of substring</a></span></h2>
<p>How to find the index of the leftmost occurrence of a substring in a string; how to find the index of the rightmost occurrence.</p>
<p><a name="extract-substr-note" id="extract-substr-note"></a></p>
<h2 id="toc81"><span><a href="#extract-substr">extract substring</a></span></h2>
<p>How to extract a substring from a string by index.</p>
<p><a name="extract-char-note" id="extract-char-note"></a></p>
<h2 id="toc82"><span><a href="#extract-char">extract character</a></span></h2>
<p>How to extract a character from a string by its index.</p>
<p><a name="chr-ord-note" id="chr-ord-note"></a></p>
<h2 id="toc83"><span><a href="#chr-ord">chr and ord</a></span></h2>
<p>Converting characters to ASCII codes and back.</p>
<p>The languages in this reference sheet do not have character literals, so characters are represented by strings of length one.</p>
<p><a name="str-to-char-array-note" id="str-to-char-array-note"></a></p>
<h2 id="toc84"><span><a href="#str-to-char-array">to array of characters</a></span></h2>
<p>How to split a string into an array of single character strings.</p>
<p><a name="translate-char-note" id="translate-char-note"></a></p>
<h2 id="toc85"><span><a href="#translate-char">translate characters</a></span></h2>
<p>How to apply a character mapping to a string.</p>
<p><a name="delete-char-note" id="delete-char-note"></a></p>
<h2 id="toc86"><span><a href="#delete-char">delete characters</a></span></h2>
<p>How to remove all specified characters from a string; how to remove all but the specified characters from a string.</p>
<p><a name="squeeze-char-note" id="squeeze-char-note"></a></p>
<h2 id="toc87"><span><a href="#squeeze-char">squeeze characters</a></span></h2>
<p>How to replace multiple adjacent occurrences of a character with a single occurrence.</p>
<p><a name="regexes-note" id="regexes-note"></a></p>
<h1 id="toc88"><span><a href="#regexes">Regular Expressions</a></span></h1>
<ul><li><a href="http://php.net/manual/en/book.pcre.php">PHP PCRE Regexes</a></li>
<li>Python re library: <a href="http://docs.python.org/library/re.html">2.7</a>, <a href="http://docs.python.org/release/3.1.3/library/re.html">3.1</a></li>
<li><a href="http://www.ruby-doc.org/core/classes/Regexp.html">Ruby Regexp</a></li>
</ul><p>Regular expressions or regexes are a way of specifying sets of strings. If a string belongs to the set, the string and regex "match". Regexes can also be used to parse strings.</p>
<p>The modern notation for regexes was introduced by Unix command line tools in the 1970s. POSIX standardized the notation into two types: extended regexes and the more archaic basic regexes. Perl regexes are extended regexes augmented by new character class abbreviations and a few other features introduced by the Perl interpreter in the 1990s. All the languages in this sheet use Perl regexes.</p>
<p>Any string that doesn't contain regex metacharacters is a regex which matches itself. The regex metacharacters are: <tt>[ ] . | ( ) * + ? { } ^ $ \</tt></p>
<p><strong>character classes: [ ] .</strong></p>
<p>A character class is a set of characters in brackets: <tt>[ ].</tt> When used in a regex it matches any character it contains.</p>
<p>Character classes have their own set of metacharacters: <tt>^ - \ ]</tt></p>
<p>The <tt>^</tt> is only special when it is the first character in the character class. Such a character class matches its complement; that is, any character not inside the brackets. When not the first character the <tt>^</tt> refers to itself.</p>
<p>The hyphen is used to specify character ranges: e.g. <tt>0-9</tt> or <tt>A-Z</tt>. When the hyphen is first or last inside the brackets it matches itself.</p>
<p>The backslash can be used to escape the above characters or the terminal character class delimiter: <tt>]</tt>. It can be used in character class abbreviations or string backslash escapes.</p>
<p>The period <tt>.</tt> is a character class abbreviation which matches any character except for newline. In all languages the period can be made to match all characters. PHP uses the <tt>m</tt> modifier. Python uses the <tt>re.M</tt> flag. Ruby uses the <tt>s</tt> modifier.</p>
<p><a name="regex-char-class-abbrev" id="regex-char-class-abbrev"></a><br /><strong>character class abbreviations:</strong></p>
<table class="wiki-content-table"><tr><th>abbrev</th>
<th>name</th>
<th>character class</th>
</tr><tr><td>\d</td>
<td>digit</td>
<td>[0-9]</td>
</tr><tr><td>\D</td>
<td>nondigit</td>
<td>[^0-9]</td>
</tr><tr><td>\h</td>
<td><span style="color: gray"><em>PHP:</em></span> horizontal whitespace character<br /><span style="color: gray"><em>Ruby:</em></span> hex digit</td>
<td><span style="color: gray"><em>PHP:</em></span> [ \t]<br /><span style="color: gray"><em>Ruby:</em></span> [0-9a-fA-F]</td>
</tr><tr><td>\H</td>
<td><span style="color: gray"><em>PHP:</em></span> not a horizontal whitespace character<br /><span style="color: gray"><em>Ruby:</em></span> not a hex digit</td>
<td><span style="color: gray"><em>PHP:</em></span> [^ \t]<br /><span style="color: gray"><em>Ruby:</em></span> [^0-9a-fA-F]</td>
</tr><tr><td>\s</td>
<td>whitespace character</td>
<td>[ \t\r\n\f]</td>
</tr><tr><td>\S</td>
<td>non whitespace character</td>
<td>[^ \t\r\n\f]</td>
</tr><tr><td>\v</td>
<td>vertical whitespace character</td>
<td>[\r\n\f]</td>
</tr><tr><td>\V</td>
<td>not a vertical whitespace character</td>
<td>[^\r\n\f]</td>
</tr><tr><td>\w</td>
<td>word character</td>
<td>[A-Za-z0-9_]</td>
</tr><tr><td>\W</td>
<td>non word character</td>
<td>[^A-Za-z0-9_]</td>
</tr></table><p><strong>alternation and grouping: | ( )</strong></p>
<p>The vertical pipe | is used for alternation and parens () for grouping.</p>
<p>A vertical pipe takes as its arguments everything up to the next vertical pipe, enclosing paren, or end of string.</p>
<p>Parentheses control the scope of alternation and the quantifiers described below. They are also used for capturing groups, which are the substrings which matched parenthesized parts of the regular expression. Each language numbers the groups and provides a mechanism for extracting them when a match is made. A parenthesized subexpression can be removed from the groups with this syntax: <tt>(?:<span style="color: gray"><em>expr</em></span>)</tt></p>
<p><strong>quantifiers: * + ? { }</strong></p>
<p>As an argument quantifiers take the preceding regular character, character class, or group. The argument can itself be quantified, so that <tt>^a{4}*$</tt> matches strings with the letter a in multiples of 4.</p>
<table class="wiki-content-table"><tr><th>quantifier</th>
<th># of occurrences of argument matched</th>
</tr><tr><td><span style="white-space: pre-wrap;">*</span></td>
<td>zero or more, greedy</td>
</tr><tr><td>+</td>
<td>one or more, greedy</td>
</tr><tr><td>?</td>
<td>zero or one, greedy</td>
</tr><tr><td>{m,n}</td>
<td><em>m</em> to <em>n</em>, greedy</td>
</tr><tr><td>{n}</td>
<td>exactly <em>n</em></td>
</tr><tr><td>{m,}</td>
<td><em>m</em> or more, greedy</td>
</tr><tr><td>{,n}</td>
<td>zero to <em>n</em>, greedy</td>
</tr><tr><td>*?</td>
<td>zero or more, lazy</td>
</tr><tr><td>+?</td>
<td>one or more, lazy</td>
</tr><tr><td>{m,n}?</td>
<td><em>m</em> to <em>n</em>, lazy</td>
</tr><tr><td>{m,}?</td>
<td><em>m</em> or more, lazy</td>
</tr><tr><td>{,n}?</td>
<td>zero to <em>n</em>, lazy</td>
</tr></table><p>When there is a choice, greedy quantifiers will match the maximum possible number of occurrences of the argument. Lazy quantifiers match the minimum possible number.</p>
<p><strong>anchors: ^ $</strong></p>
<table class="wiki-content-table"><tr><th>anchor</th>
<th>matches</th>
</tr><tr><td>^</td>
<td>beginning of a string. In Ruby or when <em>m</em> modifier is used also matches right side of a newline</td>
</tr><tr><td>$</td>
<td>end of a string. In Ruby or when <em>m</em> modifier is used also matches left side of a newline</td>
</tr><tr><td>\A</td>
<td>beginning of the string</td>
</tr><tr><td>\b</td>
<td>word boundary. In between a \w and a \W character or in between a \w character and the edge of the string</td>
</tr><tr><td>\B</td>
<td>not a word boundary. In between two \w characters or two \W characters</td>
</tr><tr><td>\z</td>
<td>end of the string</td>
</tr><tr><td>\Z</td>
<td>end of the string unless it is a newline, in which case it matches the left side of the terminal newline</td>
</tr></table><p><strong>escaping: \</strong></p>
<p>To match a metacharacter, put a backslash in front of it. To match a backslash use two backslashes.</p>
<p><strong>php:</strong></p>
<p>PHP 5.3 still supports the EREG engine, though the functions which use it are deprecated. These include the <tt>split</tt> function and functions which start with <tt>ereg</tt>. The preferred functions are <tt>preg_split</tt> and the other functions with a <tt>preg</tt> prefix.</p>
<p><a name="regex-literal-note" id="regex-literal-note"></a></p>
<h2 id="toc89"><span><a href="#regex-literal">literal, custom delimited literal</a></span></h2>
<p>The literal for a regular expression; the literal for a regular expression with a custom delimiter.</p>
<p><strong>javascript:</strong></p>
<p>The constructor for a regular expression is:</p>
<div class="code">
<pre>
<code>var rx = RegExp("lorem|ipsum");</code>
</pre></div>
<p><strong>php:</strong></p>
<p>PHP regex literals are strings. The first character is the delimiter and it must also be the last character. If the start delimiter is (, {, or [ the end delimiter must be ), }, or ], respectively.</p>
<p>Here are the signatures from the PHP manual for the preg functions used in this sheet:</p>
<div class="code">
<pre>
<code>array preg_split ( string $pattern , string $subject [, int $limit = -1 [, int $flags = 0 ]] )

int preg_match ( string $pattern , string $subject [, array &amp;$matches [, int $flags = 0 [, int $offset = 0 ]]] )

mixed preg_replace ( mixed $pattern , mixed $replacement , mixed $subject [, int $limit = -1 [, int &amp;$count ]] )

int preg_match_all ( string $pattern , string $subject [, array &amp;$matches [, int $flags = PREG_PATTERN_ORDER [, int $offset = 0 ]]] )</code>
</pre></div>
<p><strong>python:</strong></p>
<p>Python does not have a regex literal, but the <tt>re.compile</tt> function can be used to create regex objects.</p>
<p>Compiling regexes can always be avoided:</p>
<div class="code">
<pre>
<code>re.compile('\d{4}').search('1999')
re.search('\d{4}', '1999')

re.compile('foo').sub('bar', 'foo bar')
re.sub('foo', 'bar', 'foo bar')

re.compile('\w+').findall('do re me')
re.findall('\w+', 'do re me')</code>
</pre></div>
<p><a name="char-class-abbrev-note" id="char-class-abbrev-note"></a></p>
<h2 id="toc90"><span><a href="#char-class-abbrev">character class abbreviations</a></span></h2>
<p>The supported <a href="#regex-char-class-abbrev">character class abbreviations</a>.</p>
<p>Note that <tt>\h</tt> refers to horizontal whitespace (i.e. a space or tab) in PHP and a hex digit in Ruby. Similarly <tt>\H</tt> refers to something that isn't horizontal whitespace in PHP and isn't a hex digit in Ruby.</p>
<p><a name="regex-anchors-note" id="regex-anchors-note"></a></p>
<h2 id="toc91"><span><a href="#regex-anchors">anchors</a></span></h2>
<p>The supported anchors.</p>
<p><a name="regex-test-note" id="regex-test-note"></a></p>
<h2 id="toc92"><span><a href="#regex-test">match test</a></span></h2>
<p>How to test whether a string matches a regular expression.</p>
<p><strong>python:</strong></p>
<p>The <tt>re.match</tt> function returns true only if the regular expression matches the beginning of the string. <tt>re.search</tt> returns true if the regular expression matches any substring of the of string.</p>
<p><strong>ruby:</strong></p>
<p><tt>match</tt> is a method of both <tt>Regexp</tt> and <tt>String</tt> so can match with both</p>
<div class="code">
<pre>
<code>/1999/.match("1999")</code>
</pre></div>
<p>and</p>
<div class="code">
<pre>
<code>"1999".match(/1999/)</code>
</pre></div>
<p>When variables are involved it is safer to invoke the <tt>Regexp</tt> method because string variables are more likely to contain <tt>nil</tt>.</p>
<p><a name="case-insensitive-regex-note" id="case-insensitive-regex-note"></a></p>
<h2 id="toc93"><span><a href="#case-insensitive-regex">case insensitive match test</a></span></h2>
<p>How to perform a case insensitive match test.</p>
<p><a name="regex-modifiers-note" id="regex-modifiers-note"></a></p>
<h2 id="toc94"><span><a href="#regex-modifiers">modifiers</a></span></h2>
<p>Modifiers that can be used to adjust the behavior of a regular expression.</p>
<p>The lists are not comprehensive. For all languages except Ruby there are additional modifiers.</p>
<table class="wiki-content-table"><tr><th>modifier</th>
<th>behavior</th>
</tr><tr><td>e</td>
<td><span style="color: gray"><em>PHP:</em></span> when used with preg_replace, the replacement string, after backreferences are substituted, is eval'ed as PHP code and the result is used as the replacement.</td>
</tr><tr><td>g</td>
<td><span style="color: gray"><em>JavaScript:</em></span> read all non-overlapping matches into an array.</td>
</tr><tr><td>i, re.I</td>
<td><span style="color: gray"><em>all:</em></span> ignores case. Upper case letters match lower case letters and vice versa.</td>
</tr><tr><td>m, re.M</td>
<td><span style="color: gray"><em>JavaScript, PHP, Python:</em></span> makes the ^ and $ match the right and left edge of newlines in addition to the beginning and end of the string.<br /><span style="color: gray"><em>Ruby:</em></span> makes the period . match newline characters.</td>
</tr><tr><td>o</td>
<td><span style="color: gray"><em>Ruby:</em></span> performs variable interpolation #{ } only once per execution of the program.</td>
</tr><tr><td>s, re.S</td>
<td><span style="color: gray"><em>PHP, Python:</em></span> makes the period . match newline characters.</td>
</tr><tr><td>x, re.X</td>
<td><span style="color: gray"><em>all:</em></span> ignores whitespace in the regex which permits it to be used for formatting.</td>
</tr></table><p>Python modifiers are bit flags. To use more than one flag at the same time, join them with bit or: |</p>
<p><a name="subst-note" id="subst-note"></a></p>
<h2 id="toc95"><span><a href="#subst">substitution</a></span></h2>
<p>How to replace all occurrences of a matching pattern in a string with the provided substitution string.</p>
<p><strong>php:</strong></p>
<p>The number of occurrences replaced can be controlled with a 4th argument to <tt>preg_replace</tt>:</p>
<div class="code">
<pre>
<code>$s = "foo bar bar";
preg_replace('/bar/', "baz", $s, 1);</code>
</pre></div>
<p>If no 4th argument is provided, all occurrences are replaced.</p>
<p><strong>python:</strong></p>
<p>The 3rd argument to <tt>sub</tt> controls the number of occurrences which are replaced.</p>
<div class="code">
<pre>
<code>s = 'foo bar bar'
re.compile('bar').sub('baz', s, 1)</code>
</pre></div>
<p>If there is no 3rd argument, all occurrences are replaced.</p>
<p><strong>ruby:</strong></p>
<p>The <em>gsub</em> operator returns a copy of the string with the substitution made, if any. The <em>gsub!</em> performs the substitution on the original string and returns the modified string.</p>
<p>The <em>sub</em> and <em>sub!</em> operators only replace the first occurrence of the match pattern.</p>
<p><a name="match-prematch-postmatch-note" id="match-prematch-postmatch-note"></a></p>
<h2 id="toc96"><span><a href="#match-prematch-postmatch">match, prematch, postmatch</a></span></h2>
<p>How to get the substring that matched the regular expression, as well as the part of the string before and after the matching substring.</p>
<p><strong>ruby:</strong></p>
<p>The special variables <tt>$&amp;</tt>, <tt>$<span style="white-space: pre-wrap;">`</span></tt>, and <tt>$'</tt> also contain the match, prematch, and postmatch.</p>
<p><a name="group-capture-note" id="group-capture-note"></a></p>
<h2 id="toc97"><span><a href="#group-capture">group capture</a></span></h2>
<p>How to get the substrings which matched the parenthesized parts of a regular expression.</p>
<p><strong>ruby:</strong></p>
<p>Ruby has syntax for extracting a group from a match in a single expression. The following evaluates to "1999":</p>
<div class="code">
<pre>
<code>"1999-07-08"[/(\d{4})-(\d{2})-(\d{2})/, 1]</code>
</pre></div>
<p><a name="named-group-capture-note" id="named-group-capture-note"></a></p>
<h2 id="toc98"><span><a href="#named-group-capture">named group capture</a></span></h2>
<p>How to get the substrings which matched the parenthesized parts of a regular expression and put them into a dictionary.</p>
<p>For reference, we call the <tt>(?P&lt;foo&gt;<span style="white-space: pre-wrap;">...</span>)</tt> notation <em>Python-style</em> and the <tt>(?&lt;foo&gt;<span style="white-space: pre-wrap;">...</span>)</tt> notation <em>Perl-style</em>.</p>
<p><strong>php:</strong></p>
<p>PHP originally supported Python-style named groups since that was the style that was added to the PCRE regex engine. Perl-style named groups were added to PHP 5.2.</p>
<p><strong>python:</strong></p>
<p>The Python interpreter was the first to support named groups.</p>
<p><a name="scan-note" id="scan-note"></a></p>
<h2 id="toc99"><span><a href="#scan">scan</a></span></h2>
<p>How to return all non-overlapping substrings which match a regular expression as an array.</p>
<p><a name="backreference-note" id="backreference-note"></a></p>
<h2 id="toc100"><span><a href="#backreference">backreference in match and substitution</a></span></h2>
<p>How to use backreferences in a regex; how to use backreferences in the replacement string of substitution.</p>
<p><a name="recursive-regex-note" id="recursive-regex-note"></a></p>
<h2 id="toc101"><span><a href="#recursive-regex">recursive regex</a></span></h2>
<p>Examples of recursive regexes.</p>
<p>The examples match substrings containing balanced parens.</p>
<p><a name="dates-time-note" id="dates-time-note"></a></p>
<h1 id="toc102"><span><a href="#dates-time">Date and Time</a></span></h1>
<p>In ISO 8601 terminology, a <em>date</em> specifies a day in the Gregorian calendar and a <em>time</em> does not contain date information; it merely specifies a time of day. A data type which combines both date and time information is probably more useful than one which contains just date information or just time information; it is unfortunate that ISO 8601 doesn't provide a name for this entity. The word <em>timestamp</em> often gets used to denote a combined date and time. PHP and Python use the compound noun <em>datetime</em> for combined date and time values.</p>
<p>An useful property of <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO 8601 dates, times, and date/time combinations</a> is that they are correctly ordered by a lexical sort on their string representations. This is because they are big-endian (the year is the leftmost element) and they used fixed-length fields for each term in the string representation.</p>
<p>The C standard library provides two methods for representing dates. The first is the UNIX epoch, which is the seconds since January 1, 1970 in UTC. If such a time were stored in a 32-bit signed integer, the rollover would happen on January 18, 2038.</p>
<p>The other method of representing dates is the <tt>tm</tt> struct, a definition of which can be found on Unix systems in <tt>/usr/include/time.h</tt>:</p>
<div class="code">
<pre>
<code>struct tm {
        int     tm_sec;         /* seconds after the minute [0-60] */
        int     tm_min;         /* minutes after the hour [0-59] */
        int     tm_hour;        /* hours since midnight [0-23] */
        int     tm_mday;        /* day of the month [1-31] */
        int     tm_mon;         /* months since January [0-11] */
        int     tm_year;        /* years since 1900 */
        int     tm_wday;        /* days since Sunday [0-6] */
        int     tm_yday;        /* days since January 1 [0-365] */
        int     tm_isdst;       /* Daylight Savings Time flag */
        long    tm_gmtoff;      /* offset from CUT in seconds */
        char    *tm_zone;       /* timezone abbreviation */
};</code>
</pre></div>
<p>Python uses and exposes the <tt>tm</tt> struct of the standard library. Python has a module called <tt>time</tt> which is a thin wrapper to the standard library functions which operate on this struct. Here is how get a <tt>tm</tt> struct in Python:</p>
<div class="code">
<pre>
<code>import time

utc = time.gmtime(time.time())
t = time.localtime(time.time())</code>
</pre></div>
<p>The <tt>tm</tt> struct is a low level entity, and interacting with it directly should be avoided. In the case of Python it is usually sufficient to use the <tt>datetime</tt> module instead.</p>
<p><a name="date-time-type-note" id="date-time-type-note"></a></p>
<h2 id="toc103"><span><a href="#date-time-type">date/time type</a></span></h2>
<p>The data type used to hold a combined date and time.</p>
<p><a name="current-date-time-note" id="current-date-time-note"></a></p>
<h2 id="toc104"><span><a href="#current-date-time">current date/time</a></span></h2>
<p>How to get the combined date and time for the present moment in both local time and UTC.</p>
<p><a name="unix-epoch-note" id="unix-epoch-note"></a></p>
<h2 id="toc105"><span><a href="#unix-epoch">to unix epoch, from unix epoch</a></span></h2>
<p>How to convert the native date/time type to the Unix epoch which is the number of seconds since the start of January 1, 1970 UTC.</p>
<p><strong>python:</strong></p>
<p>The Python datetime object created by <tt>now()</tt> and <tt>utcnow()</tt> has no timezone information associated with it. The <tt>strftime()</tt> method assumes a receiver with no timezone information represents a local time. Thus it is an error to call <tt>strftime()</tt> on the return value of <tt>utcnow()</tt>.</p>
<p>Here are two different ways to get the current Unix epoch. The second way is faster:</p>
<div class="code">
<pre>
<code>import calendar
import datetime

int(datetime.datetime.now().strftime('%s'))
calendar.timegm(datetime.datetime.utcnow().utctimetuple())</code>
</pre></div>
<p>Replacing <tt>now()</tt> with <tt>utcnow()</tt> in the first way, or <tt>utcnow()</tt> with <tt>now()</tt> in the second way produces an incorrect value.</p>
<p><a name="current-unix-epoch-note" id="current-unix-epoch-note"></a></p>
<h2 id="toc106"><span><a href="#current-unix-epoch">current unix epoch</a></span></h2>
<p>How to get the current time as a Unix epoch timestamp.</p>
<p><a name="strftime-note" id="strftime-note"></a></p>
<h2 id="toc107"><span><a href="#strftime">strftime</a></span></h2>
<p>How to format a date/time as a string using the format notation of the <em>strftime</em> function from the standard C library. This same format notation is used by the Unix <em>date</em> command.</p>
<p><strong>php:</strong></p>
<p>PHP supports strftime but it also has its own time formatting system used by <tt>date</tt>, <tt>DateTime::format</tt>, and <tt>DateTime::createFromFormat</tt>. The letters used in the PHP time formatting system are <a href="http://www.php.net/manual/en/datetime.createfromformat.php">described here</a>.</p>
<p><a name="date-time-str-note" id="date-time-str-note"></a></p>
<h2 id="toc108"><span><a href="#date-time-str">default format example</a></span></h2>
<p>Examples of how a date/time object appears when treated as a string such as when it is printed to standard out.</p>
<p>The formats are in all likelihood locale dependent. The provided examples come from a machine running Mac OS X in the Pacific time zone of the USA.</p>
<p><strong>php:</strong></p>
<p>It is a fatal error to treat a DateTime object as a string.</p>
<p><a name="strptime-note" id="strptime-note"></a></p>
<h2 id="toc109"><span><a href="#strptime">strptime</a></span></h2>
<p>How to parse a date/time using the format notation of the <tt>strptime</tt> function from the standard C library.</p>
<p><a name="parse-date-note" id="parse-date-note"></a></p>
<h2 id="toc110"><span><a href="#parse-date">parse date w/o format</a></span></h2>
<p>How to parse a date without providing a format string.</p>
<p><a name="date-subtraction-note" id="date-subtraction-note"></a></p>
<h2 id="toc111"><span><a href="#date-subtraction">result date subtraction</a></span></h2>
<p>The data type that results when subtraction is performed on two combined date and time values.</p>
<p><a name="add-time-duration-note" id="add-time-duration-note"></a></p>
<h2 id="toc112"><span><a href="#add-time-duration">add time duration</a></span></h2>
<p>How to add a time duration to a date/time.</p>
<p>A time duration can easily be added to a date/time value when the value is a Unix epoch value.</p>
<p>ISO 8601 distinguishes between a time interval, which is defined by two date/time endpoints, and a duration, which is the length of a time interval and can be defined by a unit of time such as '10 minutes'. A time interval can also be defined by date and time representing the start of the interval and a duration.</p>
<p>ISO 8601 defines <a href="http://en.wikipedia.org/wiki/ISO_8601#Durations">notation for durations</a>. This notation starts with a 'P' and uses a 'T' to separate the day and larger units from the hour and smaller units. Observing the location relative to the 'T' is important for interpreting the letter 'M', which is used for both months and minutes.</p>
<p><a name="local-tmz-note" id="local-tmz-note"></a></p>
<h2 id="toc113"><span><a href="#local-tmz">local timezone</a></span></h2>
<p>Do date/time values include timezone information. When a date/time value for the local time is created, how the local timezone is determined.</p>
<p>A date/time value can represent a local time but not have any timezone information associated with it.</p>
<p>On Unix systems processes determine the local timezone by inspecting the file <tt>/etc/localtime</tt>.</p>
<p><strong>php:</strong></p>
<p>The default timezone can also be set in the <tt>php.ini</tt> file.</p>
<div class="code">
<pre>
<code>date.timezone = "America/Los_Angeles"</code>
</pre></div>
<p>Here is the list of <a href="http://php.net/timezones">timezones supported by PHP</a>.</p>
<p><a name="arbitrary-tmz-note" id="arbitrary-tmz-note"></a></p>
<h2 id="toc114"><span><a href="#arbitrary-tmz">arbitrary timezone</a></span></h2>
<p>How to convert a timestamp to the equivalent timestamp in an arbitrary timezone.</p>
<p><a name="timezone-offset-note" id="timezone-offset-note"></a></p>
<h2 id="toc115"><span><a href="#timezone-offset">timezone name, offset from UTC, is daylight savings?</a></span></h2>
<p>How to get time zone information: the name of the timezone, the offset in hours from UTC, and whether the timezone is currently in daylight savings.</p>
<p>Timezones are often identified by <a href="http://en.wikipedia.org/wiki/List_of_time_zone_abbreviations">three or four letter abbreviations</a>. As can be seen from the list, many of the abbreviations do not uniquely identify a timezone. Furthermore many of the timezones have been altered in the past. The <a href="http://en.wikipedia.org/wiki/Tz_database">Olson database</a> (aka Tz database) decomposes the world into zones in which the local clocks have all been set to the same time since 1970 and it gives these zones unique names.</p>
<p><strong>ruby:</strong></p>
<p>The <tt>Time</tt> class has a <tt>zone</tt> method which returns the time zone abbreviation for the object. There is a <tt>tzinfo</tt> gem which can be used to create timezone objects using the Olson database name. This can in turn be used to convert between UTC times and local times which are daylight saving aware.</p>
<p><a name="microseconds-note" id="microseconds-note"></a></p>
<h2 id="toc116"><span><a href="#microseconds">microseconds</a></span></h2>
<p>How to get the microseconds component of a combined date and time value. The SI abbreviations for milliseconds and microseconds are <tt>ms</tt> and <tt><span style="white-space: pre-wrap;">μ</span>s</tt>, respectively. The C standard library uses the letter <tt>u</tt> as an abbreviation for <tt>micro</tt>. Here is a struct defined in <tt>/usr/include/sys/time.h</tt>:</p>
<div class="code">
<pre>
<code>struct timeval {
  time_t       tv_sec;   /* seconds since Jan. 1, 1970 */
  suseconds_t  tv_usec;  /* and microseconds */
};</code>
</pre></div>
<p><a name="sleep-note" id="sleep-note"></a></p>
<h2 id="toc117"><span><a href="#sleep">sleep</a></span></h2>
<p>How to put the process to sleep for a specified number of seconds. In Python and Ruby the default version of <tt>sleep</tt> supports a fractional number of seconds.</p>
<p><strong>php:</strong></p>
<p>PHP provides <tt>usleep</tt> which takes an argument in microseconds:</p>
<div class="code">
<pre>
<code>usleep(500000);</code>
</pre></div>
<p><a name="timeout-note" id="timeout-note"></a></p>
<h2 id="toc118"><span><a href="#timeout">timeout</a></span></h2>
<p>How to cause a process to timeout if it takes too long.</p>
<p>Techniques relying on SIGALRM only work on Unix systems.</p>
<p><a name="arrays-note" id="arrays-note"></a></p>
<h1 id="toc119"><span><a href="#arrays">Arrays</a></span></h1>
<p>What the languages call their basic container types:</p>
<table class="wiki-content-table"><tr><th></th>
<th>javascript</th>
<th>php</th>
<th>python</th>
<th>ruby</th>
</tr><tr><td><a href="#array-literal">array</a></td>
<td></td>
<td>array</td>
<td>list, tuple, sequence</td>
<td>Array, Enumerable</td>
</tr><tr><td><a href="#dict-literal">dictionary</a></td>
<td></td>
<td>array</td>
<td>dict, mapping</td>
<td>Hash</td>
</tr></table><p><strong>javascript:</strong></p>
<p><strong>php:</strong></p>
<p>PHP uses the same data structure for arrays and dictionaries.</p>
<p><strong>python:</strong></p>
<p>Python has the mutable <em>list</em> and the immutable <em>tuple</em>. Both are <em>sequences</em>. To be a <em>sequence</em>, a class must implement <span style="white-space: pre-wrap;">__getitem__</span>, <span style="white-space: pre-wrap;">__setitem__</span>, <span style="white-space: pre-wrap;">__delitem__</span>, <span style="white-space: pre-wrap;">__len__</span>, <span style="white-space: pre-wrap;">__contains__</span>, <span style="white-space: pre-wrap;">__iter__</span>, <span style="white-space: pre-wrap;">__add__</span>, <span style="white-space: pre-wrap;">__mul__</span>, <span style="white-space: pre-wrap;">__radd__</span>, and <span style="white-space: pre-wrap;">__rmul__</span>.</p>
<p><strong>ruby:</strong></p>
<p>Ruby provides an <em>Array</em> datatype. If a class defines an <em>each</em> iterator and a comparison operator &lt;=&gt;, then it can mix in the <em>Enumerable</em> module.</p>
<p><a name="array-literal-note" id="array-literal-note"></a></p>
<h2 id="toc120"><span><a href="#array-literal">literal</a></span></h2>
<p>Array literal syntax.</p>
<p><strong>ruby:</strong></p>
<p>The <tt>%w</tt> operator splits the following string on whitespace and creates an array of strings from the words. The character following the <tt>%w</tt> is the string delimiter. If the following character is (, [, or {, then the character which terminates the string must be ), ], or }.</p>
<p>The <tt>%W</tt> operator is like the <tt>%w</tt> operator, except that double-quote style <tt>#{ }</tt> expressions will be interpolated.</p>
<p><a name="quote-words-note" id="quote-words-note"></a></p>
<h2 id="toc121"><span><a href="#quote-words">quote words</a></span></h2>
<p>The quote words operator, which is a literal for arrays of strings where each string contains a single word.</p>
<p><a name="array-size-note" id="array-size-note"></a></p>
<h2 id="toc122"><span><a href="#array-size">size</a></span></h2>
<p>How to get the number of elements in an array.</p>
<p><a name="array-empty-note" id="array-empty-note"></a></p>
<h2 id="toc123"><span><a href="#array-empty">empty test</a></span></h2>
<p>How to test whether an array is empty.</p>
<p><a name="array-lookup-note" id="array-lookup-note"></a></p>
<h2 id="toc124"><span><a href="#array-lookup">lookup</a></span></h2>
<p>How to access a value in an array by index.</p>
<p><strong>python:</strong></p>
<p>A negative index refers to the <em>length - index</em> element.</p>
<div class="code">
<pre>
<code>&gt;&gt;&gt; a = [1,2,3]
&gt;&gt;&gt; a[-1]
3</code>
</pre></div>
<p><strong>ruby:</strong></p>
<p>A negative index refers to to the <em>length - index</em> element.</p>
<p><a name="array-update-note" id="array-update-note"></a></p>
<h2 id="toc125"><span><a href="#array-update">update</a></span></h2>
<p>How to update the value at an index.</p>
<p><a name="array-out-of-bounds-note" id="array-out-of-bounds-note"></a></p>
<h2 id="toc126"><span><a href="#array-out-of-bounds">out-of-bounds behavior</a></span></h2>
<p>What happens when the value at an out-of-bounds index is referenced.</p>
<p><a name="array-element-index-note" id="array-element-index-note"></a></p>
<h2 id="toc127"><span><a href="#array-element-index">index of element</a></span></h2>
<p><a name="array-slice-note" id="array-slice-note"></a></p>
<h2 id="toc128"><span><a href="#array-slice">slice</a></span></h2>
<p>How to slice a subarray from an array by specifying a start index and an end index; how to slice a subarray from an array by specifying an offset index and a length index.</p>
<p><strong>python:</strong></p>
<p>Slices can leave the first or last index unspecified, in which case the first or last index of the sequence is used:</p>
<div class="code">
<pre>
<code>&gt;&gt;&gt; a=[1,2,3,4,5]
&gt;&gt;&gt; a[:3]
[1, 2, 3]</code>
</pre></div>
<p>Python has notation for taking every nth element:</p>
<div class="code">
<pre>
<code>&gt;&gt;&gt; a=[1,2,3,4,5]
&gt;&gt;&gt; a[::2] 
[1, 3, 5]</code>
</pre></div>
<p>The third argument in the colon-delimited slice argument can be negative, which reverses the order of the result:</p>
<div class="code">
<pre>
<code>&gt;&gt;&gt; a = [1,2,3,4]
&gt;&gt;&gt; a[::-1]
[4, 3, 2, 1]</code>
</pre></div>
<p><a name="array-slice-to-end-note" id="array-slice-to-end-note"></a></p>
<h2 id="toc129"><span><a href="#array-slice-to-end">slice to end</a></span></h2>
<p>How to slice to the end of an array.</p>
<p>The examples take all but the first element of the array.</p>
<p><a name="array-back-note" id="array-back-note"></a></p>
<h2 id="toc130"><span><a href="#array-back">manipulate back</a></span></h2>
<p>How to add and remove elements from the back or high index end of an array.</p>
<p>These operations can be used to use the array as a stack.</p>
<p><a name="array-front-note" id="array-front-note"></a></p>
<h2 id="toc131"><span><a href="#array-front">manipulate front</a></span></h2>
<p>How to add and remove elements from the front or low index end of an array.</p>
<p>These operations can be used to use the array as a stack. They can be used with the operations that manipulate the back of the array to use the array as a queue.</p>
<p><a name="array-concatenation-note" id="array-concatenation-note"></a></p>
<h2 id="toc132"><span><a href="#array-concatenation">concatenate</a></span></h2>
<p>How to create an array by concatenating two arrays; how to modify an array by concatenating another array to the end of it.</p>
<p><a name="array-replication-note" id="array-replication-note"></a></p>
<h2 id="toc133"><span><a href="#array-replication">replicate</a></span></h2>
<p>How to create an array containing the same value replicated <em>n</em> times.</p>
<p><a name="array-copy-note" id="array-copy-note"></a></p>
<h2 id="toc134"><span><a href="#array-copy">copy</a></span></h2>
<p>How to make an address copy, a shallow copy, and a deep copy of an array.</p>
<p>After an address copy is made, modifications to the copy also modify the original array.</p>
<p>After a shallow copy is made, the addition, removal, or replacement of elements in the copy does not modify of the original array. However, if elements in the copy are modified, those elements are also modified in the original array.</p>
<p>A deep copy is a recursive copy. The original array is copied and a deep copy is performed on all elements of the array. No change to the contents of the copy will modify the contents of the original array.</p>
<p><strong>python:</strong></p>
<p>The slice operator can be used to make a shallow copy:</p>
<div class="code">
<pre>
<code>a2 = a[:]</code>
</pre></div>
<p><tt>list(v)</tt> always returns a list, but <tt>v[:]</tt> returns a value of the same as <tt>v</tt>. The slice operator can be used in this manner on strings and tuples but there is little incentive to do so since both are immutable.</p>
<p><tt>copy.copy</tt> can be used to make a shallow copy on types that don't support the slice operator such as a dictionary. Like the slice operator <tt>copy.copy</tt> returns a value with the same type as the argument.</p>
<p><a name="array-arguments-note" id="array-arguments-note"></a></p>
<h2 id="toc135"><span><a href="#array-arguments">arrays as function arguments</a></span></h2>
<p>How arrays are passed as arguments.</p>
<p><a name="array-iterate-note" id="array-iterate-note"></a></p>
<h2 id="toc136"><span><a href="#array-iterate">iterate over elements</a></span></h2>
<p>How to iterate through the elements of an array.</p>
<p><a name="indexed-array-iteration-note" id="indexed-array-iteration-note"></a></p>
<h2 id="toc137"><span><a href="#indexed-array-iteration">iterate over indices and elements</a></span></h2>
<p>How to iterate through the elements of an array while keeping track of the index of each element.</p>
<p><a name="range-iteration-note" id="range-iteration-note"></a></p>
<h2 id="toc138"><span><a href="#range-iteration">iterate over range</a></span></h2>
<p>Iterate over a range without instantiating it as a list.</p>
<p><a name="range-array-note" id="range-array-note"></a></p>
<h2 id="toc139"><span><a href="#range-array">instantiate range as array</a></span></h2>
<p>How to convert a range to an array.</p>
<p>Python 3 ranges and Ruby ranges implement some of the functionality of arrays without allocating space to hold all the elements.</p>
<p><strong>python:</strong></p>
<p>In Python 2 <tt>range()</tt> returns a list.</p>
<p>In Python 3 <tt>range()</tt> returns an object which implements the immutable sequence API.</p>
<p><strong>ruby:</strong></p>
<p>The Range class includes the Enumerable module.</p>
<p><a name="array-reverse-note" id="array-reverse-note"></a></p>
<h2 id="toc140"><span><a href="#array-reverse">reverse</a></span></h2>
<p>How to create a reversed copy of an array, and how to reverse an array in place.</p>
<p><strong>python:</strong></p>
<p><tt>reversed</tt> returns an iterator which can be used in a <tt>for/in</tt> construct:</p>
<div class="code">
<pre>
<code>print("counting down:")
for i in reversed([1,2,3]):
  print(i)</code>
</pre></div>
<p><tt>reversed</tt> can be used to create a reversed list:</p>
<div class="code">
<pre>
<code>a = list(reversed([1,2,3]))</code>
</pre></div>
<p><a name="array-sort-note" id="array-sort-note"></a></p>
<h2 id="toc141"><span><a href="#array-sort">sort</a></span></h2>
<p>How to create a sorted copy of an array, and how to sort an array in place. Also, how to set the comparison function when sorting.</p>
<p><strong>php:</strong></p>
<p><tt>usort</tt> sorts an array in place and accepts a comparison function as a 2nd argument:</p>
<div class="code">
<pre>
<code>function cmp($x, $y) {
  $lx = strtolower($x);
  $ly = strtolower($y);
  if ( $lx &lt; $ly ) { return -1; }
  if ( $lx == $ly ) { return 0; }
  return 1;
}

$a = ["b", "A", "a", "B"];

usort($a, "cmp");</code>
</pre></div>
<p><strong>python:</strong></p>
<p>In Python 2 it is possible to specify a binary comparision function when calling <tt>sort</tt>:</p>
<div class="code">
<pre>
<code>a = [(1, 3), (2, 2), (3, 1)]

a.sort(cmp=lambda a, b: -1 if a[1] &lt; b[1] else 1)

# a now contains:
[(3, 1), (2, 2), (1, 3)]</code>
</pre></div>
<p>In Python 3 the <tt>cmp</tt> parameter was removed. One can achieve the same effect by defining <tt><span style="text-decoration: underline;">cmp</span></tt> method on the class of the list element.</p>
<p><a name="array-dedupe-note" id="array-dedupe-note"></a></p>
<h2 id="toc142"><span><a href="#array-dedupe">dedupe</a></span></h2>
<p>How to remove extra occurrences of elements from an array.</p>
<p><strong>python:</strong></p>
<p>Python sets support the <tt>len</tt>, <tt>in</tt>, and <tt>for</tt> operators. It may be more efficient to work with the result of the set constructor directly rather than convert it back to a list.</p>
<p><a name="membership-note" id="membership-note"></a></p>
<h2 id="toc143"><span><a href="#membership">membership</a></span></h2>
<p>How to test for membership in an array.</p>
<p><a name="intersection-note" id="intersection-note"></a></p>
<h2 id="toc144"><span><a href="#intersection">intersection</a></span></h2>
<p>How to compute an intersection.</p>
<p><strong>python:</strong></p>
<p>Python has literal notation for sets:</p>
<div class="code">
<pre>
<code>{1,2,3}</code>
</pre></div>
<p>Use <tt>set</tt> and <tt>list</tt> to convert lists to sets and vice versa:</p>
<div class="code">
<pre>
<code>a = list({1,2,3})
ensemble = set([1,2,3])</code>
</pre></div>
<p><strong>ruby:</strong></p>
<p>The intersect operator <tt>&amp;</tt> always produces an array with no duplicates.</p>
<p><a name="union-note" id="union-note"></a></p>
<h2 id="toc145"><span><a href="#union">union</a></span></h2>
<p><strong>ruby:</strong></p>
<p>The union operator <tt>|</tt> always produces an array with no duplicates.</p>
<p><a name="set-diff-note" id="set-diff-note"></a></p>
<h2 id="toc146"><span><a href="#set-diff">relative complement, symmetric difference</a></span></h2>
<p>How to compute the relative complement of two arrays or sets; how to compute the symmetric difference.</p>
<p><strong>ruby:</strong></p>
<p>If an element is in the right argument, then it will not be in the return value even if it is contained in the left argument multiple times.</p>
<p><a name="map-note" id="map-note"></a></p>
<h2 id="toc147"><span><a href="#map">map</a></span></h2>
<p>Create an array by applying a function to each element of a source array.</p>
<p><strong>ruby:</strong></p>
<p>The <tt>map!</tt> method applies the function to the elements of the array in place.</p>
<p><tt>collect</tt> and <tt>collect!</tt> are synonyms for <tt>map</tt> and <tt>map!</tt>.</p>
<p><a name="filter-note" id="filter-note"></a></p>
<h2 id="toc148"><span><a href="#filter">filter</a></span></h2>
<p>Create an array containing the elements of a source array which match a predicate.</p>
<p><strong>ruby:</strong></p>
<p>The in place version is <tt>select!</tt>.</p>
<p><tt>reject</tt> returns the complement of <tt>select</tt>. <tt>reject!</tt> is the in place version.</p>
<p>The <tt>partition</tt> method returns two arrays:</p>
<div class="code">
<pre>
<code>a = [1, 2, 3]
lt2, ge2 = a.partition { |n| n &lt; 2 }</code>
</pre></div>
<p><a name="reduce-note" id="reduce-note"></a></p>
<h2 id="toc149"><span><a href="#reduce">reduce</a></span></h2>
<p>Return the result of applying a binary operator to all the elements of the array.</p>
<p><strong>python:</strong></p>
<p><tt>reduce</tt> is not needed to sum a list of numbers:</p>
<div class="code">
<pre>
<code>sum([1,2,3])</code>
</pre></div>
<p><strong>ruby:</strong></p>
<p>The code for the reduction step can be provided by name. The name can be a symbol or a string:</p>
<div class="code">
<pre>
<code>[1,2,3].inject(:+)

[1,2,3].inject("+")

[1,2,3].inject(0, :+)

[1,2,3].inject(0, "+")</code>
</pre></div>
<p><a name="universal-existential-test-note" id="universal-existential-test-note"></a></p>
<h2 id="toc150"><span><a href="#universal-existential-test">universal and existential tests</a></span></h2>
<p>How to test whether a condition holds for all members of an array; how to test whether a condition holds for at least one member of any array.</p>
<p>A universal test is always true for an empty array. An existential test is always false for an empty array.</p>
<p>A existential test can readily be implemented with a filter. A universal test can also be implemented with a filter, but it is more work: one must set the condition of the filter to the negation of the predicate and test whether the result is empty.</p>
<p><a name="shuffle-sample-note" id="shuffle-sample-note"></a></p>
<h2 id="toc151"><span><a href="#shuffle-sample">shuffle and sample</a></span></h2>
<p>How to shuffle an array. How to extract a random sample from an array.</p>
<p><strong>php:</strong></p>
<p>The <tt>array_rand</tt> function returns a random sample of the indices of an array. The result can easily be converted to a random sample of array values:</p>
<div class="code">
<pre>
<code>$a = [1, 2, 3, 4];
$sample = [];
foreach (array_rand($a, 2) as $i) { array_push($sample, $a[$i]); }</code>
</pre></div>
<p><a name="flatten-note" id="flatten-note"></a></p>
<h2 id="toc152"><span><a href="#flatten">flatten</a></span></h2>
<p>How to flatten nested arrays by one level or completely.</p>
<p>When nested arrays are flattened by one level, the depth of each element which is not in the top level array is reduced by one.</p>
<p>Flattening nested arrays completely leaves no nested arrays. This is equivalent to extracting the leaf nodes of a tree.</p>
<p><strong>php, python:</strong></p>
<p>To flatten by one level use reduce. Remember to handle the case where an element is not array.</p>
<p>To flatten completely write a recursive function.</p>
<p><a name="zip-note" id="zip-note"></a></p>
<h2 id="toc153"><span><a href="#zip">zip</a></span></h2>
<p>How to interleave arrays. In the case of two arrays the result is an array of pairs or an associative list.</p>
<p><a name="dictionaries-note" id="dictionaries-note"></a></p>
<h1 id="toc154"><span><a href="#dictionaries">Dictionaries</a></span></h1>
<p><a name="dict-literal-note" id="dict-literal-note"></a></p>
<h2 id="toc155"><span><a href="#dict-literal">literal</a></span></h2>
<p>The syntax for a dictionary literal.</p>
<p><a name="dict-size-note" id="dict-size-note"></a></p>
<h2 id="toc156"><span><a href="#dict-size">size</a></span></h2>
<p>How to get the number of dictionary keys in a dictionary.</p>
<p><a name="dict-lookup-note" id="dict-lookup-note"></a></p>
<h2 id="toc157"><span><a href="#dict-lookup">lookup</a></span></h2>
<p>How to lookup a dictionary value using a dictionary key.</p>
<p><a name="dict-out-of-bounds-note" id="dict-out-of-bounds-note"></a></p>
<h2 id="toc158"><span><a href="#dict-out-of-bounds">out-of-bounds behavior</a></span></h2>
<p>What happens when a lookup is performed on a key that is not in a dictionary.</p>
<p><strong>python:</strong></p>
<p>Use <tt>dict.get()</tt> to avoid handling <tt>KeyError</tt> exceptions:</p>
<div class="code">
<pre>
<code>d = {}
d.get('lorem')      # returns None
d.get('lorem', '')  # returns ''</code>
</pre></div>
<p><a name="dict-key-check-note" id="dict-key-check-note"></a></p>
<h2 id="toc159"><span><a href="#dict-key-check">is key present</a></span></h2>
<p>How to check for the presence of a key in a dictionary without raising an exception. Distinguishes from the case where the key is present but mapped to null or a value which evaluates to false.</p>
<p><a name="dict-delete-note" id="dict-delete-note"></a></p>
<h2 id="toc160"><span><a href="#dict-delete">delete entry</a></span></h2>
<p>How to remove a key/value pair from a dictionary.</p>
<p><a name="dict-assoc-array-note" id="dict-assoc-array-note"></a></p>
<h2 id="toc161"><span><a href="#dict-assoc-array">from array of pairs, from even length array</a></span></h2>
<p>How to create a dictionary from an array of pairs; how to create a dictionary from an even length array.</p>
<p><a name="dict-merge-note" id="dict-merge-note"></a></p>
<h2 id="toc162"><span><a href="#dict-merge">merge</a></span></h2>
<p>How to merge the values of two dictionaries.</p>
<p>In the examples, if the dictionaries <tt>d1</tt> and <tt>d2</tt> share keys then the values from <tt>d2</tt> will be used in the merged dictionary.</p>
<p><a name="dict-invert-note" id="dict-invert-note"></a></p>
<h2 id="toc163"><span><a href="#dict-invert">invert</a></span></h2>
<p>How to turn a dictionary into its inverse. If a key 'foo' is mapped to value 'bar' by a dictionary, then its inverse will map the key 'bar' to the value 'foo'. However, if multiple keys are mapped to the same value in the original dictionary, then some of the keys will be discarded in the inverse.</p>
<p><a name="dict-iter-note" id="dict-iter-note"></a></p>
<h2 id="toc164"><span><a href="#dict-iter">iteration</a></span></h2>
<p>How to iterate through the key/value pairs in a dictionary.</p>
<p><strong>python:</strong></p>
<p>In Python 2.7 <tt>dict.items()</tt> returns a list of pairs and <tt>dict.iteritems()</tt> returns an iterator on the list of pairs.</p>
<p>In Python 3 <tt>dict.items()</tt> returns an iterator and <tt>dict.iteritems()</tt> has been removed.</p>
<p><a name="dict-key-val-note" id="dict-key-val-note"></a></p>
<h2 id="toc165"><span><a href="#dict-key-val">keys and values as arrays</a></span></h2>
<p>How to convert the keys of a dictionary to an array; how to convert the values of a dictionary to an array.</p>
<p><strong>python:</strong></p>
<p>In Python 3 <tt>dict.keys()</tt> and <tt>dict.values()</tt> return read-only views into the dict. The following code illustrates the change in behavior:</p>
<div class="code">
<pre>
<code>d = {}
keys = d.keys()
d['foo'] = 'bar'

if 'foo' in keys:
  print('running Python 3')
else:
  print('running Python 2')</code>
</pre></div>
<p><a name="dict-sort-values-note" id="dict-sort-values-note"></a></p>
<h2 id="toc166"><span><a href="#dict-sort-values">sort by values</a></span></h2>
<p>How to iterate through the key-value pairs in the order of the values.</p>
<p><a name="dict-default-val-note" id="dict-default-val-note"></a></p>
<h2 id="toc167"><span><a href="#dict-default-val">default value, computed value</a></span></h2>
<p>How to create a dictionary with a default value for missing keys; how to compute and store the value on lookup.</p>
<p><strong>php:</strong></p>
<p>Extend <tt>ArrayObject</tt> to compute values on lookup:</p>
<div class="code">
<pre>
<code>class Factorial extends ArrayObject {

  public function offsetExists($i) {
    return true;
  }

  public function offsetGet($i) {
    if(!parent::offsetExists($i)) {
      if ( $i &lt; 2 ) {
        parent::offsetSet($i, 1);
      }
      else {
        $n = $this-&gt;offsetGet($i-1);
        parent::offsetSet($i, $i*$n);
      }
    }
    return parent::offsetGet($i);
  }
}

$factorial = new Factorial();</code>
</pre></div>
<p><a name="functions-note" id="functions-note"></a></p>
<h1 id="toc168"><span><a href="#functions">Functions</a></span></h1>
<p>Python has both functions and methods. Ruby only has methods: functions defined at the top level are in fact methods on a special main object. Perl subroutines can be invoked with a function syntax or a method syntax.</p>
<p><a name="def-func-note" id="def-func-note"></a></p>
<h2 id="toc169"><span><a href="#def-func">define function</a></span></h2>
<p>How to define a function.</p>
<p><a name="invoke-func-note" id="invoke-func-note"></a></p>
<h2 id="toc170"><span><a href="#invoke-func">invoke function</a></span></h2>
<p>How to invoke a function.</p>
<p><strong>python:</strong></p>
<p>Parens are mandatory, even for functions which take no arguments. Omitting the parens returns the function or method as an object. Whitespace can occur between the function name and the following left paren.</p>
<p>In Python 3 print is a function instead of a keyword; parens are mandatory around the argument.</p>
<p><strong>ruby:</strong></p>
<p>Ruby parens are optional. Leaving out the parens results in ambiguity when function invocations are nested. The interpreter resolves the ambiguity by assigning as many arguments as possible to the innermost function invocation, regardless of its actual arity. It is mandatory that the left paren not be separated from the method name by whitespace.</p>
<p><a name="apply-func-note" id="apply-func-note"></a></p>
<h2 id="toc171"><span><a href="#apply-func">apply function to array</a></span></h2>
<p>How to apply a function to an array.</p>
<p><strong>perl:</strong></p>
<p>Perl passes the elements of arrays as individual arguments. In the following invocation, the function <tt>foo()</tt> does not know which arguments came from which array. For that matter it does not know how many arrays were used in the invocation:</p>
<div class="code">
<pre>
<code>foo(@a, @b);</code>
</pre></div>
<p>If the elements must be kept in their respective arrays the arrays must be passed by reference:</p>
<div class="code">
<pre>
<code>sub foo {
  my @a = @{$_[0]};
  my @b = @{$_[1]};
}

foo(\@a, \@b);</code>
</pre></div>
<p>When hashes are used as arguments, each key and value becomes its own argument.</p>
<p><a name="missing-arg-note" id="missing-arg-note"></a></p>
<h2 id="toc172"><span><a href="#missing-arg">missing argument behavior</a></span></h2>
<p>How incorrect number of arguments upon invocation are handled.</p>
<p><a name="default-arg-note" id="default-arg-note"></a></p>
<h2 id="toc173"><span><a href="#default-arg">default argument</a></span></h2>
<p>How to declare a default value for an argument.</p>
<p><a name="variable-num-arg-note" id="variable-num-arg-note"></a></p>
<h2 id="toc174"><span><a href="#variable-num-arg">variable number of arguments</a></span></h2>
<p>How to write a function which accepts a variable number of argument.</p>
<p><strong>python:</strong></p>
<p>This function accepts one or more arguments. Invoking it without any arguments raises a <tt>TypeError</tt>:</p>
<div class="code">
<pre>
<code>def poker(dealer, *players):
  ...</code>
</pre></div>
<p><strong>ruby:</strong></p>
<p>This function accepts one or more arguments. Invoking it without any arguments raises an <tt>ArgumentError</tt>:</p>
<div class="code">
<pre>
<code>def poker(dealer, *players)
  ...
end</code>
</pre></div>
<p><a name="named-param-note" id="named-param-note"></a></p>
<h2 id="toc175"><span><a href="#named-param">named parameters</a></span></h2>
<p>How to write a function which uses named parameters and how to invoke it.</p>
<p><strong>python:</strong></p>
<p>The caller can use named parameter syntax at the point of invocation even if the function was defined using positional parameters.</p>
<p>The splat operator * collects the remaining arguments into a list. In a function invocation, the splat can be used to expand an array into separate arguments.</p>
<p>The double splat operator ** collects named parameters into a dictionary. In a function invocation, the double splat expands a dictionary into named parameters.</p>
<p>A double splat operator can be used to force the caller to use named parameter syntax. This method has the disadvantage that spelling errors in the parameter name are not caught:</p>
<div class="code">
<pre>
<code>def fequal(x, y, **kwargs):
  eps = opts.get('eps') or 0.01
  return abs(x - y) &lt; eps</code>
</pre></div>
<p>In Python 3 named parameters can be made mandatory:</p>
<div class="code">
<pre>
<code>def fequal(x, y, *, eps):
  return abs(x-y) &lt; eps

fequal(1.0, 1.001, eps=0.01)  # True

fequal(1.0, 1.001)                 # raises TypeError</code>
</pre></div>
<p><a name="pass-num-str-by-ref-note" id="pass-num-str-by-ref-note"></a></p>
<h2 id="toc176"><span><a href="#pass-num-str-by-ref">pass number or string by reference</a></span></h2>
<p>How to pass numbers or strings by reference.</p>
<p>The three common methods of parameter passing are <em>pass by value</em>, <em>pass by reference</em>, and <em>pass by address</em>. Pass by value is the default in most languages.</p>
<p>When a parameter is passed by reference, the callee can changed the value in the variable that was provided as a parameter, and the caller will see the new value when the callee returns. When the parameter is passed by value the callee cannot do this.</p>
<p>When a language has mutable data types it can be unclear whether the language is using pass by value or pass by reference.</p>
<p><a name="pass-array-dict-by-ref-note" id="pass-array-dict-by-ref-note"></a></p>
<h2 id="toc177"><span><a href="#pass-array-dict-by-ref">pass array or dictionary by reference</a></span></h2>
<p>How to pass an array or dictionary without making a copy of it.</p>
<p><a name="retval-note" id="retval-note"></a></p>
<h2 id="toc178"><span><a href="#retval">return value</a></span></h2>
<p>How the return value of a function is determined.</p>
<p><a name="multiple-retval-note" id="multiple-retval-note"></a></p>
<h2 id="toc179"><span><a href="#multiple-retval">multiple return values</a></span></h2>
<p>How to return multiple values from a function.</p>
<p><a name="lambda-note" id="lambda-note"></a></p>
<h2 id="toc180"><span><a href="#lambda">lambda declaration and invocation</a></span></h2>
<p>How to define and invoke a lambda function.</p>
<p><strong>python:</strong></p>
<p>Python lambdas cannot contain newlines or semicolons, and thus are limited to a single statement or expression. Unlike named functions, the value of the last statement or expression is returned, and a <em>return</em> is not necessary or permitted. Lambdas are closures and can refer to local variables in scope, even if they are returned from that scope.</p>
<p>If a closure function is needed that contains more than one statement, use a nested function:</p>
<div class="code">
<pre>
<code>def make_nest(x):
    b = 37
    def nest(y):
        c = x*y
        c *= b
        return c
    return nest

n = make_nest(12*2)
print(n(23))</code>
</pre></div>
<p>Python closures are read only.</p>
<p>A nested function can be returned and hence be invoked outside of its containing function, but it is not visible by its name outside of its containing function.</p>
<p><strong>ruby:</strong></p>
<p>The following lambda and Proc object behave identically:</p>
<div class="code">
<pre>
<code>sqr = lambda { |x| x * x }

sqr = Proc.new {|x| x * x }</code>
</pre></div>
<p>With respect to control words, Proc objects behave like blocks and lambdas like functions. In particular, when the body of a Proc object contains a <tt>return</tt> or <tt>break</tt> statement, it acts like a <tt>return</tt> or <tt>break</tt> in the code which invoked the Proc object. A <tt>return</tt> in a lambda merely causes the lambda to exit, and a <tt>break</tt> inside a lambda must be inside an appropriate control structure contained with the lambda body.</p>
<p>Ruby are alternate syntax for defining lambdas and invoking them:</p>
<div class="code">
<pre>
<code>sqr = -&gt;(x) {x*x}

sqr.(2)</code>
</pre></div>
<p><a name="func-as-val-note" id="func-as-val-note"></a></p>
<h2 id="toc181"><span><a href="#func-as-val">function as value</a></span></h2>
<p>How to store a function in a variable and pass it as an argument.</p>
<p><strong>php:</strong></p>
<p>If a variable containing a string is used like a function then PHP will look for a function with the name in the string and attempt to invoke it.</p>
<p><strong>python:</strong></p>
<p>Python function are stored in variables by default. As a result a function and a variable with the same name cannot share the same scope. This is also the reason parens are mandatory when invoking Python functions.</p>
<p><a name="private-state-func-note" id="private-state-func-note"></a></p>
<h2 id="toc182"><span><a href="#private-state-func">function with private state</a></span></h2>
<p>How to create a function with private state which persists between function invocations.</p>
<p><strong>python:</strong></p>
<p>Here is a technique for creating private state which exploits the fact that the expression for a default value is evaluated only once:</p>
<div class="code">
<pre>
<code>def counter(_state=[0]):
  _state[0] += 1
  return _state[0]

print(counter())</code>
</pre></div>
<p><a name="closure-note" id="closure-note"></a></p>
<h2 id="toc183"><span><a href="#closure">closure</a></span></h2>
<p>How to create a first class function with access to the local variables of the local scope in which it was created.</p>
<p><strong>python:</strong></p>
<p>Python 2 has limited closures: access to local variables in the containing scope is read only and the bodies of anonymous functions must consist of a single expression.</p>
<p>Python 3 permits write access to local variables outside the immediate scope when declared with <tt>nonlocal</tt>.</p>
<p><a name="generator-note" id="generator-note"></a></p>
<h2 id="toc184"><span><a href="#generator">generator</a></span></h2>
<p>How to create a function which can yield a value back to its caller and suspend execution.</p>
<p><strong>python:</strong></p>
<p>A Python generator is a function which returns an iterator.</p>
<p>An iterator is an object with two methods: <tt><span style="text-decoration: underline;">iter</span>()</tt>, which returns the iterator itself, and <tt>next()</tt>, which returns the next item or raises a <tt>StopIteration</tt> exception.</p>
<p>Python sequences, of which lists are an example, define an <tt><span style="text-decoration: underline;">iter</span>()</tt> for returned an iterator which traverses the sequence.</p>
<p>Python iterators can be used in <em>for/in</em> statements and list comprehensions.</p>
<p>In the table below, <tt>p</tt> and <tt>q</tt> are variables for iterators.</p>
<table class="wiki-content-table"><tr><th colspan="2">itertools</th>
</tr><tr><th>generator</th>
<th>description</th>
</tr><tr><td>count(start=0, step=1)</td>
<td>arithmetic sequence of integers</td>
</tr><tr><td>cyle(p)</td>
<td>cycle over <tt>p</tt> endlessly</td>
</tr><tr><td>repeat(v, [n])</td>
<td>return <tt>v</tt> <tt>n</tt> times, or endlessly</td>
</tr><tr><td>chain(p, q)</td>
<td><tt>p</tt> followed by <tt>q</tt></td>
</tr><tr><td>compress(p, q)</td>
<td><tt>p</tt> if <tt>q</tt></td>
</tr><tr><td>groupby(p, func)</td>
<td></td>
</tr><tr><td>ifilter(pred, p)</td>
<td><tt>p</tt> if <tt>pred(p)</tt></td>
</tr><tr><td>ifilterfalse(pred, p)</td>
<td><tt>p</tt> if not <tt>pred(p)</tt></td>
</tr><tr><td>islice(p, [start], stop, [step])</td>
<td></td>
</tr><tr><td>imap</td>
<td></td>
</tr><tr><td>starmap()</td>
<td></td>
</tr><tr><td>tee()</td>
<td></td>
</tr><tr><td>takewhile()</td>
<td></td>
</tr><tr><td>izip()</td>
<td></td>
</tr><tr><td>izip_longest()</td>
<td></td>
</tr><tr><td>product()</td>
<td></td>
</tr><tr><td>permutations()</td>
<td></td>
</tr><tr><td>combinations()</td>
<td></td>
</tr><tr><td>combinations_with_replacement()</td>
<td></td>
</tr></table><p><strong>ruby:</strong></p>
<p>Ruby generators are called fibers.</p>
<p><a name="decorator-note" id="decorator-note"></a></p>
<h2 id="toc185"><span><a href="#decorator">decorator</a></span></h2>
<p>A decorator replaces an invocation of one function with another in a way that that is imperceptible to the client.</p>
<p>Normally a decorator will add a small amount of functionality to the original function which it invokes. A decorator can modify the arguments before passing them to the original function or modify the return value before returning it to the client. Or it can leave the arguments and return value unmodified but perform a side effect such as logging the call.</p>
<p><a name="op-as-func-note" id="op-as-func-note"></a></p>
<h2 id="toc186"><span><a href="#op-as-func">operator as function</a></span></h2>
<p>How to call an operator using the function invocation syntax.</p>
<p>This can be useful when dealing with an API which accepts a function as an argument.</p>
<p><strong>python:</strong></p>
<p>The <tt>operator</tt> module provides functions which perform the same operations as the various operators. Using these functions is more efficient than wrapping the operators in lambdas.</p>
<p><strong>ruby:</strong></p>
<p>All operators can be invoked with method invocation syntax. The binary operator invocation syntax can be regarded as syntactic sugar.</p>
<p><a name="execution-control-note" id="execution-control-note"></a></p>
<h1 id="toc187"><span><a href="#execution-control">Execution Control</a></span></h1>
<p><a name="if-note" id="if-note"></a></p>
<h2 id="toc188"><span><a href="#if">if</a></span></h2>
<p>The <tt>if</tt> statement.</p>
<p><strong>php:</strong></p>
<p>PHP has the following alternate syntax for <tt>if</tt> statements:</p>
<div class="code">
<pre>
<code>if ($n == 0): 
  echo "no hits\n";
elseif ($n == 1):
  echo "one hit\n";
else:
  echo "$n hits\n";
endif;</code>
</pre></div>
<p><strong>ruby:</strong></p>
<p>If an <tt>if</tt> statement is the last statement executed in a function, the return value is the value of the branch that executed.</p>
<p>Ruby <tt>if</tt> statements are expressions. They can be used on the right hand side of assignments:</p>
<div class="code">
<pre>
<code>m = if n
  1
else
  0
end</code>
</pre></div>
<p><a name="switch-note" id="switch-note"></a></p>
<h2 id="toc189"><span><a href="#switch">switch</a></span></h2>
<p>The <tt>switch</tt> statement.</p>
<p><a name="while-note" id="while-note"></a></p>
<h2 id="toc190"><span><a href="#while">while</a></span></h2>
<p><strong>php:</strong></p>
<p>PHP provides a <tt>do-while</tt> loop. The body of such a loop is guaranteed to execute at least once.</p>
<div class="code">
<pre>
<code>$i = 0;
do {
    echo $i;
} while ($i &gt; 0);</code>
</pre></div>
<p><strong>ruby:</strong></p>
<p>Ruby provides a loop with no exit condition:</p>
<div class="code">
<pre>
<code>def yes(expletive="y")
  loop do
   puts expletive
  end
end</code>
</pre></div>
<p>Ruby also provides the <tt>until</tt> loop.</p>
<p>Ruby loops can be used in expression contexts but they always evaluate to <tt>nil</tt>.</p>
<p><a name="for-note" id="for-note"></a></p>
<h2 id="toc191"><span><a href="#for">c-style for</a></span></h2>
<p>How to write a C-style for loop.</p>
<p><a name="break-continue-note" id="break-continue-note"></a></p>
<h2 id="toc192"><span><a href="#break-continue">break, continue, redo</a></span></h2>
<p><em>break</em> exits a <em>for</em> or <em>while</em> loop immediately. <em>continue</em> goes to the next iteration of the loop. <em>redo</em> goes back to the beginning of the current iteration.</p>
<p><a name="control-keywords-note" id="control-keywords-note"></a></p>
<h2 id="toc193"><span><a href="#control-keywords">control structure keywords</a></span></h2>
<p>A list of control structure keywords. The loop control keywords from the previous line are excluded.</p>
<p>The list summarizes the available control structures. It excludes the keywords for exception handling, loading libraries, and returning from functions.</p>
<p><a name="do-note" id="do-note"></a></p>
<h2 id="toc194"><span><a href="#do">what do does</a></span></h2>
<p>How the <tt>do</tt> keyword is used.</p>
<p><a name="statement-modifiers-note" id="statement-modifiers-note"></a></p>
<h2 id="toc195"><span><a href="#statement-modifiers">statement modifiers</a></span></h2>
<p>Clauses added to the end of a statement to control execution.</p>
<p>Ruby has conditional statement modifiers. Ruby also has looping statement modifiers.</p>
<p><strong>ruby:</strong></p>
<p>Ruby has the looping statement modifiers <tt>while</tt> and <tt>until</tt>:</p>
<div class="code">
<pre>
<code>i = 0
i += 1 while i &lt; 10

j = 10
j -= 1 until j &lt; 0</code>
</pre></div>
<p><a name="exceptions-note" id="exceptions-note"></a></p>
<h1 id="toc196"><span><a href="#exceptions">Exceptions</a></span></h1>
<p><a name="base-exc-note" id="base-exc-note"></a></p>
<h2 id="toc197"><span><a href="#base-exc">base exception</a></span></h2>
<p><a name="predefined-exc-note" id="predefined-exc-note"></a></p>
<h2 id="toc198"><span><a href="#predefined-exc">predefined exceptions</a></span></h2>
<p><a name="raise-exc-note" id="raise-exc-note"></a></p>
<h2 id="toc199"><span><a href="#raise-exc">raise exception</a></span></h2>
<p>How to raise exceptions.</p>
<p><strong>ruby:</strong></p>
<p>Ruby has a <em>throw</em> keyword in addition to <em>raise</em>. <em>throw</em> can have a symbol as an argument, and will not convert a string to a RuntimeError exception.</p>
<p><a name="catch-exc-note" id="catch-exc-note"></a></p>
<h2 id="toc200"><span><a href="#catch-exc">catch exception</a></span></h2>
<p>How to catch exceptions.</p>
<p><strong>php:</strong></p>
<p>PHP code must specify a variable name for the caught exception. <em>Exception</em> is the top of the exception hierarchy and will catch all exceptions.</p>
<p>Internal PHP functions usually do not throw exceptions. They can be converted to exceptions with this signal handler:</p>
<div class="code">
<pre>
<code>function exception_error_handler($errno, $errstr, $errfile, $errline ) {
    throw new ErrorException($errstr, 0, $errno, $errfile, $errline);
}
set_error_handler("exception_error_handler");</code>
</pre></div>
<p><strong>ruby:</strong></p>
<p>A <em>rescue Exception</em> clause will catch any exception. A <em>rescue</em> clause with no exception type specified will catch exceptions that are subclasses of <em>StandardError</em>. Exceptions outside <em>StandardError</em> are usually unrecoverable and hence not handled in code.</p>
<p>In a <em>rescue</em> clause, the <em>retry</em> keyword will cause the <em>begin</em> clause to be re-executed.</p>
<p>In addition to <em>begin</em> and <em>rescue</em>, ruby has <em>catch</em>:</p>
<div class="code">
<pre>
<code>catch (:done) do
  loop do
    retval = work
    throw :done if retval &lt; 10
  end
end</code>
</pre></div>
<p><a name="re-raise-exc-note" id="re-raise-exc-note"></a></p>
<h2 id="toc201"><span><a href="#re-raise-exc">re-raise exception</a></span></h2>
<p>How to re-raise an exception preserving the original stack trace.</p>
<p><strong>python:</strong></p>
<p>If the exception is assigned to a variable in the <tt>except</tt> clause and the variable is used as the argument to <tt>raise</tt>, then a new stack trace is created.</p>
<p><strong>ruby:</strong></p>
<p>If the exception is assigned to a variable in the <tt>rescue</tt> clause and the variable is used as the argument to <tt>raise</tt>, then the original stack trace is preserved.</p>
<p><a name="last-exc-global-note" id="last-exc-global-note"></a></p>
<h2 id="toc202"><span><a href="#last-exc-global">global variable for last exception</a></span></h2>
<p>The global variable name for the last exception raised.</p>
<p><a name="def-exc-note" id="def-exc-note"></a></p>
<h2 id="toc203"><span><a href="#def-exc">define exception</a></span></h2>
<p>How to define a new variable class.</p>
<p><a name="name-exc-note" id="name-exc-note"></a></p>
<h2 id="toc204"><span><a href="#name-exc">catch exception by type</a></span></h2>
<p>How to catch exceptions of a specific type and assign the exception a name.</p>
<p><strong>php:</strong></p>
<p>PHP exceptions when caught must always be assigned a variable name.</p>
<p><a name="finally-ensure-note" id="finally-ensure-note"></a></p>
<h2 id="toc205"><span><a href="#finally-ensure">finally/ensure</a></span></h2>
<p>Clauses that are guaranteed to be executed even if an exception is thrown or caught.</p>
<p><a name="concurrency-note" id="concurrency-note"></a></p>
<h1 id="toc206"><span><a href="#concurrency">Concurrency</a></span></h1>
<p><a name="start-thread-note" id="start-thread-note"></a></p>
<h2 id="toc207"><span><a href="#start-thread">start thread</a></span></h2>
<p><strong>ruby:</strong></p>
<p>Ruby MRI threads are operating system threads, but a global interpreter lock prevents more than one thread from executing Ruby code at a time.</p>
<p><a name="wait-on-thread-note" id="wait-on-thread-note"></a></p>
<h2 id="toc208"><span><a href="#wait-on-thread">wait on thread</a></span></h2>
<p>How to make a thread wait for another thread to finish.</p>
<p><a name="javascript" id="javascript"></a></p>
<h1 id="toc209"><span><a href="#top">JavaScript</a></span></h1>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript">Mozilla Developer Network: JavaScript</a></p>
<p><a name="browsers" id="browsers"></a></p>
<h1 id="toc210"><span><a href="#top">Browsers</a></span></h1>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/API/document">Mozilla Developer Network: Document</a><br /><a href="https://developer.mozilla.org/en-US/docs/Web/API/Window">Mozilla Document Network: Window</a><br /><a href="http://www.w3.org/TR/DOM-Level-3-Core/">W3C: Document Object Model (DOM) Level 3 Core Specification</a><br /><a href="http://www.w3.org/TR/DOM-Level-3-Events/">W3C: Document Object Model (DOM) Level 3 Events Specification</a></p>
<p>Most browsers include a debugger which can be launched with a keystroke:</p>
<table class="wiki-content-table"><tr><th>browser</th>
<th>mac</th>
<th>windows</th>
<th>linux</th>
</tr><tr><td>Chrome</td>
<td>⌥⌘J</td>
<td>Cmd+Shift+J</td>
<td>Cmd+Shift+J</td>
</tr><tr><td>Firefox</td>
<td>⌥⌘S</td>
<td>Cmd+Shift+S</td>
<td>Cmd+Shift+S</td>
</tr><tr><td>Safari</td>
<td>⌥⌘C</td>
<td></td>
<td></td>
</tr></table><p>The debugger has a console pane, which is a JavaScript REPL.</p>
<div class="code">
<pre>
<code>&gt; Math.log(10)
2.302585092994046

&gt; alert("Hello, World!")</code>
</pre></div>
<p>The console provides a global object named <tt>document</tt> which provides access to the DOM of the current page:</p>
<div class="code">
<pre>
<code>&gt; document.getElementsByTagName("div").length
302</code>
</pre></div>
<p><em>TODO: more ways to select node elements. Attributes of node elements.</em></p>
<p>There is also a global object named <tt>window</tt> which is useful.</p>
<p>JavaScript can be embedded in an HTML document using the <tt>&lt;script&gt;</tt> tag:</p>
<div class="code">
<pre>
<code>&lt;script&gt;
  var sum = 1 + 2;
  alert('the sum is ' + sum);
&lt;/script&gt;</code>
</pre></div>
<p>Alternatively the JavaScript can be in a separate file served by the same server:</p>
<div class="code">
<pre>
<code>&lt;script src="foo.js"&gt;&lt;/script&gt;</code>
</pre></div>
<p><tt>&lt;script&gt;</tt> tags can be placed in either the <tt>&lt;head&gt;</tt> or the <tt>&lt;body&gt;</tt> of an <tt>&lt;html&gt;</tt> document. They are executed as they are encountered by the browser. If there is a syntax error, then none of the JavaScript in the <tt>&lt;script&gt;</tt> tag is executed. If there is an unhandled exception, the browser stops execution of the <tt>&lt;script&gt;</tt> at that point. Neither syntax errors nor unhandled exceptions prevent the browser from executing JavaScript in subsequent <tt>&lt;script&gt;</tt> tags.</p>
<p><em>using JavaScript to modify the DOM</em></p>
<p><em>waiting for all JavaScript to load</em></p>
<p><em>javascript URL</em></p>
<p><em>DOM events</em></p>
<p>To guard against websites serving malicious JavaScript code, the JavaScript interpreters in browsers do not provide the ability to interact with the local operating system. In particular, client-side JavaScript cannot read or write to files. Client-side JavaScript cannot spawn other processes.</p>
<p>Client-side JavaScript can make HTTP requests. Client-side JavaScript can modify the DOM of an HTML page which was served from the same <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Same_origin_policy_for_JavaScript">origin</a> as the JavaScript. To be from the same origin, the URLs must have the same protocol, domain, and port. Client-side JavaScript can also get and set cookies which share the same origin. The origin policy for cookies is slightly relaxed, since the JavaScript can also get and set cookies for a parent domain, excluding public top level domains such as <tt>.com</tt>, <tt>.net</tt>, and <tt>.org</tt>.</p>
<p><a name="node" id="node"></a></p>
<h1 id="toc211"><span><a href="#top">Node</a></span></h1>
<p><a href="http://nodejs.org/api/">Node.js</a></p>
<p><em>using node</em></p>
<p><em>asynchronous programming</em></p>
<p><a name="php" id="php"></a></p>
<h1 id="toc212"><span><a href="#top">PHP</a></span></h1>
<p><a href="http://www.php.net/manual/en/">PHP Manual</a></p>
<p>The PHP interpreter is packaged in 3 different ways: (1) as a standalone executable which can be executed as a CGI script, (2) as a dynamically linked library which adheres to the SAPI of a webserver such as Apache or IIS, and (3) as a standalone executable which can be used to run PHP scripts from the command line. The latter executable is called PHP CLI.</p>
<p>From the perspective of a PHP programmer, there no important differences between PHP CGI and PHP SAPI. The programmer should be aware of the following differences between PHP CGI/SAPI and PHP CLI:</p>
<ul><li>PHP CGI/SAPI writes HTTP headers to standard out before any output specified by the program. PHP CLI does not.</li>
<li>PHP CLI sets the constants STDIN, STDOUT, and STDERR. PHP CGI/SAPI do not.</li>
<li>PHP CLI has no timeout. PHP CGI/SAPI will typically timeout a script after 30 seconds.</li>
<li>PHP CGI/SAPI add HTML markup to error messages. PHP CLI does not.</li>
<li>PHP CLI does not buffer output, so calling <tt>flush</tt> is never necessary. PHP CGI/SAPI buffer output.</li>
</ul><p><a name="python" id="python"></a></p>
<h1 id="toc213"><span><a href="#top">Python</a></span></h1>
<p>2.7: <a href="http://docs.python.org/reference/index.html">Language</a>, <a href="http://docs.python.org/library/index.html">Standard Library</a><br />
3.2: <a href="http://docs.python.org/py3k/reference/index.html">Language</a>, <a href="http://docs.python.org/py3k/library/index.html">Standard Library</a></p>
<p>Python uses leading whitespace to indicate block structure. It is not recommended to mix tabs and spaces in leading whitespace, but when this is done, a tab is equal to 8 spaces. The command line options '-t' and '-tt' will warn and raise an error respectively when tabs are used inconsistently for indentation.</p>
<p>Regular expressions and functions for interacting with the operating system are not available by default and must be imported to be used, i.e.</p>
<div class="code">
<pre>
<code>import re, sys, os</code>
</pre></div>
<p>Identifiers in imported modules must be fully qualified unless imported with <em>from/import</em>:</p>
<div class="code">
<pre>
<code>from sys import path
from re import *</code>
</pre></div>
<p>There are two basic sequence types: the mutable list and the immutable tuple. The literal syntax for lists uses square brackets and commas [1,2,3] and the literal syntax for tuples uses parens and commas (1,2,3).</p>
<p>The dictionary data type literal syntax uses curly brackets, colons, and commas { “hello”:5, “goodbye”:7 }. Python 3 adds a literal syntax for sets which uses curly brackets and commas: {1,2,3}. This notation is also available in Python 2.7. Dictionaries and sets are implemented using hash tables and as a result dictionary keys and set elements must be hashable.</p>
<p>All values that can be stored in a variable and passed to functions as arguments are objects in the sense that they have methods which can be invoked using the method syntax.</p>
<p>Attributes are settable by default. This can be changed by defining a <span style="white-space: pre-wrap;">__setattr__</span> method for the class. The attributes of an object are stored in the <span style="white-space: pre-wrap;">__dict__</span> attribute. Methods must declare the receiver as the first argument.</p>
<p>Classes, methods, functions, and modules are objects. If the body of a class, method, or function definition starts with is a string, it is available available at runtime via <span style="white-space: pre-wrap;">__doc__</span>. Code examples in the string which are preceded with <span style="white-space: pre-wrap;">'&gt;&gt;&gt;'</span> (the python repl prompt) can be executed by doctest and compared with the output that follows.</p>
<p><a name="ruby" id="ruby"></a></p>
<h1 id="toc214"><span><a href="#top">Ruby</a></span></h1>
<p><a href="http://www.ruby-doc.org/core-1.9.3/">1.9.3 core</a>, <a href="http://ruby-doc.org/stdlib/">stdlib</a></p>
<p>Ruby has a type of value called a symbol. The literal syntax for a symbol is :<span style="color: gray"><em>identifier</em></span> or :"<span style="color: gray"><em>arbitrary string</em></span>". The methods <tt>to_s</tt> and <tt>to_sym</tt> can be used to convert symbols to strings and strings to symbols. Symbols can be used to pass functions or methods as arguments by name. They can be used as keys in Hash objects in place of strings, but the client must remember the type of the keys since <tt>:foo != "foo"</tt>. Also note that converting a Hash object with symbols as keys to JSON and then back will yield a Hash object with strings as keys.</p>
<p>In Ruby all values that can be stored in a variable and passed to functions as arguments are objects in the sense that they have methods which can be invoked using the method syntax. Moreover classes are objects. The system provided classes are open and as a result the user can add methods to classes such as <tt>String</tt>, <tt>Array</tt>, or <tt>Fixnum</tt>. Ruby only permits single inheritance, but Ruby modules are mix-ins and can be used to add methods to a class via the <tt>include</tt> statement.</p>
<p>Ruby methods can be declared private and this is enforced by the interpreter. Object attributes are private by default and attribute names have an ampersand @ prefix. The methods <tt>attr_reader</tt>, <tt>attr_writer</tt>, and <tt>attr_accessor</tt> can be used in a class block to define a getter, setter, or both for an attribute.</p>
<p>When invoking a method the parens are optional. If there are two or more arguments they must still be separated by commas. If one of the arguments is an expression containing a method invocation with arguments, then the Ruby interpreter will assign as many arguments as possible to the innermost method invocation.</p>
<p>Inside a Ruby method, the <tt>self</tt> keyword refers to the receiver. It is not declared when defining the method. Ruby functions are implemented as methods on an object called <em>main</em> which has the special property that any methods defined on it become instance methods in the <tt>Object</tt> class which is a base class of most Ruby objects. This makes the method available everywhere. Methods defined at the top level are also added to the <em>main</em> object and the <tt>Object</tt> class. Functions which Ruby provides by default are instance methods defined the <tt>Object</tt> class or the <tt>Kernel</tt> module.</p>
<p>Ruby methods are not objects and cannot directly be stored in variables. It is worth emphasizing that the Python interpreter when encountering a method identifier with no parens returns the method as an object value, but the Ruby interpreter invokes the method. As mentioned earlier, methods can be passed by name using symbols. If a method receives a symbol representing a method as an argument, it can invoke the method with the syntax :<span style="color: gray"><em>symbol</em></span>.to_proc.call(<span style="color: gray"><em>args…</em></span>). Note that <tt>to_proc</tt> resolves the symbol to the method that is in scope where it is invoked.</p>
<p>Although passing a method or a function is a bit awkward, Ruby provides a convenient mechanism called <em>blocks</em> for simultaneously defining an anonymous function at the invocation of a method and providing it to the method as an argument. The block appears immediately after the closing paren of the method invocation and uses either the { |<span style="color: gray"><em>args…</em></span>| <span style="color: gray"><em>body</em></span> } or <tt>do</tt> |<span style="color: gray"><em>args…</em></span>| <span style="color: gray"><em>body</em></span> <tt>end</tt> syntax. The invoked method can in turn invoke the block with the <tt>yield</tt> keyword.</p>
<p>Ruby blocks are closures like lambda functions and can see local variables in the enclosing scope in which they were defined. The parameters of the block are local to the block. Semicolon syntax is available so that identifiers listed after the arguments could be made local to the block even if already defined in the containing scope.</p>
<p>The <tt>lambda</tt> keyword or the <tt>Proc.new</tt> constructor can be used to store an anonymous function in a variable. The function can be invoked with <span style="color: gray"><em>variable</em></span>.call(). If such a function is passed to a method argument as the last argument and preceded with an ampersand, the function will be used as the block for the method. Conversely, if the last argument in a method definition is preceded with an ampersand, any block provided to the function will be bound to the argument name as an anonymous function.</p>

                    </div>
        </div>
      </div>
      <div id="license-area" class="license-area">
        content of this page licensed under
        <a rel="license" href="http://creativecommons.org/licenses/by-sa/3.0/">
        creative commons attribution-sharealike 3.0</a>
      </div>
    </div>
  </div>
</div>

<script type="text/javascript">

  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-17129977-2']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();

</script>

</body>
</html>
