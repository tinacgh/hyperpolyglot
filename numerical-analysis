<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="content-type" content="text/html;charset=UTF-8"/>
<link rel="icon" type="image/gif" href="/favicon.gif"/>
<link rel="apple-touch-icon" sizes="120x120" href="touch-icon-iphone-retina.png" />
<link rel="apple-touch-icon" sizes="152x152" href="touch-icon-ipad-retina.png" />
<title>Numerical Analysis &amp; Statistics: MATLAB, R, NumPy - Hyperpolyglot</title>
<script type="text/javascript"
  src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML">
</script>

<style type="text/css" id="internal-style">
@import url(hyperpolyglot.css);
</style>
<meta http-equiv="content-type" content="text/html;charset=UTF-8"/>
<meta http-equiv="content-language" content="en"/>
</head>
<body>
<div id="container-wrap-wrap">
  <div id="container-wrap">
    <div id="container">
      <div id="header">
        <h1><a href="/"><span>Hyperpolyglot</span></a></h1>
      </div>
      <div id="content-wrap">
        <div id="main-content">
<div id="page-title">
                            Numerical Analysis &amp; Statistics: MATLAB, R, NumPy
                        </div>
<div id="page-content">
                        

<p><a name="top" shape="rect" id="top"></a><em>a side-by-side reference sheet</em></p>
<p><a href="#grammar-invocation" shape="rect">grammar and invocatfion</a> | <a href="#var-expr" shape="rect">variables and expressions</a> | <a href="#arithmetic-logic" shape="rect">arithmetic and logic</a> | <a href="#strings" shape="rect">strings</a> | <a href="#regexes" shape="rect">regexes</a> | <a href="#dates-time" shape="rect">dates and time</a> | <a href="#tuples" shape="rect">tuples</a> | <a href="#arrays" shape="rect">arrays</a> | <a href="#arithmetic-sequences" shape="rect">arithmetic sequences</a> | <a href="#multidimensional-arrays" shape="rect">multidimensional arrays</a> | <a href="#dictionaries" shape="rect">dictionaries</a> | <a href="#functions" shape="rect">functions</a> | <a href="#execution-control" shape="rect">execution control</a> | <a href="#file-handle" shape="rect">file handles</a> | <a href="#directories" shape="rect">directories</a> | <a href="#processes-environment" shape="rect">processes and environment</a> | <a href="#libraries-namespaces" shape="rect">libraries and namespaces</a> | <a href="#reflection" shape="rect">reflection</a></p>
<p><a href="#data-frames" shape="rect">data frames</a> | <a href="#import-export" shape="rect">import and export</a> | <a href="#relational-algebra" shape="rect">relational algebra</a> | <a href="#aggregation" shape="rect">aggregation</a></p>
<p><a href="#vectors" shape="rect">vectors</a> | <a href="#matrices" shape="rect">matrices</a> | <a href="#descriptive-statistics" shape="rect">descriptive statistics</a> | <a href="#distributions" shape="rect">distributions</a> | <a href="#linear-models" shape="rect">linear models</a> | <a href="#polynomial-interpolation" shape="rect">polynomial interpolation</a> | <a href="#statistical-tests" shape="rect">statistical tests</a> | <a href="#time-series-analysis" shape="rect">time series analysis</a> | <a href="#univariate-charts" shape="rect">univariate charts</a> | <a href="#bivariate-charts" shape="rect">bivariate charts</a> | <a href="#multivariate-charts" shape="rect">multivariate charts</a></p>
<table class="wiki-content-table"><tr><th rowspan="1" colspan="1"></th><th rowspan="1" colspan="1"><a href="#matlab" shape="rect">matlab</a></th><th rowspan="1" colspan="1"><a href="#r" shape="rect">r</a></th><th rowspan="1" colspan="1"><a href="#numpy" shape="rect">numpy</a></th></tr><tr><td rowspan="1" colspan="1"><a name="version-used" shape="rect" id="version-used"></a><a href="#version-used-note" shape="rect">version used</a></td><td rowspan="1" colspan="1"><span style="color: gray"><em>Octave 3.6</em></span></td><td rowspan="1" colspan="1"><span style="color: gray"><em>3.0</em></span></td><td rowspan="1" colspan="1"><span style="color: gray"><em>Python 2.7</em></span><br /><span style="color: gray"><em>NumPy 1.6</em></span><br /><span style="color: gray"><em>SciPy 0.10</em></span><br /><span style="color: gray"><em>Pandas 0.9</em></span><br /><span style="color: gray"><em>Matplotlib 1.0</em></span></td></tr><tr><td rowspan="1" colspan="1"><a name="show-version" shape="rect" id="show-version"></a><a href="#show-version-note" shape="rect">show version</a></td><td rowspan="1" colspan="1">$ octave <span style="white-space: pre-wrap;">--version</span></td><td rowspan="1" colspan="1">$ r <span style="white-space: pre-wrap;">--version</span></td><td rowspan="1" colspan="1">sys.version<br />
np.<span style="white-space: pre-wrap;">__version__</span><br />
sp.<span style="white-space: pre-wrap;">__version__</span><br />
mpl.<span style="white-space: pre-wrap;">__version__</span></td></tr><tr><td rowspan="1" colspan="1"><a name="implicit-prologue" shape="rect" id="implicit-prologue"></a><a href="#implicit-prologue-note" shape="rect">implicit prologue</a></td><td rowspan="1" colspan="1"><span style="color: gray"><em>none</em></span></td><td rowspan="1" colspan="1">install.packages('ggplot2')<br />
library('ggplot2')</td><td rowspan="1" colspan="1">import sys, os, re, math<br />
import numpy as np<br />
import scipy as sp<br />
import scipy.stats as stats<br />
import pandas as pd<br />
import matplotlib as mpl<br />
import matplotlib.pyplot as plt</td></tr><tr><th colspan="4" rowspan="1"><a name="grammar-invocation" shape="rect" id="grammar-invocation"></a><a href="#grammar-invocation-note" shape="rect">grammar and invocation</a></th></tr><tr><th rowspan="1" colspan="1"></th><th rowspan="1" colspan="1"><a href="#matlab" shape="rect">matlab</a></th><th rowspan="1" colspan="1"><a href="#r" shape="rect">r</a></th><th rowspan="1" colspan="1"><a href="#numpy" shape="rect">numpy</a></th></tr><tr><td rowspan="1" colspan="1"><a name="interpreter" shape="rect" id="interpreter"></a><a href="#interpreter-note" shape="rect">interpreter</a><br /><span style="white-space: pre-wrap;"> </span></td><td rowspan="1" colspan="1">$ octave foo.m</td><td rowspan="1" colspan="1">$ Rscript foo.r<br /><br />
$ r -f foo.r</td><td rowspan="1" colspan="1">$ python foo.py</td></tr><tr><td rowspan="1" colspan="1"><a name="repl" shape="rect" id="repl"></a><a href="#repl-note" shape="rect">repl</a><br /><span style="white-space: pre-wrap;"> </span></td><td rowspan="1" colspan="1">$ octave</td><td rowspan="1" colspan="1">$ r</td><td rowspan="1" colspan="1">$ python</td></tr><tr><td rowspan="1" colspan="1"><a name="cmd-line-program" shape="rect" id="cmd-line-program"></a><a href="#cmd-line-program-note" shape="rect">command line program</a></td><td rowspan="1" colspan="1">$ octave <span style="white-space: pre-wrap;">--</span>silent <span style="white-space: pre-wrap;">--</span>eval 'printf("hi")'</td><td rowspan="1" colspan="1">$ Rscript -e 'print("hi")'</td><td rowspan="1" colspan="1">python -c 'print("hi")'</td></tr><tr><td rowspan="1" colspan="1"><a name="block-delimiters" shape="rect" id="block-delimiters"></a><a href="#block-delimiters-note" shape="rect">block delimiters</a></td><td rowspan="1" colspan="1">function endfunction<br />
if elseif else endif<br />
while endwhile<br />
do until<br />
for endfor</td><td rowspan="1" colspan="1">{ }</td><td rowspan="1" colspan="1"><span style="color: gray"><em>offside rule</em></span></td></tr><tr><td rowspan="1" colspan="1"><a name="stmt-separator" shape="rect" id="stmt-separator"></a><a href="#stmt-separator-note" shape="rect">statement separator</a></td><td rowspan="1" colspan="1">; <span style="color: gray"><em>or newline</em></span><br /><br /><span style="color: gray"><em>Newlines not separators after three dots:</em> <span style="white-space: pre-wrap;">...</span></span><br /><br /><span style="color: gray"><em>Output is suppressed when lines end with a semicolon.</em></span></td><td rowspan="1" colspan="1">; <span style="color: gray"><em>or sometimes newline</em></span><br /><br /><span style="color: gray"><em>Newlines not separators inside (), [], {}, '', "", or after binary operator.</em></span></td><td rowspan="1" colspan="1"><span style="color: gray"><em>newline or ;<br /><br />
Newlines not separators inside (), [], {}, triple quote literals, or after backslash: \</em></span></td></tr><tr><td rowspan="1" colspan="1"><a name="eol-comment" shape="rect" id="eol-comment"></a><a href="#eol-comment-note" shape="rect">end-of-line comment</a></td><td rowspan="1" colspan="1">1 + 1 <span style="color: gray">% addition</span><br /><span style="color: gray"><em>Octave only:</em></span><br />
1 + 1 <span style="color: gray"># addition</span></td><td rowspan="1" colspan="1">1 + 1 <span style="color: gray"># addition</span></td><td rowspan="1" colspan="1">1 + 1 <span style="color: gray"># addition</span></td></tr><tr><th colspan="4" rowspan="1"><a name="var-expr" shape="rect" id="var-expr"></a><a href="#var-expr-note" shape="rect">variables and expressions</a></th></tr><tr><th rowspan="1" colspan="1"></th><th rowspan="1" colspan="1"><a href="#matlab" shape="rect">matlab</a></th><th rowspan="1" colspan="1"><a href="#r" shape="rect">r</a></th><th rowspan="1" colspan="1"><a href="#numpy" shape="rect">numpy</a></th></tr><tr><td rowspan="1" colspan="1"><a name="assignment" shape="rect" id="assignment"></a><a href="#assignment-note" shape="rect">assignment</a></td><td rowspan="1" colspan="1">i = 3</td><td rowspan="1" colspan="1">i = 3<br />
i &lt;- 3<br />
3 -&gt; i<br />
assign("i", 3)</td><td rowspan="1" colspan="1">i = 3</td></tr><tr><td rowspan="1" colspan="1"><a name="compound-assignment" shape="rect" id="compound-assignment"></a><a href="#compound-assignment-note" shape="rect">compound assignment</a><br /><span style="color: gray"><em>arithmetic, string, logical</em></span></td><td rowspan="1" colspan="1"><span style="color: gray"><em>MATLAB has no compound assignment operators. Octave has these:</em></span><br />
+= -= *= /= <span style="color: gray"><em>none</em></span> <span style="color: gray"><em>none</em></span> <span style="white-space: pre-wrap;">**</span>= <span style="color: gray"><em>or</em></span> ^=<br /><span style="color: gray"><em>none</em></span> <span style="color: gray"><em>none</em></span><br />
&amp;= |= <span style="color: gray"><em>none</em></span></td><td rowspan="1" colspan="1"><span style="color: gray"><em>none</em></span></td><td rowspan="1" colspan="1"><span style="color: gray"># do not return values:</span><br />
+= -= *= /= <span style="white-space: pre-wrap;">//</span>= %= <span style="white-space: pre-wrap;">**</span>=<br />
+= *=<br />
&amp;= |= ^=</td></tr><tr><td rowspan="1" colspan="1"><a name="incr-decr" shape="rect" id="incr-decr"></a><a href="#incr-decr-note" shape="rect">increment and decrement</a></td><td rowspan="1" colspan="1">++x <span style="white-space: pre-wrap;">--</span>x<br />
x++ x<span style="white-space: pre-wrap;">--</span></td><td rowspan="1" colspan="1"><span style="color: gray"><em>none</em></span></td><td rowspan="1" colspan="1"><span style="color: gray"><em>none</em></span></td></tr><tr><td rowspan="1" colspan="1"><a name="null" shape="rect" id="null"></a><a href="#null-note" shape="rect">null</a></td><td rowspan="1" colspan="1"><span style="color: gray"><em>only used in place of numeric values:</em></span><br />
NA</td><td rowspan="1" colspan="1">NA NULL</td><td rowspan="1" colspan="1">None</td></tr><tr><td rowspan="1" colspan="1"><a name="null-test" shape="rect" id="null-test"></a><a href="#null-test-note" shape="rect">null test</a></td><td rowspan="1" colspan="1">isna(v)<br /><span style="color: gray"><em>true for</em> '', []:</span><br />
isnull(v)</td><td rowspan="1" colspan="1">is.na(v)<br />
is.null(v)</td><td rowspan="1" colspan="1">v == None<br />
v is None</td></tr><tr><td rowspan="1" colspan="1"><a name="cond-expr" shape="rect" id="cond-expr"></a><a href="#cond-expr-note" shape="rect">conditional expression</a></td><td rowspan="1" colspan="1"><span style="color: gray"><em>none</em></span></td><td rowspan="1" colspan="1">(if (x &gt; 0) x else -x)<br />
ifelse(x &gt; 0, x, -x)</td><td rowspan="1" colspan="1">x if x &gt; 0 else -x</td></tr><tr><th colspan="4" rowspan="1"><a name="arithmetic-logic" shape="rect" id="arithmetic-logic"></a><a href="#arithmetic-logic-note" shape="rect">arithmetic and logic</a></th></tr><tr><th rowspan="1" colspan="1"></th><th rowspan="1" colspan="1"><a href="#matlab" shape="rect">matlab</a></th><th rowspan="1" colspan="1"><a href="#r" shape="rect">r</a></th><th rowspan="1" colspan="1"><a href="#numpy" shape="rect">numpy</a></th></tr><tr><td rowspan="1" colspan="1"><a name="true-false" shape="rect" id="true-false"></a><a href="#true-false-note" shape="rect">true and false</a><br /><span style="white-space: pre-wrap;"> </span></td><td rowspan="1" colspan="1">1 0 true false</td><td rowspan="1" colspan="1">TRUE FALSE T F</td><td rowspan="1" colspan="1">True False</td></tr><tr><td rowspan="1" colspan="1"><a name="falsehoods" shape="rect" id="falsehoods"></a><a href="#falsehoods-note" shape="rect">falsehoods</a></td><td rowspan="1" colspan="1">false 0 0.0<br /><span style="color: gray"><em>matrices evaluate to false unless nonempty and all entries evaluate to true</em></span></td><td rowspan="1" colspan="1">FALSE F 0 0.0<br /><span style="color: gray"><em>matrices evaluate to value of first entry; string in boolean context causes error</em></span></td><td rowspan="1" colspan="1">False None 0 0.0 '' [] {}</td></tr><tr><td rowspan="1" colspan="1"><a name="logical-op" shape="rect" id="logical-op"></a><a href="#logical-op-note" shape="rect">logical operators</a></td><td rowspan="1" colspan="1">~true | (true &amp; false)<br /><span style="color: gray"><em>Optional negation operator in Octave:</em></span> !<br /><span style="color: gray"><em>short-circuit operators:</em></span><br />
&amp;&amp; <span style="white-space: pre-wrap;">||</span></td><td rowspan="1" colspan="1">!TRUE | (TRUE &amp; FALSE)<br /><span style="color: gray"><em>short-circuit operators:</em></span><br />
&amp;&amp; <span style="white-space: pre-wrap;">||</span><br /><br /><span style="color: gray">&amp; <em>and</em> | <em>can operate on and return vectors, but</em> <span style="white-space: pre-wrap;">&amp;&amp;</span> <em>and</em> <span style="white-space: pre-wrap;">||</span> <em>return scalars</em></span></td><td rowspan="1" colspan="1">and or not</td></tr><tr><td rowspan="1" colspan="1"><a name="relational-op" shape="rect" id="relational-op"></a><a href="#relational-op-note" shape="rect">relational operators</a></td><td rowspan="1" colspan="1">== ~= &gt; &lt; &gt;= &lt;=<br /><span style="color: gray"><em>Optional inequality operator in Octave:</em></span> !=</td><td rowspan="1" colspan="1">== != &gt; &lt; &gt;= &lt;=</td><td rowspan="1" colspan="1">== != &gt; &lt; &gt;= &lt;=</td></tr><tr><td rowspan="1" colspan="1"><a name="arith-op" shape="rect" id="arith-op"></a><a href="#arith-op-note" shape="rect">arithmetic operators</a><br /><span style="color: gray"><em>add, sub, mult, div, quot, rem</em></span></td><td rowspan="1" colspan="1">+ - * / <span style="color: gray"><em>none</em></span> mod(<span style="color: gray"><em>n</em></span>, <span style="color: gray"><em>divisor</em></span>)</td><td rowspan="1" colspan="1">+ - * / %/% %%</td><td rowspan="1" colspan="1">+ - * / // %</td></tr><tr><td rowspan="1" colspan="1"><a name="int-div" shape="rect" id="int-div"></a><a href="#int-div-note" shape="rect">integer division</a><br /><span style="white-space: pre-wrap;"> </span></td><td rowspan="1" colspan="1">fix(13 / 5)</td><td rowspan="1" colspan="1">13 %/% 5<br />
as.integer(13 / 5)</td><td rowspan="1" colspan="1">13 // 5</td></tr><tr><td rowspan="1" colspan="1"><a name="int-div-zero" shape="rect" id="int-div-zero"></a><a href="#int-div-zero-note" shape="rect">integer division by zero</a><br /><span style="white-space: pre-wrap;"> </span></td><td rowspan="1" colspan="1">Inf NaN <span style="color: gray"><em>or</em></span> -Inf</td><td rowspan="1" colspan="1"><span style="color: gray"><em>result of converting Inf or NaN to an integer with as.integer:</em></span><br />
NA</td><td rowspan="1" colspan="1"><span style="color: gray"><em>raises</em> ZeroDivisionError</span></td></tr><tr><td rowspan="1" colspan="1"><a name="float-div" shape="rect" id="float-div"></a><a href="#float-div-note" shape="rect">float division</a><br /><span style="white-space: pre-wrap;"> </span></td><td rowspan="1" colspan="1">13 / 5</td><td rowspan="1" colspan="1">13 / 5</td><td rowspan="1" colspan="1">float(13) / 5</td></tr><tr><td rowspan="1" colspan="1"><a name="float-div-zero" shape="rect" id="float-div-zero"></a><a href="#float-div-zero-note" shape="rect">float division by zero</a><br /><span style="color: gray"><em>dividend is positive, zero, negative</em></span></td><td rowspan="1" colspan="1"><span style="color: gray"><em>these values are literals:</em></span><br />
Inf<br />
NaN<br />
-Inf</td><td rowspan="1" colspan="1"><span style="color: gray"><em>these values are literals:</em></span><br />
Inf<br />
NaN<br />
-Inf</td><td rowspan="1" colspan="1"><span style="color: gray"><em>raises</em> ZeroDivisionError</span></td></tr><tr><td rowspan="1" colspan="1"><a name="power" shape="rect" id="power"></a><a href="#power-note" shape="rect">power</a></td><td rowspan="1" colspan="1">2 ^ 16<br /><span style="color: gray">% Octave only:</span><br />
2 <span style="white-space: pre-wrap;">**</span> 16</td><td rowspan="1" colspan="1">2 ^ 16<br />
2 ** 16</td><td rowspan="1" colspan="1">2 <span style="white-space: pre-wrap;">**</span> 16</td></tr><tr><td rowspan="1" colspan="1"><a name="sqrt" shape="rect" id="sqrt"></a><a href="#sqrt-note" shape="rect">sqrt</a><br /><span style="white-space: pre-wrap;"> </span></td><td rowspan="1" colspan="1">sqrt(2)</td><td rowspan="1" colspan="1">sqrt(2)</td><td rowspan="1" colspan="1">math.sqrt(2)</td></tr><tr><td rowspan="1" colspan="1"><a name="sqrt-negative-one" shape="rect" id="sqrt-negative-one"></a><a href="#sqrt-negative-one-note" shape="rect">sqrt(-1)</a></td><td rowspan="1" colspan="1"><span style="color: gray">% returns 0 + 1i:</span><br />
sqrt(-1)</td><td rowspan="1" colspan="1"><span style="color: gray"># returns NaN:</span><br />
sqrt(-1)<br /><br /><span style="color: gray"># returns 0+1i:</span><br />
sqrt(-1+0i)</td><td rowspan="1" colspan="1"><span style="color: gray"># raises ValueError:</span><br />
math.sqrt(-2)<br /><br /><span style="color: gray"># returns 1.41421j:</span><br />
import cmath<br />
cmath.sqrt(-2)</td></tr><tr><td rowspan="1" colspan="1"><a name="transcendental-func" shape="rect" id="transcendental-func"></a><a href="#transcendental-func-note" shape="rect">transcendental functions</a></td><td rowspan="1" colspan="1">exp log sin cos tan asin acos atan atan2</td><td rowspan="1" colspan="1">exp log sin cos tan asin acos atan atan2</td><td rowspan="1" colspan="1">math.exp math.log math.sin math.cos math.tan math.asin math.acos math.atan math.atan2</td></tr><tr><td rowspan="1" colspan="1"><a name="transcendental-const" shape="rect" id="transcendental-const"></a><a href="#transcendental-const-note" shape="rect">transcendental constants</a></td><td rowspan="1" colspan="1">pi e</td><td rowspan="1" colspan="1">pi exp(1)</td><td rowspan="1" colspan="1">math.pi math.e</td></tr><tr><td rowspan="1" colspan="1"><a name="float-truncation" shape="rect" id="float-truncation"></a><a href="#float-truncation-note" shape="rect">float truncation</a><br /><span style="color: gray"><em>round towards zero, to nearest integer, down, up</em></span></td><td rowspan="1" colspan="1">fix(x)<br />
round(x)<br />
floor(x)<br />
ceil</td><td rowspan="1" colspan="1">as.integer(x)<br />
round(x)<br />
floor(x)<br />
ceiling(x)</td><td rowspan="1" colspan="1">int(x)<br />
int(round(x))<br />
math.floor(x)<br />
math.ceil(x)</td></tr><tr><td rowspan="1" colspan="1"><a name="absolute-val" shape="rect" id="absolute-val"></a><a href="#absolute-val-note" shape="rect">absolute value</a><br /><span style="color: gray"><em>and signum</em></span></td><td rowspan="1" colspan="1">abs sign</td><td rowspan="1" colspan="1">abs sign</td><td rowspan="1" colspan="1">abs(-3.7)<br />
math.copysign(1, -3.7)</td></tr><tr><td rowspan="1" colspan="1"><a name="int-overflow" shape="rect" id="int-overflow"></a><a href="#int-overflow-note" shape="rect">integer overflow</a></td><td rowspan="1" colspan="1"><span style="color: gray"><em>becomes float; largest representable integer in the variable</em> intmax</span></td><td rowspan="1" colspan="1"><span style="color: gray"><em>becomes float; largest representable integer in the variable</em> .Machine$integer.max</span></td><td rowspan="1" colspan="1"><span style="color: gray"><em>becomes arbitrary length integer of type</em> long</span></td></tr><tr><td rowspan="1" colspan="1"><a name="float-overflow" shape="rect" id="float-overflow"></a><a href="#float-overflow-note" shape="rect">float overflow</a><br /><span style="white-space: pre-wrap;"> </span></td><td rowspan="1" colspan="1">Inf</td><td rowspan="1" colspan="1">Inf</td><td rowspan="1" colspan="1"><span style="color: gray"><em>raises</em> OverflowError</span></td></tr><tr><td rowspan="1" colspan="1"><a name="float-limits" shape="rect" id="float-limits"></a><a href="#float-limits-note" shape="rect">float limits</a><br /><span style="white-space: pre-wrap;"> </span></td><td rowspan="1" colspan="1">eps<br />
realmax<br />
realmin</td><td rowspan="1" colspan="1">.Machine$double.eps<br />
.Machine$double.xmax<br />
.Machine$double.xmin</td><td rowspan="1" colspan="1">np.finfo(np.float64).eps<br />
np.finfo(np.float64).max<br />
np.finfo(np.float64).min</td></tr><tr><td rowspan="1" colspan="1"><a name="complex-construction" shape="rect" id="complex-construction"></a><a href="#complex-construction-note" shape="rect">complex construction</a></td><td rowspan="1" colspan="1">1 + 3i</td><td rowspan="1" colspan="1">1 + 3i</td><td rowspan="1" colspan="1">1 + 3j</td></tr><tr><td rowspan="1" colspan="1"><a name="complex-decomposition" shape="rect" id="complex-decomposition"></a><a href="#complex-decomposition-note" shape="rect">complex decomposition</a></td><td rowspan="1" colspan="1">real imag<br />
abs arg<br />
conj</td><td rowspan="1" colspan="1">Re Im<br />
abs Arg<br />
Conj</td><td rowspan="1" colspan="1">import cmath<br /><br />
z.real<br />
z.imag<br />
cmath.polar(z)[1]</td></tr><tr><td rowspan="1" colspan="1"><a name="random-num" shape="rect" id="random-num"></a><a href="#random-num-note" shape="rect">random number</a><br /><span style="color: gray"><em>uniform integer, uniform float</em></span></td><td rowspan="1" colspan="1">floor(100*rand)<br />
rand</td><td rowspan="1" colspan="1">floor(100*runif(1))<br />
runif(1)</td><td rowspan="1" colspan="1">np.random.randint(0, 100)<br />
np.random.rand()</td></tr><tr><td rowspan="1" colspan="1"><a name="random-seed" shape="rect" id="random-seed"></a><a href="#random-seed-note" shape="rect">random seed</a><br /><span style="color: gray"><em>set, get, and restore</em></span></td><td rowspan="1" colspan="1">rand('state', 17)<br />
sd = rand('state')<br />
rand('state', sd)</td><td rowspan="1" colspan="1">set.seed(17)<br />
sd = .Random.seed<br /><span style="color: gray"><em>none</em></span></td><td rowspan="1" colspan="1">np.random.seed(17)<br />
sd = np.random.get_state()<br />
np.random.set_state(sd)</td></tr><tr><td rowspan="1" colspan="1"><a name="bit-op" shape="rect" id="bit-op"></a><a href="#bit-op-note" shape="rect">bit operators</a></td><td rowspan="1" colspan="1">bitshift(100, 3)<br />
bitshift(100, -3)<br />
bitand(1, 2)<br />
bitor(1, 2)<br />
bitxor(1, 2)<br /><span style="color: gray">% MATLAB:</span><br />
bitcmp(1, 'uint16')<br /><span style="color: gray">% Octave:</span><br />
bitcmp(1, 16)</td><td rowspan="1" colspan="1"><span style="color: gray"><em>none</em></span></td><td rowspan="1" colspan="1">100 <span style="white-space: pre-wrap;">&lt;&lt;</span> 3<br />
100 <span style="white-space: pre-wrap;">&gt;&gt;</span> 3<br />
1 &amp; 2<br />
1 | 2<br />
1 ^ 2<br />
~1</td></tr><tr><th colspan="4" rowspan="1"><a name="strings" shape="rect" id="strings"></a><a href="#strings-note" shape="rect">strings</a></th></tr><tr><th rowspan="1" colspan="1"></th><th rowspan="1" colspan="1"><a href="#matlab" shape="rect">matlab</a></th><th rowspan="1" colspan="1"><a href="#r" shape="rect">r</a></th><th rowspan="1" colspan="1"><a href="#numpy" shape="rect">numpy</a></th></tr><tr><td rowspan="1" colspan="1"><a name="str-literal" shape="rect" id="str-literal"></a><a href="#str-literal-note" shape="rect">literal</a></td><td rowspan="1" colspan="1">'don''t say "no"'<br /><span style="color: gray"><em>Octave also has double quoted strings:</em></span><br />
"don't say \"no\""</td><td rowspan="1" colspan="1">"don't say \"no\""<br />
'don\'t say "no"'</td><td rowspan="1" colspan="1">'don\'t say "no"'<br />
"don't say \"no\""<br />
r"don't " r'say "no"'</td></tr><tr><td rowspan="1" colspan="1"><a name="str-newline" shape="rect" id="str-newline"></a><a href="#str-newline-note" shape="rect">newline in literal</a><br /><span style="white-space: pre-wrap;"> </span></td><td rowspan="1" colspan="1"><span style="color: gray"><em>no; use \n escape</em></span></td><td rowspan="1" colspan="1"><span style="color: gray"><em>yes</em></span></td><td rowspan="1" colspan="1"><span style="color: gray"><em>no</em></span></td></tr><tr><td rowspan="1" colspan="1"><a name="str-esc" shape="rect" id="str-esc"></a><a href="#str-esc-note" shape="rect">literal escapes</a></td><td rowspan="1" colspan="1">\\ \" \' \0 \a \b \f \n \r \t \v</td><td rowspan="1" colspan="1">\\ \" \' \a \b \f \n \r \t \v \<span style="color: gray"><em>ooo</em></span></td><td rowspan="1" colspan="1"><span style="color: gray"><em>single and double quoted:</em></span><br />
\<span style="color: gray"><em>newline</em></span> \\ \' \" \a \b \f \n \r \t \v \<span style="color: gray"><em>ooo</em></span> \x<span style="color: gray"><em>hh</em></span></td></tr><tr><td rowspan="1" colspan="1"><a name="char-access" shape="rect" id="char-access"></a><a href="#char-access-note" shape="rect">character access</a><br /><span style="white-space: pre-wrap;"> </span></td><td rowspan="1" colspan="1">'hello'(1)</td><td rowspan="1" colspan="1">substr("hello", 1, 1)</td><td rowspan="1" colspan="1">'hello'[0]</td></tr><tr><td rowspan="1" colspan="1"><a name="chr-ord" shape="rect" id="chr-ord"></a><a href="#chr-ord-note" shape="rect">chr and ord</a></td><td rowspan="1" colspan="1">char(65)<br />
toascii('A')</td><td rowspan="1" colspan="1">intToUtf8(65)<br />
utf8ToInt("A")</td><td rowspan="1" colspan="1">chr(65)<br />
ord('A')</td></tr><tr><td rowspan="1" colspan="1"><a name="str-len" shape="rect" id="str-len"></a><a href="#str-len-note" shape="rect">length</a><br /><span style="white-space: pre-wrap;"> </span></td><td rowspan="1" colspan="1">length('hello')</td><td rowspan="1" colspan="1">nchar("hello")</td><td rowspan="1" colspan="1">len('hello')</td></tr><tr><td rowspan="1" colspan="1"><a name="str-concat" shape="rect" id="str-concat"></a><a href="#str-concat-note" shape="rect">concatenate</a></td><td rowspan="1" colspan="1">horzcat('one ', 'two ', 'three')</td><td rowspan="1" colspan="1">paste("one ", "two ", "three")</td><td rowspan="1" colspan="1">'one ' + 'two ' + 'three'<br /><span style="color: gray"><em>literals, but not variables, can be concatenated with juxtaposition:</em></span><br />
'one ' "two " 'three'</td></tr><tr><td rowspan="1" colspan="1"><a name="str-replicate" shape="rect" id="str-replicate"></a><a href="#str-replicate-note" shape="rect">replicate</a><br /><span style="white-space: pre-wrap;"> </span></td><td rowspan="1" colspan="1">hbar = repmat('-', 1, 80)</td><td rowspan="1" colspan="1">hbar = paste(rep('-', 80), collapse='')</td><td rowspan="1" colspan="1">hbar = '-' * 80</td></tr><tr><td rowspan="1" colspan="1"><a name="index-substr" shape="rect" id="index-substr"></a><a href="#index-substr-note" shape="rect">index of substring</a></td><td rowspan="1" colspan="1"><span style="color: gray"><em>counts from one, returns<br />
zero if not found</em></span><br />
index('hello', 'el')</td><td rowspan="1" colspan="1"><span style="color: gray"><em>counts from one, returns<br />
-1 if not found</em></span><br />
regexpr("el", "hello")</td><td rowspan="1" colspan="1"><span style="color: gray"><em>counts from zero, raises</em> ValueError <em>if not found:</em></span><br />
'hello'.index('el')</td></tr><tr><td rowspan="1" colspan="1"><a name="extract-substr" shape="rect" id="extract-substr"></a><a href="#extract-substr-note" shape="rect">extract substring</a><br /><span style="white-space: pre-wrap;"> </span></td><td rowspan="1" colspan="1">substr('hello', 1, 4)</td><td rowspan="1" colspan="1">substr("hello", 1, 4)</td><td rowspan="1" colspan="1">'hello'[0:4]</td></tr><tr><td rowspan="1" colspan="1"><a name="split" shape="rect" id="split"></a><a href="#split-note" shape="rect">split</a></td><td rowspan="1" colspan="1"><span style="color: gray"><em>returns tuple:</em></span><br />
strsplit('foo,bar,baz',',')</td><td rowspan="1" colspan="1">strsplit('foo,bar,baz', ',')</td><td rowspan="1" colspan="1">'foo,bar,baz'.split(',')</td></tr><tr><td rowspan="1" colspan="1"><a name="join" shape="rect" id="join"></a><a href="#join-note" shape="rect">join</a></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1">paste("foo", "bar", "baz", sep=",")<br />
paste(c('foo', 'bar', 'baz'),<br /><span style="white-space: pre-wrap;">  </span>collapse=',')</td><td rowspan="1" colspan="1">','.join(['foo', 'bar', 'baz'])</td></tr><tr><td rowspan="1" colspan="1"><a name="trim" shape="rect" id="trim"></a><a href="#trim-note" shape="rect">trim</a></td><td rowspan="1" colspan="1">strtrim(' foo ')<br /><span style="color: gray"><em>??</em></span><br />
deblank('foo ')</td><td rowspan="1" colspan="1">gsub("(^[\n\t ]+|[\n\t ]+$)",<br /><span style="white-space: pre-wrap;">  </span>"",<br /><span style="white-space: pre-wrap;">  </span>" foo ")<br />
sub("^[\n\t ]+", "", " foo")<br />
sub("[\n\t ]+$", "", "foo ")</td><td rowspan="1" colspan="1">' foo '.strip()<br />
' foo'.lstrip()<br />
'foo '.rstrip()</td></tr><tr><td rowspan="1" colspan="1"><a name="num-str-conversion" shape="rect" id="num-str-conversion"></a><a href="#num-str-conversion-note" shape="rect">convert from string, to string</a></td><td rowspan="1" colspan="1">7 + str2num('12')<br />
73.9 + str2num('.037')<br />
horzcat('value: ', num2str(8))</td><td rowspan="1" colspan="1">7 + as.integer("12")<br />
73.9 + as.double(".037")<br />
paste("value: ", toString("8"))</td><td rowspan="1" colspan="1">7 + int('12')<br />
73.9 + float('.037')<br />
'value: ' + str(8)</td></tr><tr><td rowspan="1" colspan="1"><a name="case-manipulation" shape="rect" id="case-manipulation"></a><a href="#case-manipulation-note" shape="rect">case manipulation</a></td><td rowspan="1" colspan="1">lower('FOO')<br />
upper('foo')</td><td rowspan="1" colspan="1">tolower("FOO")<br />
toupper("foo")</td><td rowspan="1" colspan="1">'foo'.upper()<br />
'FOO'.lower()<br />
'foo'.capitalize()</td></tr><tr><td rowspan="1" colspan="1"><a name="sprintf" shape="rect" id="sprintf"></a><a href="#sprintf-note" shape="rect">sprintf</a><br /><span style="white-space: pre-wrap;"> </span></td><td rowspan="1" colspan="1">sprintf('%s: %.3f %d', 'foo', 2.2, 7)</td><td rowspan="1" colspan="1">sprintf("%s: %.3f %d", "foo", 2.2, 7)</td><td rowspan="1" colspan="1">'%s: %.3f %d' % ('foo', 2.2, 7)</td></tr><tr><th colspan="4" rowspan="1"><a name="regexes" shape="rect" id="regexes"></a><a href="#regexes-note" shape="rect">regular expressions</a></th></tr><tr><th rowspan="1" colspan="1"></th><th rowspan="1" colspan="1"><a href="#matlab" shape="rect">matlab</a></th><th rowspan="1" colspan="1"><a href="#r" shape="rect">r</a></th><th rowspan="1" colspan="1"><a href="#numpy" shape="rect">numpy</a></th></tr><tr><td rowspan="1" colspan="1"><a name="regex-match" shape="rect" id="regex-match"></a><a href="#regex-match-note" shape="rect">regex test</a></td><td rowspan="1" colspan="1">regexp('hello', '^[a-z]+$')<br />
regexp('hello', '^\S+$')</td><td rowspan="1" colspan="1">regexpr("^[a-z]+$", "hello") &gt; 0<br />
regexpr('^\\S+$', "hello",perl=T) &gt; 0</td><td rowspan="1" colspan="1">re.search('^[a-z]+$', 'hello')<br />
re.search('^\S+$', 'hello')</td></tr><tr><td rowspan="1" colspan="1"><a name="regex-subst" shape="rect" id="regex-subst"></a><a href="#regex-subst-note" shape="rect">regex substitution</a></td><td rowspan="1" colspan="1">regexprep('foo bar bar','bar','baz','once')<br />
regexprep('foo bar bar','bar','baz')</td><td rowspan="1" colspan="1">sub('bar','baz','foo bar')<br />
gsub('bar','baz','foo bar bar')</td><td rowspan="1" colspan="1">rx = re.compile('bar')<br />
s = rx.sub('baz', 'foo bar', 1)<br />
s2 = rx.sub('baz', 'foo bar bar')</td></tr><tr><th colspan="4" rowspan="1"><a name="dates-time" shape="rect" id="dates-time"></a><a href="#dates-time-note" shape="rect">dates and time</a></th></tr><tr><th rowspan="1" colspan="1"></th><th rowspan="1" colspan="1"><a href="#matlab" shape="rect">matlab</a></th><th rowspan="1" colspan="1"><a href="#r" shape="rect">r</a></th><th rowspan="1" colspan="1"><a href="#numpy" shape="rect">numpy</a></th></tr><tr><td rowspan="1" colspan="1"><a name="current-date-time" shape="rect" id="current-date-time"></a><a href="#current-date-time-note" shape="rect">current date/time</a><br /><span style="white-space: pre-wrap;"> </span></td><td rowspan="1" colspan="1">t = now</td><td rowspan="1" colspan="1">t = as.POSIXlt(Sys.time())</td><td rowspan="1" colspan="1">import datetime<br /><br />
t = datetime.datetime.now()</td></tr><tr><td rowspan="1" colspan="1"><a name="date-time-type" shape="rect" id="date-time-type"></a><a href="#date-time-type-note" shape="rect">date/time type</a></td><td rowspan="1" colspan="1"><span style="color: gray"><em>floating point number representing days since year 0 in the Gregorian calendar</em></span></td><td rowspan="1" colspan="1">POSIXlt</td><td rowspan="1" colspan="1">datettime</td></tr><tr><td rowspan="1" colspan="1"><a name="date-time-diff-type" shape="rect" id="date-time-diff-type"></a><a href="#date-time-diff-type-note" shape="rect">date/time difference type</a></td><td rowspan="1" colspan="1"><span style="color: gray"><em>floating point number representing days</em></span></td><td rowspan="1" colspan="1"><span style="color: gray"><em>a</em> difftime <em>object which behaves like a floating point number representing seconds</em></span></td><td rowspan="1" colspan="1"><span style="color: gray">timedelta, <em>which can be converted to float value in seconds via</em> total_seconds() <em>method</em></span></td></tr><tr><td rowspan="1" colspan="1"><a name="date-parts" shape="rect" id="date-parts"></a><a href="#date-parts-note" shape="rect">get date parts</a></td><td rowspan="1" colspan="1">datevec(t)(1)<br />
datevec(t)(2)<br />
datevec(t)(3)</td><td rowspan="1" colspan="1">t$year + 1900<br />
t$mon + 1<br />
t$mday</td><td rowspan="1" colspan="1">t.year<br />
t.month<br />
t.day</td></tr><tr><td rowspan="1" colspan="1"><a name="time-parts" shape="rect" id="time-parts"></a><a href="#time-parts-note" shape="rect">get time parts</a></td><td rowspan="1" colspan="1">datevec(t)(4)<br />
datevec(t)(5)<br />
datevec(t)(6)</td><td rowspan="1" colspan="1">t$hour<br />
t$min<br />
t$sec</td><td rowspan="1" colspan="1">t.hour<br />
t.minute<br />
t.second</td></tr><tr><td rowspan="1" colspan="1"><a name="build-date-time" shape="rect" id="build-date-time"></a><a href="#build-date-time-note" shape="rect">build date/time from parts</a></td><td rowspan="1" colspan="1">t = datenum([2011 9 20 23 1 2])</td><td rowspan="1" colspan="1">t = as.POSIXlt(Sys.time())<br />
t$year = 2011 - 1900<br />
t$mon = 9 - 1<br />
t$mday = 20<br />
t$hour = 23<br />
t$min = 1<br />
t$sec = 2</td><td rowspan="1" colspan="1">import datetime<br /><br />
t = datetime.datetime(2011, 9, 20, 23, 1, 2)</td></tr><tr><td rowspan="1" colspan="1"><a name="date-to-str" shape="rect" id="date-to-str"></a><a href="#date-to-str-note" shape="rect">convert to string</a><br /><span style="white-space: pre-wrap;"> </span></td><td rowspan="1" colspan="1">datestr(t)</td><td rowspan="1" colspan="1">print(t)</td><td rowspan="1" colspan="1">str(t)</td></tr><tr><td rowspan="1" colspan="1"><a name="strptime" shape="rect" id="strptime"></a><a href="#strptime-note" shape="rect">strptime</a></td><td rowspan="1" colspan="1">t = datenum('2011-09-20 23:01:02',<br /><span style="white-space: pre-wrap;">  </span>'yyyy-mm-dd HH:MM:SS')</td><td rowspan="1" colspan="1">t = strptime('2011-09-20 23:01:02',<br /><span style="white-space: pre-wrap;">  </span>'%Y-%m-%d %H:%M:%S')</td><td rowspan="1" colspan="1">import datetime<br /><br />
s = '2011-05-03 10:00:00'<br />
fmt = '%Y-%m-%d %H:%M:%S'<br />
t = datetime.datetime.strptime(s, fmt)</td></tr><tr><td rowspan="1" colspan="1"><a name="strftime" shape="rect" id="strftime"></a><a href="#strftime-note" shape="rect">strftime</a><br /><span style="white-space: pre-wrap;"> </span></td><td rowspan="1" colspan="1">datestr(t, 'yyyy-mm-dd HH:MM:SS')</td><td rowspan="1" colspan="1">format(t, format='%Y-%m-%d %H:%M:%S')</td><td rowspan="1" colspan="1">t.strftime('%Y-%m-%d %H:%M:%S')</td></tr><tr><th colspan="4" rowspan="1"><a name="tuples" shape="rect" id="tuples"></a><a href="#tuples-note" shape="rect">tuples</a></th></tr><tr><th rowspan="1" colspan="1"></th><th rowspan="1" colspan="1"><a href="#matlab" shape="rect">matlab</a></th><th rowspan="1" colspan="1"><a href="#r" shape="rect">r</a></th><th rowspan="1" colspan="1"><a href="#numpy" shape="rect">numpy</a></th></tr><tr><td rowspan="1" colspan="1"><a name="tuple-literal" shape="rect" id="tuple-literal"></a><a href="#tuple-literal-note" shape="rect">tuple literal</a><br /><span style="white-space: pre-wrap;"> </span></td><td rowspan="1" colspan="1">tup = {1.7, 'hello', [1 2 3]}</td><td rowspan="1" colspan="1">tup = list(1.7, "hello", c(1, 2, 3))</td><td rowspan="1" colspan="1">tup = (1.7, "hello", [1,2,3])</td></tr><tr><td rowspan="1" colspan="1"><a name="tuple-access" shape="rect" id="tuple-access"></a><a href="#tuple-access-note" shape="rect">tuple element access</a></td><td rowspan="1" colspan="1">tup{1}</td><td rowspan="1" colspan="1">tup[[1]]</td><td rowspan="1" colspan="1">tup[0]</td></tr><tr><td rowspan="1" colspan="1"><a name="tuple-len" shape="rect" id="tuple-len"></a><a href="#tuple-len-note" shape="rect">tuple length</a><br /><span style="white-space: pre-wrap;"> </span></td><td rowspan="1" colspan="1">length(tup)</td><td rowspan="1" colspan="1">length(tup)</td><td rowspan="1" colspan="1">len(tup)</td></tr><tr><th colspan="4" rowspan="1"><a name="arrays" shape="rect" id="arrays"></a><a href="#arrays-note" shape="rect">arrays</a></th></tr><tr><th rowspan="1" colspan="1"></th><th rowspan="1" colspan="1"><a href="#matlab" shape="rect">matlab</a></th><th rowspan="1" colspan="1"><a href="#r" shape="rect">r</a></th><th rowspan="1" colspan="1"><a href="#numpy" shape="rect">numpy</a></th></tr><tr><td rowspan="1" colspan="1"><a name="array-elem-type" shape="rect" id="array-elem-type"></a><a href="#array-elem-type-note" shape="rect">element type</a></td><td rowspan="1" colspan="1"><span style="color: gray"><em>always numeric</em></span></td><td rowspan="1" colspan="1"><span style="color: gray"># "numeric":</span><br />
class(c(1, 2, 3))<br /><br /><span style="color: gray"># arrays can also have "boolean" or "string" elements</span></td><td rowspan="1" colspan="1"><span style="color: gray"># values can have different types:</span><br />
[type(x) for x in a]</td></tr><tr><td rowspan="1" colspan="1"><a name="array-literal" shape="rect" id="array-literal"></a><a href="#array-literal-note" shape="rect">literal</a><br /><span style="white-space: pre-wrap;"> </span></td><td rowspan="1" colspan="1">a = [1, 2, 3, 4]<br /><br /><span style="color: gray">% commas are optional:</span><br />
a = [1 2 3 4]<br /><br /><span style="color: gray">% cell arrays have constructor:</span><br />
a2 = cellstr(["foo"; "lorem ipsum"; "wombat"])</td><td rowspan="1" colspan="1"><span style="color: gray"># use c() constructor:</span><br />
a = c(1, 2, 3, 4)</td><td rowspan="1" colspan="1">a = [1, 2, 3, 4]</td></tr><tr><td rowspan="1" colspan="1"><a name="array-size" shape="rect" id="array-size"></a><a href="#array-size-note" shape="rect">size</a><br /><span style="white-space: pre-wrap;"> </span></td><td rowspan="1" colspan="1">length(a)<br /><br /><span style="color: gray">% also works for cell arrays:</span><br />
length(a2)</td><td rowspan="1" colspan="1">length(a)</td><td rowspan="1" colspan="1">len(a)</td></tr><tr><td rowspan="1" colspan="1"><a name="array-empty-test" shape="rect" id="array-empty-test"></a><a href="#array-empty-test-note" shape="rect">empty test</a><br /><span style="white-space: pre-wrap;"> </span></td><td rowspan="1" colspan="1">length(a) == 0<br /><br /><span style="color: gray">% An array used in a conditional test is<br />
% false unless nonempty and all entries evaluate<br />
% as true.</span></td><td rowspan="1" colspan="1">length(a) == 0</td><td rowspan="1" colspan="1">not a</td></tr><tr><td rowspan="1" colspan="1"><a name="array-lookup" shape="rect" id="array-lookup"></a><a href="#array-lookup-note" shape="rect">lookup</a><br /><span style="white-space: pre-wrap;"> </span></td><td rowspan="1" colspan="1"><span style="color: gray">% indices start at one:</span><br />
a(1)<br /><br /><span style="color: gray">% cell array indices also start at one:</span><br />
a2{1}</td><td rowspan="1" colspan="1"><span style="color: gray"># indices start at one</span><br />
a[1]</td><td rowspan="1" colspan="1"><span style="color: gray"># indices start at zero</span><br />
a[0]</td></tr><tr><td rowspan="1" colspan="1"><a name="array-update" shape="rect" id="array-update"></a><a href="#array-update-note" shape="rect">update</a><br /><span style="white-space: pre-wrap;"> </span></td><td rowspan="1" colspan="1">a(1) = -1<br /><br /><span style="color: gray">% cell array:</span><br />
a2{1} = "lorem"</td><td rowspan="1" colspan="1">a[1] = "lorem"</td><td rowspan="1" colspan="1">a[0] = 'lorem'</td></tr><tr><td rowspan="1" colspan="1"><a name="array-out-of-bounds" shape="rect" id="array-out-of-bounds"></a><a href="#array-out-of-bounds-note" shape="rect">out-of-bounds behavior</a></td><td rowspan="1" colspan="1">a = []<br /><br /><span style="color: gray">% error:</span><br />
a(1)<br /><br /><span style="color: gray">% increases array size to 10;<br />
% zero-fills slots 1 through 9:</span><br />
a(10) = 10</td><td rowspan="1" colspan="1">a = c()<br /><span style="color: gray"># evaluates as NA:</span><br />
a[10]<br /><span style="color: gray"># increases array size to 10:</span><br />
a[10] = "lorem"</td><td rowspan="1" colspan="1">a = []<br /><span style="color: gray"># raises IndexError:</span><br />
a[10]<br /><span style="color: gray"># raises IndexError:</span><br />
a[10] = 'lorem'</td></tr><tr><td rowspan="1" colspan="1"><a name="array-element-index" shape="rect" id="array-element-index"></a><a href="#array-element-index-note" shape="rect">index of element</a></td><td rowspan="1" colspan="1">a = [7 8 9 10 8]<br /><br /><span style="color: gray">% returns [2 5]:</span><br />
find(a == 8)<br /><br /><span style="color: gray">% returns 2:</span><br />
find(a == 8, 1, 'first')</td><td rowspan="1" colspan="1">a = c('x', 'y', 'z', 'w', 'y')<br /><br /><span style="color: gray"># c(2, 5):</span><br />
which(a == 'y')</td><td rowspan="1" colspan="1">a = ['x', 'y', 'z', 'w', 'y']<br /><br />
a.index('y')<span style="white-space: pre-wrap;">   </span><span style="color: gray"># 1</span><br />
a.rindex('y')<span style="white-space: pre-wrap;">  </span><span style="color: gray"># 4</span></td></tr><tr><td rowspan="1" colspan="1"><a name="array-slice" shape="rect" id="array-slice"></a><a href="#array-slice-note" shape="rect">slice</a><br /><span style="color: gray"><em>by endpoints</em></span></td><td rowspan="1" colspan="1">a = ['a' 'b' 'c' 'd' 'e']<br /><br /><span style="color: gray">% returns ['c' 'd']:</span><br />
a(3:4)</td><td rowspan="1" colspan="1">a = c("a", "b", "c", "d", "e")<br /><br /><span style="color: gray"># return c("c", "d"):</span><br />
a[seq(3, 4)]</td><td rowspan="1" colspan="1">a = ['a', 'b', 'c', 'd', 'e']<br /><br /><span style="color: gray"># return ['c', 'd']:</span><br />
a[2:4]</td></tr><tr><td rowspan="1" colspan="1"><a name="array-slice-to-end" shape="rect" id="array-slice-to-end"></a><a href="#array-slice-to-end-note" shape="rect">slice to end</a><br /><span style="white-space: pre-wrap;"> </span></td><td rowspan="1" colspan="1">a(2:end)</td><td rowspan="1" colspan="1">tail(a, n=length(a) - 1)</td><td rowspan="1" colspan="1">a[1:]</td></tr><tr><td rowspan="1" colspan="1"><a href="#integer-array-as-index" shape="rect">integer array as index</a></td><td rowspan="1" colspan="1">[1 2 3]([1 3 3])</td><td rowspan="1" colspan="1">c(1, 2, 3)[c(1, 3, 3)]</td><td rowspan="1" colspan="1">np.array([1, 2,3])[[0, 2, 2]]</td></tr><tr><td rowspan="1" colspan="1"><a href="#logical-array-as-index" shape="rect">logical array as index</a></td><td rowspan="1" colspan="1">[1 2 3]([true false true])</td><td rowspan="1" colspan="1">c(1, 2, 3)[c(T, F, T)]</td><td rowspan="1" colspan="1">np.array([1, 2, 3])[[True, False, True]]</td></tr><tr><td rowspan="1" colspan="1"><a name="array-back" shape="rect" id="array-back"></a><a href="#array-back-note" shape="rect">manipulate back</a><br /><span style="white-space: pre-wrap;"> </span></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"><span style="color: gray"><em>none</em></span></td><td rowspan="1" colspan="1">a = [6, 7, 8]<br />
a.append(9)<br />
a.pop()</td></tr><tr><td rowspan="1" colspan="1"><a name="array-front" shape="rect" id="array-front"></a><a href="#array-front-note" shape="rect">manipulate front</a><br /><span style="white-space: pre-wrap;"> </span></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"><span style="color: gray"><em>none</em></span></td><td rowspan="1" colspan="1">a = [6, 7, 8]<br />
a.insert(0, 5)<br />
a.pop(0)</td></tr><tr><td rowspan="1" colspan="1"><a name="array-concatenation" shape="rect" id="array-concatenation"></a><a href="#array-concatenation-note" shape="rect">concatenate</a></td><td rowspan="1" colspan="1">a = [1 2 3]<br />
a2 = [a [4 5 6]]<br />
a = [a [4 5 6]]</td><td rowspan="1" colspan="1">a = c(1, 2, 3)<br />
a2 = append(a, c(4, 5, 6))<br />
a = append(a, c(4, 5, 6))</td><td rowspan="1" colspan="1">a = [1, 2, 3]<br />
a2 = a + [4, 5, 6]<br />
a.extend([4, 5, 6])</td></tr><tr><td rowspan="1" colspan="1"><a name="array-replication" shape="rect" id="array-replication"></a><a href="#array-replication-note" shape="rect">replicate</a></td><td rowspan="1" colspan="1">a = repmat(NA, 1, 10)</td><td rowspan="1" colspan="1">a = rep(NA, 10)<br /><br />
rep(c("a", "b", "c"), c(30, 50, 90))</td><td rowspan="1" colspan="1">a = [None] * 10<br />
a = [None for i in range(0, 10)]</td></tr><tr><td rowspan="1" colspan="1"><a name="array-copy" shape="rect" id="array-copy"></a><a href="#array-copy-note" shape="rect">copy</a><br /><span style="color: gray"><em>address copy, shallow copy, deep copy</em></span></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"><span style="color: gray"># arrays cannot be elements of arrays</span><br />
a = [1, 2, 3, 4]<br /><br /><span style="color: gray"><em>none</em></span><br />
a2 = a</td><td rowspan="1" colspan="1">import copy<br /><br />
a = [1, 2, [3, 4]]<br /><br />
a2 = a<br />
a3 = list(a)<br />
a4 = copy.deepcopy(a)</td></tr><tr><td rowspan="1" colspan="1"><a name="array-arguments" shape="rect" id="array-arguments"></a><a href="#array-arguments-note" shape="rect">arrays as function arguments</a></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"><span style="color: gray"><em>modifying parameter will not modify original array</em></span></td><td rowspan="1" colspan="1"><span style="color: gray"><em>parameter contains address copy; modifying parameter modifies original array</em></span></td></tr><tr><td rowspan="1" colspan="1"><a name="array-iteration" shape="rect" id="array-iteration"></a><a href="#array-iteration-note" shape="rect">iteration</a><br /><span style="white-space: pre-wrap;"> </span></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1">for (x in c(1, 2, 3)) {<br /><span style="white-space: pre-wrap;">  </span>print(x)<br />
}</td><td rowspan="1" colspan="1">for i in [1, 2, 3]:<br /><span style="white-space: pre-wrap;">  </span>print(i)</td></tr><tr><td rowspan="1" colspan="1"><a name="indexed-array-iteration" shape="rect" id="indexed-array-iteration"></a><a href="#indexed-array-iteration-note" shape="rect">indexed iteration</a></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1">for (i in seq_along(a)) {<br /><span style="white-space: pre-wrap;">  </span>cat(sprintf("%s at index %d\n", i, a[i]))<br />
}</td><td rowspan="1" colspan="1">a = ['do', 're', 'mi', 'fa']<br />
for i, s in enumerate(a):<br /><span style="white-space: pre-wrap;">  </span>print('%s at index %d' % (s, i))</td></tr><tr><td rowspan="1" colspan="1"><a name="array-reverse" shape="rect" id="array-reverse"></a><a href="#array-reverse-note" shape="rect">reverse</a></td><td rowspan="1" colspan="1">a = [1 2 3]<br />
a2 = fliplr(a)<br />
a = fliplr(a)</td><td rowspan="1" colspan="1">a = c(1, 2, 3)<br />
a2 = rev(a)<br />
a = rev(a)</td><td rowspan="1" colspan="1">a = [1, 2, 3]<br />
a2 = a[::-1]<br />
a.reverse()</td></tr><tr><td rowspan="1" colspan="1"><a name="array-sort" shape="rect" id="array-sort"></a><a href="#array-sort-note" shape="rect">sort</a></td><td rowspan="1" colspan="1">a = [3 1 4 2]<br />
a = sort(a)</td><td rowspan="1" colspan="1">a = c('b', 'A', 'a', 'B')<br />
a2 = sort(a)<br />
a = sort(a)</td><td rowspan="1" colspan="1">a = ['b', 'A', 'a', 'B']<br />
sorted(a)<br />
a.sort()<br />
a.sort(key=str.lower)</td></tr><tr><td rowspan="1" colspan="1"><a name="array-dedupe" shape="rect" id="array-dedupe"></a><a href="#array-dedupe-note" shape="rect">dedupe</a></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1">a = c(1, 2, 2, 3)<br />
a2 = unique(a)<br />
a = unique(a)</td><td rowspan="1" colspan="1">a = [1, 2, 2, 3]<br />
a2 = list(set(a))<br />
a = list(set(a))</td></tr><tr><td rowspan="1" colspan="1"><a name="membership" shape="rect" id="membership"></a><a href="#membership-note" shape="rect">membership</a><br /><span style="white-space: pre-wrap;"> </span></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1">7 %in% a<br />
is.element(7, a)</td><td rowspan="1" colspan="1">7 in a</td></tr><tr><td rowspan="1" colspan="1"><a name="intersection" shape="rect" id="intersection"></a><a href="#intersection-note" shape="rect">intersection</a><br /><span style="white-space: pre-wrap;"> </span></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1">intersect(c(1, 2), c(2, 3, 4))</td><td rowspan="1" colspan="1">{1, 2} &amp; {2, 3, 4}</td></tr><tr><td rowspan="1" colspan="1"><a name="union" shape="rect" id="union"></a><a href="#union-note" shape="rect">union</a><br /><span style="white-space: pre-wrap;"> </span></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1">union(c(1, 2), c(2, 3, 4))</td><td rowspan="1" colspan="1">{1, 2} | {2, 3, 4}</td></tr><tr><td rowspan="1" colspan="1"><a name="set-diff" shape="rect" id="set-diff"></a><a href="#set-diff-note" shape="rect">relative complement, symmetric difference</a></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1">setdiff(c(1, 2, 3), c(2))<br /><br />
union(setdiff(c(1, 2), c(2, 3, 4)),<br /><span style="white-space: pre-wrap;">  </span>setdiff(c(2, 3, 4), c(1, 2)))</td><td rowspan="1" colspan="1">{1, 2, 3} - {2}<br /><br />
{1, 2} ^ {2, 3, 4}</td></tr><tr><td rowspan="1" colspan="1"><a name="map" shape="rect" id="map"></a><a href="#map-note" shape="rect">map</a><br /><span style="white-space: pre-wrap;"> </span></td><td rowspan="1" colspan="1">arrayfun( @(x) x*x, [1 2 3])</td><td rowspan="1" colspan="1">sapply(c(1,2,3), function (x) { x * x})</td><td rowspan="1" colspan="1">map(lambda x: x * x, [1, 2, 3])<br /><span style="color: gray"># or use list comprehension:</span><br />
[x * x for x in [1, 2, 3]]</td></tr><tr><td rowspan="1" colspan="1"><a name="filter" shape="rect" id="filter"></a><a href="#filter-note" shape="rect">filter</a><br /><span style="white-space: pre-wrap;"> </span></td><td rowspan="1" colspan="1">a = [1 2 3]<br />
a(a &gt; 2)</td><td rowspan="1" colspan="1">a = c(1, 2, 3)<br />
a[a &gt; 2]<br /><br />
Filter(function(x) { x &gt; 2}, a)</td><td rowspan="1" colspan="1">filter(lambda x: x &gt; 1, [1, 2, 3])<br /><span style="color: gray"># or use list comprehension:</span><br />
[x for x in [1, 2, 3] if x &gt; 1]</td></tr><tr><td rowspan="1" colspan="1"><a name="reduce" shape="rect" id="reduce"></a><a href="#reduce-note" shape="rect">reduce</a><br /><span style="white-space: pre-wrap;"> </span></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1">Reduce(function(x, y) { x + y }, c(1, 2, 3), 0)</td><td rowspan="1" colspan="1">reduce(lambda x, y: x + y, [1 ,2, 3], 0)</td></tr><tr><td rowspan="1" colspan="1"><a name="universal-existential-test" shape="rect" id="universal-existential-test"></a><a href="#universal-existential-test-note" shape="rect">universal and existential tests</a><br /><span style="white-space: pre-wrap;"> </span></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1">all(c(1, 2, 3, 4) %% 2 == 0)<br />
any(c(1, 2, 3, 4) %% 2 == 0)</td><td rowspan="1" colspan="1">all(i % 2 == 0 for i in [1, 2, 3, 4])<br />
any(i % 2 == 0 for i in [1, 2, 3, 4])</td></tr><tr><td rowspan="1" colspan="1"><a name="shuffle-sample" shape="rect" id="shuffle-sample"></a><a href="#shuffle-sample-note" shape="rect">shuffle and sample</a></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1">a = c(1, 1, 2, 3, 9, 28)<br />
sample(a, 3)<br />
a[sample.int(length(a))]</td><td rowspan="1" colspan="1">from random import shuffle, sample<br /><br />
a = [1, 2, 3, 4]<br />
shuffle(a)<br />
sample(a, 2)</td></tr><tr><td rowspan="1" colspan="1"><a name="zip" shape="rect" id="zip"></a><a href="#zip-note" shape="rect">zip</a><br /><span style="white-space: pre-wrap;"> </span></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"><span style="color: gray"># R vectors can't be nested.<br />
# One approximation of zip is a 2d array:</span><br />
a = rbind(c(1, 2, 3), c('a', 'b', 'c'))<br /><br /><span style="color: gray"># To prevent data type coercion, use a data frame:</span><br />
df = data.frame(numbers=c(1, 2, 3),<br /><span style="white-space: pre-wrap;">  </span>letters=c('a', 'b', 'c'))</td><td rowspan="1" colspan="1"><span style="color: gray"># array of 3 pairs:</span><br />
a = zip([1, 2, 3], ['a', 'b', 'c'])</td></tr><tr><th colspan="4" rowspan="1"><a name="arithmetic-sequences" shape="rect" id="arithmetic-sequences"></a><a href="#arithmetic-sequences-note" shape="rect">arithmetic sequences</a></th></tr><tr><th rowspan="1" colspan="1"></th><th rowspan="1" colspan="1"><a href="#matlab" shape="rect">matlab</a></th><th rowspan="1" colspan="1"><a href="#r" shape="rect">r</a></th><th rowspan="1" colspan="1"><a href="#numpy" shape="rect">numpy</a></th></tr><tr><td rowspan="1" colspan="1"><a name="arith-seq-diff-one" shape="rect" id="arith-seq-diff-one"></a><a href="#arith-seq-diff-one-note" shape="rect">unit difference</a></td><td rowspan="1" colspan="1">1:100</td><td rowspan="1" colspan="1"><span style="color: gray"># type integer:</span><br />
1:100<br />
seq(1, 100)<br /><br /><span style="color: gray"># type double:</span><br />
seq(1, 100, 1)</td><td rowspan="1" colspan="1">range(1, 101)</td></tr><tr><td rowspan="1" colspan="1"><a name="arith-seq-diff-ten" shape="rect" id="arith-seq-diff-ten"></a><a href="#arith-seq-diff-ten-note" shape="rect">difference of 10</a></td><td rowspan="1" colspan="1">0:10:100</td><td rowspan="1" colspan="1"><span style="color: gray"># type double:</span><br />
seq(0, 100, 10)</td><td rowspan="1" colspan="1">range(0, 101, 10)</td></tr><tr><td rowspan="1" colspan="1"><a name="arith-seq-diff-tenth" shape="rect" id="arith-seq-diff-tenth"></a><a href="#arith-seq-diff-tenth-note" shape="rect">difference of 0.1</a></td><td rowspan="1" colspan="1">0:0.1:10</td><td rowspan="1" colspan="1">seq(0, 10, 0.1)</td><td rowspan="1" colspan="1">[0.1 * x for x in range(0, 101)]<br /><br /><span style="color: gray"><em>3rd arg is length of sequence, not step size:</em></span><br />
sp.linspace(0, 10, 100)</td></tr><tr><td rowspan="1" colspan="1"><a name="iter-over-arith-seq" shape="rect" id="iter-over-arith-seq"></a><a href="#iter-over-arith-seq-note" shape="rect">iterate over arithmetic sequence</a></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"><span style="color: gray">range <em>replaces</em> xrange <em>in Python 3:</em></span><br />
for i in xrange(1, 1000001):<br /><span style="white-space: pre-wrap;">  </span><span style="color: gray"><em>code</em></span></td></tr><tr><td rowspan="1" colspan="1"><a name="arith-seq-to-array" shape="rect" id="arith-seq-to-array"></a><a href="#arith-seq-to-array-note" shape="rect">convert arithmetic sequence to array</a></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1">a = range(1, 11)<br /><span style="color: gray"><em>Python 3:</em></span><br />
a = list(range(1, 11))</td></tr><tr><th colspan="4" rowspan="1"><a name="multidimensional-arrays" shape="rect" id="multidimensional-arrays"></a><a href="#multidimensional-arrays-note" shape="rect">multidimensional arrays</a></th></tr><tr><th rowspan="1" colspan="1"></th><th rowspan="1" colspan="1"><a href="#matlab" shape="rect">matlab</a></th><th rowspan="1" colspan="1"><a href="#r" shape="rect">r</a></th><th rowspan="1" colspan="1"><a href="#numpy" shape="rect">numpy</a></th></tr><tr><td rowspan="1" colspan="1"><a name="multidimensional-array-elem-type" shape="rect" id="multidimensional-array-elem-type"></a><a href="#multidimensional-array-elem-type-note" shape="rect">element type</a></td><td rowspan="1" colspan="1"><span style="color: gray"><em>always numeric</em></span></td><td rowspan="1" colspan="1">a = array(c(1, 2, 3))<br /><br /><span style="color: gray"># "array":</span><br />
class(a)<br /><br /><span style="color: gray"># "boolean", "numeric", or "string":</span><br />
class(c(a))</td><td rowspan="1" colspan="1">np.array([1, 2, 3]).dtype<br /><br /><span style="color: gray"># possible values: np.bool, np.int64, np.float64,<br />
# np.complex128, <span style="white-space: pre-wrap;">...</span></span></td></tr><tr><td rowspan="1" colspan="1"><a name="1d-array-literal" shape="rect" id="1d-array-literal"></a><a href="#1d-array-literal-note" shape="rect">literal—1d</a></td><td rowspan="1" colspan="1">[1, 2, 3]<br /><br /><span style="color: gray">% commas are optional:</span><br />
[1 2 3]</td><td rowspan="1" colspan="1"><span style="color: gray"># no literal; pass array to multidimensional<br />
# array constructor:</span><br />
array(c(1, 2, 3))</td><td rowspan="1" colspan="1"><span style="color: gray"># no literal; pass sequence type to multidimsional<br />
# array constructor:</span><br />
np.array([1, 2, 3])<br />
np.array((1, 2, 3))</td></tr><tr><td rowspan="1" colspan="1"><a name="2d-array-literal" shape="rect" id="2d-array-literal"></a><a href="#2d-array-literal-note" shape="rect">literal—2d</a></td><td rowspan="1" colspan="1">[1, 2; 3, 4]<br /><br /><span style="color: gray">% commas optional; newlines can replace semicolons::</span><br />
[1 2<br /><span style="white-space: pre-wrap;"> </span>3 4]</td><td rowspan="1" colspan="1"><span style="color: gray"><em>none</em></span></td><td rowspan="1" colspan="1"><span style="color: gray"><em>none</em></span></td></tr><tr><td rowspan="1" colspan="1"><a name="2d-construct-seq" shape="rect" id="2d-construct-seq"></a><a href="#2d-construct-seq-note" shape="rect">construct from sequence—2d</a></td><td rowspan="1" colspan="1">reshape([1 2 3 4], 2, 2)</td><td rowspan="1" colspan="1">array(c(1, 2, 3, 4), dim=c(2, 2))</td><td rowspan="1" colspan="1">np.array([1, 2, 3, 4]).reshape(2, 2)</td></tr><tr><td rowspan="1" colspan="1"><a name="3d-construct-seq" shape="rect" id="3d-construct-seq"></a><a href="#3d-construct-seq-note" shape="rect">construct from sequence—3d</a></td><td rowspan="1" colspan="1">reshape([1 2 3 4 5 6 7 8], 2, 2, 2)</td><td rowspan="1" colspan="1">array(c(1, 2, 3, 4, 5, 6, 7, 8), dim=c(2, 2, 2))</td><td rowspan="1" colspan="1">np.array([1, 2, 3, 4, 5, 6, 7, 8]).reshape(2, 2, 2)</td></tr><tr><td rowspan="1" colspan="1"><a name="2d-construct-nested-seq" shape="rect" id="2d-construct-nested-seq"></a><a href="#2d-construct-nested-seq-note" shape="rect">construct from nested sequences—2d</a></td><td rowspan="1" colspan="1"><span style="color: gray"><em>none</em></span></td><td rowspan="1" colspan="1"><span style="color: gray"><em>none</em></span></td><td rowspan="1" colspan="1">np.array([[1, 2], [3, 4]])</td></tr><tr><td rowspan="1" colspan="1"><a name="3d-construct-nested-seq" shape="rect" id="3d-construct-nested-seq"></a><a href="#3d-construct-nested-seq-note" shape="rect">construct from nested sequences—3d</a></td><td rowspan="1" colspan="1"><span style="color: gray"><em>none</em></span></td><td rowspan="1" colspan="1"><span style="color: gray"><em>none</em></span></td><td rowspan="1" colspan="1">np.array([[[1, 2], [3, 4]], [[5, 6], [7, 8]]])</td></tr><tr><td rowspan="1" colspan="1"><a name="2d-construct-rows" shape="rect" id="2d-construct-rows"></a><a href="#2d-construct-rows-note" shape="rect">construct from rows—2d</a></td><td rowspan="1" colspan="1">row1 = [1 2 3]<br />
row2 = [4 5 6]<br /><br />
a = [row1; row2]</td><td rowspan="1" colspan="1">rbind(c(1, 2, 3), c(4, 5, 6))</td><td rowspan="1" colspan="1">np.vstack((np.array([1, 2, 3]), np.array([4, 5, 6])))<br /><br />
np.array([[1, 2], [3, 4]])</td></tr><tr><td rowspan="1" colspan="1"><a name="2d-construct-columns" shape="rect" id="2d-construct-columns"></a><a href="#2d-construct-columns-note" shape="rect">construct from columns—2d</a></td><td rowspan="1" colspan="1">col1 = [1; 4]<br />
col2 = [2; 5]<br />
col3 = [3; 6]<br /><br /><span style="color: gray">% commas are optional:</span><br />
a = [col1, col2, col3]</td><td rowspan="1" colspan="1">cbind(c(1, 4), c(2, 5), c(3, 6))</td><td rowspan="1" colspan="1">cols = (<br /><span style="white-space: pre-wrap;">  </span>np.array([1, 4]),<br /><span style="white-space: pre-wrap;">  </span>np.array([2, 5]),<br /><span style="white-space: pre-wrap;">  </span>np.array([3, 6])<br />
)<br />
np.vstack(cols).transpose()</td></tr><tr><td rowspan="1" colspan="1"><a name="2d-construct-subarrays" shape="rect" id="2d-construct-subarrays"></a><a href="#2d-construct-subarrays-note" shape="rect">construct from subarrays—2d</a></td><td rowspan="1" colspan="1">m = [1 3; 2 4]<br /><br />
m4_by_2 = [m; m]<br />
m2_by_4 = [m m]</td><td rowspan="1" colspan="1">m = matrix(c(1, 2, 3, 4), nrow=2)<br />
m4_by_2 = rbind(m, m)<br />
m2_by_4 = cbind(m, m)</td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="3d-construct-2d-arrays" shape="rect" id="3d-construct-2d-arrays"></a><a href="#3d-construct-2d-arrays-note" shape="rect">construct 3d array from 2d arrays</a></td><td rowspan="1" colspan="1">a = [1, 2; 3, 4]<br />
a(:,:,2) = [5, 6; 7, 8]</td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="multidimensional-array-size" shape="rect" id="multidimensional-array-size"></a><a href="#multidimensional-array-size-note" shape="rect">size</a><br /><span style="color: gray"><em>number of elements, number of dimensions, dimension lengths</em></span></td><td rowspan="1" colspan="1">numel(a)<br />
ndims(a)<br />
size(a)<br /><br /><span style="color: gray">% length of 1st dimension (i.e. # of rows):</span><br />
size(a, 1)<br /><br /><span style="color: gray">% length of longest dimension:</span><br />
length(a)</td><td rowspan="1" colspan="1">length(a)<br />
length(dim(a))<br />
dim(a)</td><td rowspan="1" colspan="1">a.size<br />
a.ndim<br />
a.shape<br /><br /><span style="color: gray"># number of rows:</span><br />
len(a)</td></tr><tr><td rowspan="1" colspan="1"><a name="1d-lookup" shape="rect" id="1d-lookup"></a><a href="#1d-lookup-note" shape="rect">lookup—1d</a></td><td rowspan="1" colspan="1"><span style="color: gray"><em>indices start at one:</em></span><br />
[1 2 3](1)</td><td rowspan="1" colspan="1"><span style="color: gray"><em>indices start at one:</em></span><br />
array(c(1, 2, 3))[1]</td><td rowspan="1" colspan="1"><span style="color: gray"><em>indices start at zero:</em></span><br />
a = np.array([1, 2, 3])<br />
a[0]</td></tr><tr><td rowspan="1" colspan="1"><a name="2d-lookup" shape="rect" id="2d-lookup"></a><a href="#2d-lookup-note" shape="rect">lookup—2d</a></td><td rowspan="1" colspan="1">[1 2; 3 4](1, 1)</td><td rowspan="1" colspan="1">a = array(c(1, 2, 3, 4), dim=c(2, 2)<br /><br />
a[1, 1]</td><td rowspan="1" colspan="1">a = np.array([[1, 2], [3, 4]])<br /><br />
a[0][0] <span style="color: gray"><em>or</em></span><br />
a[0, 0]</td></tr><tr><td rowspan="1" colspan="1"><a name="1d-lookup-2d-array" shape="rect" id="1d-lookup-2d-array"></a><a href="#1d-lookup-2d-array-note" shape="rect">1d lookup on 2d array</a></td><td rowspan="1" colspan="1">a = [2 4; 6 8]<br /><span style="color: gray">% returns 8:</span><br />
a(4)<br /><br /><span style="color: gray">% convert to column vector of length 4:</span><br />
a2 = a(:)</td><td rowspan="1" colspan="1">a = array(c(2, 4, 6, 8), dim=c(2, 2))<br /><br /><span style="color: gray"># returns 8:</span><br />
a[4]</td><td rowspan="1" colspan="1">a = np.array([[2, 4], [6, 8]])<br /><br /><span style="color: gray"># returns np.array([6, 8]):</span><br />
a[1]<br /><br /><span style="color: gray"># returns 8:</span><br />
a.reshape(4)[3]</td></tr><tr><td rowspan="1" colspan="1"><a name="2d-update" shape="rect" id="2d-update"></a><a href="#2d-update-note" shape="rect">update—2d</a></td><td rowspan="1" colspan="1">a = [2 4; 6 8]<br />
a(1, 1) = 3</td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="multidimensional-array-out-of-bounds" shape="rect" id="multidimensional-array-out-of-bounds"></a><a href="#multidimensional-array-out-of-bounds-note" shape="rect">out-of-bounds behavior</a></td><td rowspan="1" colspan="1">a = [2 4; 6 8]<br /><br /><span style="color: gray">% error:</span><br />
x = a(3, 1)<br /><br /><span style="color: gray">% becomes 3x2 array with zero at (3, 2):</span><br />
a(3, 1) = 9</td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="multidimensional-array-slice" shape="rect" id="multidimensional-array-slice"></a><a href="#multidimensional-array-slice-note" shape="rect">slice</a><br /><span style="color: gray"><em>row, column</em></span></td><td rowspan="1" colspan="1">a = [1 2 3; 4 5 6; 7 8 9]<br /><br /><span style="color: gray">% 2nd row:</span><br />
a(2, :)<br /><br /><span style="color: gray">% 2nd column:</span><br />
a(:, 2)</td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="multidimensional-array-slice-to-end" shape="rect" id="multidimensional-array-slice-to-end"></a><a href="#multidimensional-array-slice-to-end-note" shape="rect">slice to end</a></td><td rowspan="1" colspan="1">a = [1 2 3 4]<br /><br /><span style="color: gray">% [2 3 4]:</span><br />
a(2:end)</td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="multidimensional-array-slice-subarray" shape="rect" id="multidimensional-array-slice-subarray"></a><a href="#multidimensional-array-slice-subarray-note" shape="rect">slice subarray</a></td><td rowspan="1" colspan="1">a = [1 2 3; 4 5 6; 7 8 9]<br /><br /><span style="color: gray">% top left 2x2 subarray:</span><br />
a(1:2, 1:2)<br /><br /><span style="color: gray">% bottom right 2x2 subarray:</span><br />
a(end-1:end, end-1:end)<br /><br /><span style="color: gray">% 2x2 array containing corners:</span><br />
a([1 3], [1 3])</td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="multidimensional-array-transpose" shape="rect" id="multidimensional-array-transpose"></a><a href="#multidimensional-array-transpose-note" shape="rect">transpose</a></td><td rowspan="1" colspan="1">a = [1 2; 3 4]<br /><br />
a'<br />
transpose(a)</td><td rowspan="1" colspan="1">a = array(c(1, 2, 3, 4), dim=c(2, 2))<br />
t(a)</td><td rowspan="1" colspan="1">a = np.array([[1, 2], [3, 4]])<br />
a.transpose()<br />
a.T</td></tr><tr><td rowspan="1" colspan="1"><a name="multidimensional-array-swap-axes" shape="rect" id="multidimensional-array-swap-axes"></a><a href="#multidimensional-array-swap-axes-note" shape="rect">swap axes</a></td><td rowspan="1" colspan="1">a = reshape([1 2 3 4 5 6 7 8], 2, 2, 2)<br /><br /><span style="color: gray">% swap 2nd and 3rd axes:</span><br />
permute(a, [1 3 2])</td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="2d-flip" shape="rect" id="2d-flip"></a><a href="#2d-flip-note" shape="rect">flip—2d</a></td><td rowspan="1" colspan="1"><span style="color: gray">% [ 2 1; 4 3]:</span><br />
fliplr([1 2; 3 4])<br /><br /><span style="color: gray">% [3 4; 1 2]:</span><br />
flipud([1 2; 3 4])</td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="3d-flip" shape="rect" id="3d-flip"></a><a href="#3d-flip-note" shape="rect">flip—3d</a></td><td rowspan="1" colspan="1">a = reshape([1 2 3 4 5 6 7 8], 2, 2, 2)<br /><br />
flipdim(a, 3)</td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="2d-circular-shift" shape="rect" id="2d-circular-shift"></a><a href="#2d-circular-shift-note" shape="rect">circular shift—2d</a></td><td rowspan="1" colspan="1">circshift</td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="2d-rotate" shape="rect" id="2d-rotate"></a><a href="#2d-rotate-note" shape="rect">rotate—2d</a><br /><span style="color: gray"><em>clockwise, counter-clockwise</em></span></td><td rowspan="1" colspan="1">a = [1 2; 3 4]<br /><br /><span style="color: gray"># [3 1; 4 2]:</span><br />
rot90(a, -1)<br /><br /><span style="color: gray"># [2 4; 1 3]:</span><br />
rot90(a)</td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="multidimensional-array-apply-func-element-wise" shape="rect" id="multidimensional-array-apply-func-element-wise"></a><a href="#multidimensional-array-apply-func-element-wise-note" shape="rect">apply function element-wise</a></td><td rowspan="1" colspan="1">arrayfun</td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1">np.vectorize</td></tr><tr><td rowspan="1" colspan="1"><a name="multidimensional-array-apply-func-linear-subarrays" shape="rect" id="multidimensional-array-apply-func-linear-subarrays"></a><a href="#multidimensional-array-apply-func-linear-subarrays-note" shape="rect">apply function to linear subarrays</a><br /><span style="color: gray"><em>rows, columns</em></span></td><td rowspan="1" colspan="1">arrayfun<br /><span style="color: gray"><em>note return value type</em></span></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td></tr><tr><th colspan="4" rowspan="1"><a name="dictionaries" shape="rect" id="dictionaries"></a><a href="#dictionaries-note" shape="rect">dictionaries</a></th></tr><tr><th rowspan="1" colspan="1"></th><th rowspan="1" colspan="1"><a href="#matlab" shape="rect">matlab</a></th><th rowspan="1" colspan="1"><a href="#r" shape="rect">r</a></th><th rowspan="1" colspan="1"><a href="#numpy" shape="rect">numpy</a></th></tr><tr><td rowspan="1" colspan="1"><a name="dict-literal" shape="rect" id="dict-literal"></a><a href="#dict-literal-note" shape="rect">literal</a><br /><span style="white-space: pre-wrap;"> </span></td><td rowspan="1" colspan="1">d = struct('n', 10, 'avg', 3.7, 'sd', 0.4)</td><td rowspan="1" colspan="1"><span style="color: gray"># keys are 'n', 'avg', and 'sd':</span><br />
d = list(n=10, avg=3.7, sd=0.4)<br /><br /><span style="color: gray"># keys are 1, 2, and 3:</span><br />
d2 = list('do', 're', 'mi')</td><td rowspan="1" colspan="1">d = {'n': 10, 'avg': 3.7, 'sd': 0.4}</td></tr><tr><td rowspan="1" colspan="1"><a name="dict-size" shape="rect" id="dict-size"></a><a href="#dict-size-note" shape="rect">size</a></td><td rowspan="1" colspan="1">length(fieldnames(d))</td><td rowspan="1" colspan="1">length(d)</td><td rowspan="1" colspan="1">len(d)</td></tr><tr><td rowspan="1" colspan="1"><a name="dict-lookup" shape="rect" id="dict-lookup"></a><a href="#dict-lookup-note" shape="rect">lookup</a><br /><span style="white-space: pre-wrap;"> </span></td><td rowspan="1" colspan="1">d.n</td><td rowspan="1" colspan="1">d[['n']]<br /><br /><span style="color: gray"># if 'n' is a key:</span><br />
d$n</td><td rowspan="1" colspan="1">d['n']</td></tr><tr><td rowspan="1" colspan="1"><a name="dict-update" shape="rect" id="dict-update"></a><a href="#dict-update-note" shape="rect">update</a><br /><span style="white-space: pre-wrap;"> </span></td><td rowspan="1" colspan="1">d.var = d.sd<span style="white-space: pre-wrap;">**2</span></td><td rowspan="1" colspan="1">d$var = d$sd<span style="white-space: pre-wrap;">**</span>2</td><td rowspan="1" colspan="1">d['var'] = d['sd']<span style="white-space: pre-wrap;">**</span>2</td></tr><tr><td rowspan="1" colspan="1"><a name="dict-out-of-bounds" shape="rect" id="dict-out-of-bounds"></a><a href="#dict-out-of-bounds-note" shape="rect">out-of-bounds behavior</a><br /><span style="white-space: pre-wrap;"> </span></td><td rowspan="1" colspan="1"><span style="color: gray"><em>error</em></span></td><td rowspan="1" colspan="1">NULL</td><td rowspan="1" colspan="1"><span style="color: gray"><em>raises</em> KeyError</span></td></tr><tr><td rowspan="1" colspan="1"><a name="dict-is-key-present" shape="rect" id="dict-is-key-present"></a><a href="#dict-is-key-present-note" shape="rect">is key present</a><br /><span style="white-space: pre-wrap;"> </span></td><td rowspan="1" colspan="1">isfield(d, 'var')</td><td rowspan="1" colspan="1">is.null(d$var)</td><td rowspan="1" colspan="1">'var' in d</td></tr><tr><td rowspan="1" colspan="1"><a name="dict-delete" shape="rect" id="dict-delete"></a><a href="#dict-delete-note" shape="rect">delete</a><br /><span style="white-space: pre-wrap;"> </span></td><td rowspan="1" colspan="1">d = rmfield(d, 'sd')</td><td rowspan="1" colspan="1">d$sd = NULL</td><td rowspan="1" colspan="1">del(d['sd'])</td></tr><tr><td rowspan="1" colspan="1">iterate</td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1">for (k in names(d)) {<br /><span style="white-space: pre-wrap;">  </span>v = d[[k]]<br /><span style="white-space: pre-wrap;">  </span><span style="color: gray"><em>code</em></span><br />
}</td><td rowspan="1" colspan="1">for k, v in d.iteritems():<br /><span style="white-space: pre-wrap;">  </span><span style="color: gray"><em>code</em></span></td></tr><tr><td rowspan="1" colspan="1">keys and values as arrays</td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1">names(d)<br />
unlist(d, use.names=F)</td><td rowspan="1" colspan="1">d.keys()<br />
d.values()</td></tr><tr><td rowspan="1" colspan="1">merge</td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1">d1 = list(a=1, b=2)<br />
d2 = list(b=3, c=4)<br /><span style="color: gray"><em>values of first dictionary take precedence:</em></span><br />
d3 = c(d1, d2)</td><td rowspan="1" colspan="1">d1 = {'a':1, 'b':2}<br />
d2 = {'b':3, 'c':4}<br />
d1.update(d2)</td></tr><tr><td rowspan="1" colspan="1">invert</td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1">to_num = {'t':1, 'f':0}<br />
to_let = {v:k for k, v<br /><span style="white-space: pre-wrap;">  </span>in to_num.items()}</td></tr><tr><td rowspan="1" colspan="1">sort by values</td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1">from operator import itemgetter<br /><br />
pairs = sorted(d.iteritems(),<br /><span style="white-space: pre-wrap;">  </span>key=itemgetter(1))<br /><br />
for k, v in pairs:<br /><span style="white-space: pre-wrap;">  </span>print('{}: {}'.format(k, v))</td></tr><tr><th colspan="4" rowspan="1"><a name="functions" shape="rect" id="functions"></a><a href="#functions-note" shape="rect">functions</a></th></tr><tr><th rowspan="1" colspan="1"></th><th rowspan="1" colspan="1"><a href="#matlab" shape="rect">matlab</a></th><th rowspan="1" colspan="1"><a href="#r" shape="rect">r</a></th><th rowspan="1" colspan="1"><a href="#numpy" shape="rect">numpy</a></th></tr><tr><td rowspan="1" colspan="1"><a href="#function-definition" shape="rect">definition</a></td><td rowspan="1" colspan="1">function add(a,b)<br /><span style="white-space: pre-wrap;">  </span>a+b;<br />
endfunction</td><td rowspan="1" colspan="1">add = function(a,b) {a + b}</td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a href="#function-invocation" shape="rect">invocation</a><br /><span style="white-space: pre-wrap;"> </span></td><td rowspan="1" colspan="1">add(3, 7)</td><td rowspan="1" colspan="1">add(3, 7)</td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a href="#return-value" shape="rect">return value</a></td><td rowspan="1" colspan="1"><span style="color: gray"><em>how to declare a return variable:</em></span><br />
function retvar = add(a,b)<br /><span style="white-space: pre-wrap;">  </span>retvar = a + b;<br />
endfunction<br /><br /><span style="color: gray"><em>the return value is the value assigned to the return variable if one is defined; otherwise it's the last expression evaluated.</em></span></td><td rowspan="1" colspan="1"><span style="color: gray">return <em>argument or last expression evaluated.</em> NULL <em>if</em> return <em>called without an argument.</em></span></td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="multiple-return-values" shape="rect" id="multiple-return-values"></a><a href="#multiple-return-values" shape="rect">multiple return values</a></td><td rowspan="1" colspan="1">function [x, y] = first_two(a)<br /><span style="white-space: pre-wrap;">  </span>x = a(1);<br /><span style="white-space: pre-wrap;">  </span>y = a(2);<br />
endfunction<br /><br /><span style="color: gray">% sets first to 7; second to 8:</span><br />
[first, second] = first_two([7 8 9])</td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a href="#function-value" shape="rect">function value</a><br /><span style="white-space: pre-wrap;"> </span></td><td rowspan="1" colspan="1">@add</td><td rowspan="1" colspan="1">add</td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="nested-func" shape="rect" id="nested-func"></a><a href="#nested-func-note" shape="rect">nested function</a></td><td rowspan="1" colspan="1">function ret1 = foo(x, y)<br /><span style="white-space: pre-wrap;">  </span>function ret2 = bar(x, y)<br /><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span>ret2 = x + y;<br /><span style="white-space: pre-wrap;">  </span>endfunction<br /><br /><span style="white-space: pre-wrap;">  </span>ret1 = bar(x, y);<br />
endfunction</td><td rowspan="1" colspan="1">foo = function(x, y) {<br /><span style="white-space: pre-wrap;">  </span>bar = function(x, y) { x + y }<br /><span style="white-space: pre-wrap;">  </span>bar(x, y)<br />
}</td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a href="#anonymous-function" shape="rect">anonymous function</a></td><td rowspan="1" colspan="1"><span style="color: gray">% body must be an expression:</span><br />
@(a,b) a+b</td><td rowspan="1" colspan="1">function(a,b) {a+b}</td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a href="#missing-argument" shape="rect">missing argument</a></td><td rowspan="1" colspan="1"><span style="color: gray"><em>raises error if code with the parameter that is missing an argument is executed</em></span></td><td rowspan="1" colspan="1"><span style="color: gray"><em>raises error</em></span></td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a href="#extra-argument" shape="rect">extra argument</a><br /><span style="white-space: pre-wrap;"> </span></td><td rowspan="1" colspan="1"><span style="color: gray"><em>ignored</em></span></td><td rowspan="1" colspan="1"><span style="color: gray"><em>raises error</em></span></td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a href="#default-argument" shape="rect">default argument</a></td><td rowspan="1" colspan="1">function mylog(x, base=10)<br /><span style="white-space: pre-wrap;">  </span>log(x) / log(base)<br />
endfunction</td><td rowspan="1" colspan="1">mylog = function(x,base=10) {<br /><span style="white-space: pre-wrap;">  </span>log(x) / log(base)<br />
}</td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a href="#variable-number-arguments" shape="rect">variable number of arguments</a></td><td rowspan="1" colspan="1">function s = add(varargin)<br /><span style="white-space: pre-wrap;">  </span>if nargin == 0<br /><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span>s = 0<br /><span style="white-space: pre-wrap;">  </span>else<br /><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span>r = add(varargin{2:nargin})<br /><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span>s = varagin{1} + r<br /><span style="white-space: pre-wrap;">  </span>endif<br />
endfunction</td><td rowspan="1" colspan="1">add = function (<span style="white-space: pre-wrap;">...</span>) {<br /><span style="white-space: pre-wrap;">  </span>a = list(<span style="white-space: pre-wrap;">...</span>)<br /><span style="white-space: pre-wrap;">  </span>if (length(a) == 0)<br /><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span>return(0)<br /><span style="white-space: pre-wrap;">  </span>s = 0<br /><span style="white-space: pre-wrap;">  </span>for(i in 1:length(a)) {<br /><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span>s = s + a[[i]]<br /><span style="white-space: pre-wrap;">  </span>}<br /><span style="white-space: pre-wrap;">  </span>return(s)<br />
}</td><td rowspan="1" colspan="1"></td></tr><tr><th colspan="4" rowspan="1"><a name="execution-control" shape="rect" id="execution-control"></a><a href="#execution-control-note" shape="rect">execution control</a></th></tr><tr><th rowspan="1" colspan="1"></th><th rowspan="1" colspan="1"><a href="#matlab" shape="rect">matlab</a></th><th rowspan="1" colspan="1"><a href="#r" shape="rect">r</a></th><th rowspan="1" colspan="1"><a href="#numpy" shape="rect">numpy</a></th></tr><tr><td rowspan="1" colspan="1"><a name="if" shape="rect" id="if"></a><a href="#if-note" shape="rect">if</a></td><td rowspan="1" colspan="1">if (x &gt; 0)<br /><span style="white-space: pre-wrap;">  </span>printf('positive\n')<br />
elseif (x &lt; 0)<br /><span style="white-space: pre-wrap;">  </span>printf('negative\n')<br />
else<br /><span style="white-space: pre-wrap;">  </span>printf('zero\n')<br />
endif</td><td rowspan="1" colspan="1">if (x &gt; 0) {<br /><span style="white-space: pre-wrap;">  </span>print('positive')<br />
} else if (x &lt; 0) {<br /><span style="white-space: pre-wrap;">  </span>print('negative')<br />
} else {<br /><span style="white-space: pre-wrap;">  </span>print('zero')<br />
}</td><td rowspan="1" colspan="1">if x &gt; 0:<br /><span style="white-space: pre-wrap;">  </span>print('positive')<br />
elif x &lt; 0:<br /><span style="white-space: pre-wrap;">  </span>print('negative')<br />
else:<br /><span style="white-space: pre-wrap;">  </span>print('zero')</td></tr><tr><td rowspan="1" colspan="1"><a name="while" shape="rect" id="while"></a><a href="#while-note" shape="rect">while</a></td><td rowspan="1" colspan="1">i = 0<br />
while (i &lt; 10)<br /><span style="white-space: pre-wrap;">  </span>i++<br /><span style="white-space: pre-wrap;">  </span>printf('%d\n', i)<br />
endwhile</td><td rowspan="1" colspan="1">while (i &lt; 10) {<br /><span style="white-space: pre-wrap;">  </span>i = i + 1<br /><span style="white-space: pre-wrap;">  </span>print(i)<br />
}</td><td rowspan="1" colspan="1">while i &lt; 10:<br /><span style="white-space: pre-wrap;">  </span>i += 1<br /><span style="white-space: pre-wrap;">  </span>print(i)</td></tr><tr><td rowspan="1" colspan="1"><a name="for" shape="rect" id="for"></a><a href="#for-note" shape="rect">for</a></td><td rowspan="1" colspan="1">for i = 1:10<br /><span style="white-space: pre-wrap;">  </span>printf('%d\n', i)<br />
endfor</td><td rowspan="1" colspan="1">for (i in 1:10) {<br /><span style="white-space: pre-wrap;">  </span>print(i)<br />
}</td><td rowspan="1" colspan="1">for i in range(1,11):<br /><span style="white-space: pre-wrap;">  </span>print(i)</td></tr><tr><td rowspan="1" colspan="1"><a name="break-continue" shape="rect" id="break-continue"></a><a href="#break-continue-note" shape="rect">break/continue</a><br /><span style="white-space: pre-wrap;"> </span></td><td rowspan="1" colspan="1">break continue</td><td rowspan="1" colspan="1">break next</td><td rowspan="1" colspan="1">break continue</td></tr><tr><td rowspan="1" colspan="1"><a name="raise-exc" shape="rect" id="raise-exc"></a><a href="#raise-exc-note" shape="rect">raise exception</a><br /><span style="white-space: pre-wrap;"> </span></td><td rowspan="1" colspan="1">error('%s', 'failed')</td><td rowspan="1" colspan="1">stop('failed')</td><td rowspan="1" colspan="1">raise Exception('failed')</td></tr><tr><td rowspan="1" colspan="1"><a name="handle-exc" shape="rect" id="handle-exc"></a><a href="#handle-exc-note" shape="rect">handle exception</a></td><td rowspan="1" colspan="1">try<br /><span style="white-space: pre-wrap;">  </span>error('failed')<br />
catch<br /><span style="white-space: pre-wrap;">  </span>printf('%s\n', lasterr())<br />
end_try_catch</td><td rowspan="1" colspan="1">tryCatch(<br /><span style="white-space: pre-wrap;">  </span>stop('failed'),<br /><span style="white-space: pre-wrap;">  </span>error=function(e) print(message(e)))</td><td rowspan="1" colspan="1">try:<br /><span style="white-space: pre-wrap;">  </span>raise Exception('failed')<br />
except Exception as e:<br /><span style="white-space: pre-wrap;">  </span>print(e)</td></tr><tr><td rowspan="1" colspan="1"><a name="finally" shape="rect" id="finally"></a><a href="#finally-note" shape="rect">finally block</a></td><td rowspan="1" colspan="1">unwind_protect<br /><span style="white-space: pre-wrap;">  </span>if ( rand &gt; 0.5 )<br /><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span>error('failed')<br /><span style="white-space: pre-wrap;">  </span>endif<br />
unwind_protect_cleanup<br /><span style="white-space: pre-wrap;">  </span>printf('cleanup')<br />
end_unwind_protect</td><td rowspan="1" colspan="1">risky = function() {<br /><span style="white-space: pre-wrap;">  </span>if (runif(1) &gt; 0.5) {<br /><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span>stop('failed')<br /><span style="white-space: pre-wrap;">  </span>}<br />
}<br /><br />
tryCatch(<br /><span style="white-space: pre-wrap;">  </span>risky(),<br /><span style="white-space: pre-wrap;">  </span>finally=print('cleanup'))</td><td rowspan="1" colspan="1"></td></tr><tr><th colspan="4" rowspan="1"><a name="file-handle" shape="rect" id="file-handle"></a><a href="#file-handle-note" shape="rect">file handles</a></th></tr><tr><th rowspan="1" colspan="1"></th><th rowspan="1" colspan="1"><a href="#matlab" shape="rect">matlab</a></th><th rowspan="1" colspan="1"><a href="#r" shape="rect">r</a></th><th rowspan="1" colspan="1"><a href="#numpy" shape="rect">numpy</a></th></tr><tr><td rowspan="1" colspan="1"><a name="std-file-handles" shape="rect" id="std-file-handles"></a><a href="#std-file-handles-note" shape="rect">standard file handles</a></td><td rowspan="1" colspan="1">stdin stdout stderr</td><td rowspan="1" colspan="1">stdin() stdout() stderr()</td><td rowspan="1" colspan="1">sys.stdin sys.stdout sys.stderr</td></tr><tr><td rowspan="1" colspan="1"><a name="read-line-stdin" shape="rect" id="read-line-stdin"></a><a href="#read-line-stdin-note" shape="rect">read line from stdin</a></td><td rowspan="1" colspan="1">line = input("", "s")</td><td rowspan="1" colspan="1">line = readLines(n=1)</td><td rowspan="1" colspan="1">line = sys.stdin.readline()</td></tr><tr><td rowspan="1" colspan="1"><a name="write-line-stdout" shape="rect" id="write-line-stdout"></a><a href="#write-line-stdout-note" shape="rect">write line to stdout</a></td><td rowspan="1" colspan="1">puts("hello\n")</td><td rowspan="1" colspan="1">cat("hello\n")<br /><br />
writeLines("hello")</td><td rowspan="1" colspan="1">print('hello')</td></tr><tr><td rowspan="1" colspan="1"><a name="printf" shape="rect" id="printf"></a><a href="#printf-note" shape="rect">write formatted string to stdout</a></td><td rowspan="1" colspan="1">printf("%.2f\n", pi)</td><td rowspan="1" colspan="1">cat(sprintf("%.2f\n", pi))</td><td rowspan="1" colspan="1">import math<br /><br />
print('%.2f' % math.pi)</td></tr><tr><td rowspan="1" colspan="1"><a name="open-file" shape="rect" id="open-file"></a><a href="#open-file-note" shape="rect">open file for reading</a></td><td rowspan="1" colspan="1">if ((f = fopen("/etc/hosts")) == -1)<br /><span style="white-space: pre-wrap;">  </span>error("failed to open file")<br />
endif</td><td rowspan="1" colspan="1">f = file("/etc/hosts", "r")</td><td rowspan="1" colspan="1">f = open('/etc/hosts')</td></tr><tr><td rowspan="1" colspan="1"><a name="open-file-write" shape="rect" id="open-file-write"></a><a href="#open-file-write-note" shape="rect">open file for writing</a></td><td rowspan="1" colspan="1">if ((f = fopen("/tmp/test", "w") == -1)<br /><span style="white-space: pre-wrap;">  </span>error("failed to open file")<br />
endif</td><td rowspan="1" colspan="1">f = file("/tmp/test", "w")</td><td rowspan="1" colspan="1">f = open('/tmp/test', 'w')</td></tr><tr><td rowspan="1" colspan="1"><a name="open-file-append" shape="rect" id="open-file-append"></a><a href="#open-file-append-note" shape="rect">open file for appending</a></td><td rowspan="1" colspan="1">if ((f = fopen("/tmp/err.log", "a") == -1)<br /><span style="white-space: pre-wrap;">  </span>error("failed to open file")<br />
endif</td><td rowspan="1" colspan="1">f = file("/tmp/err.log", "a")</td><td rowspan="1" colspan="1">f = open('/tmp/err.log', 'a')</td></tr><tr><td rowspan="1" colspan="1"><a name="close-file" shape="rect" id="close-file"></a><a href="#close-file-note" shape="rect">close file</a></td><td rowspan="1" colspan="1">fclose(f)</td><td rowspan="1" colspan="1">close(f)</td><td rowspan="1" colspan="1">f.close()</td></tr><tr><td rowspan="1" colspan="1"><a name="io-err" shape="rect" id="io-err"></a><a href="#io-err-note" shape="rect">i/o errors</a></td><td rowspan="1" colspan="1"><span style="color: gray">fopen <em>returns -1;</em> fclose <em>throws an error</em></span></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"><span style="color: gray"><em>raise</em> IOError <em>exception</em></span></td></tr><tr><td rowspan="1" colspan="1"><a name="read-line" shape="rect" id="read-line"></a><a href="#read-line-note" shape="rect">read line</a></td><td rowspan="1" colspan="1">line = fgets(f)</td><td rowspan="1" colspan="1">line = readLines(f, n=1)</td><td rowspan="1" colspan="1">line = f.readline()</td></tr><tr><td rowspan="1" colspan="1"><a name="file-iterate" shape="rect" id="file-iterate"></a><a href="#file-iterate-note" shape="rect">iterate over file by line</a></td><td rowspan="1" colspan="1">while(!feof(f))<br /><span style="white-space: pre-wrap;">  </span>line = fgets(f)<br /><span style="white-space: pre-wrap;">  </span>puts(line)<br />
endwhile</td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1">for line in f:<br /><span style="white-space: pre-wrap;">  </span>print(line)</td></tr><tr><td rowspan="1" colspan="1"><a name="read-file-array" shape="rect" id="read-file-array"></a><a href="#read-file-array-note" shape="rect">read file into array of strings</a></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1">lines = readLines(f)</td><td rowspan="1" colspan="1">lines = f.readlines()</td></tr><tr><td rowspan="1" colspan="1"><a name="write-str" shape="rect" id="write-str"></a><a href="#write-str-note" shape="rect">write string</a></td><td rowspan="1" colspan="1">fputs(f, "lorem ipsum")</td><td rowspan="1" colspan="1">cat("lorem ipsum", file=f)</td><td rowspan="1" colspan="1">f.write('lorem ipsum')</td></tr><tr><td rowspan="1" colspan="1"><a name="write-line" shape="rect" id="write-line"></a><a href="#write-line-note" shape="rect">write line</a></td><td rowspan="1" colspan="1">fputs(f, "lorem ipsum\n")</td><td rowspan="1" colspan="1">writeLines("lorem ipsum", con=f)</td><td rowspan="1" colspan="1">f.write('lorem ipsum\n')</td></tr><tr><td rowspan="1" colspan="1"><a name="flush" shape="rect" id="flush"></a><a href="#flush-note" shape="rect">flush file handle</a></td><td rowspan="1" colspan="1">fflush(f)</td><td rowspan="1" colspan="1">flush(f)</td><td rowspan="1" colspan="1">f.flush()</td></tr><tr><td rowspan="1" colspan="1"><a name="seek" shape="rect" id="seek"></a><a href="#seek-note" shape="rect">file handle position</a><br /><span style="color: gray"><em>get, set</em></span></td><td rowspan="1" colspan="1">ftell(f)<br /><br /><span style="color: gray">% 3rd arg can be SEEK_CUR or SEEK_END</span><br />
fseek(f, 0, SEEK_SET)</td><td rowspan="1" colspan="1">seek(f)<br /><br /><span style="color: gray"># sets seek point to 12 bytes after start;<br />
# origin can also be "current" or "end"</span><br />
seek(f, where=0, origin="start")</td><td rowspan="1" colspan="1">f.tell()<br /><br />
f.seek(0)</td></tr><tr><td rowspan="1" colspan="1"><a name="redirect-stdout-to-file" shape="rect" id="redirect-stdout-to-file"></a><a href="#redirect-stdout-to-file-note" shape="rect">redirect stdout to file</a></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1">sink("foo.txt")</td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1">write variables to file</td><td rowspan="1" colspan="1">A = [1 2; 3 4]<br />
B = [4 3; 2 1]<br /><br />
save('data.mdata', 'A', 'B')</td><td rowspan="1" colspan="1">A = matrix(c(1, 3, 2, 4), nrow=2)<br />
B = matrix(c(4, 2, 3, 1), nrow=2)<br /><br />
save(A, B, file='data.rdata')</td><td rowspan="1" colspan="1">A = np.matrix([[1, 2], [3, 4]])<br />
B = np.matrix([[4, 3], [2, 1]])<br /><br /><span style="color: gray"># Data must be of type np.array;</span><br /><span style="color: gray"># file will have .npz suffix:</span><br />
np.savez('data', A=A, B=B)</td></tr><tr><td rowspan="1" colspan="1">read variables from file</td><td rowspan="1" colspan="1"><span style="color: gray">% puts A and B in scope:</span><br />
load('data.mdata')<br /><br /><span style="color: gray">% puts just A in scope:</span><br />
load('data.mdata', 'A')</td><td rowspan="1" colspan="1"><span style="color: gray"># puts A and B in scope:</span><br />
load('data.rdata')</td><td rowspan="1" colspan="1">data = np.load('data.npz')<br />
A = data['A']<br />
B = data['B']</td></tr><tr><td rowspan="1" colspan="1">write all variables in scope to file</td><td rowspan="1" colspan="1">save('data.txt')</td><td rowspan="1" colspan="1">save.image('data.txt')</td><td rowspan="1" colspan="1"></td></tr><tr><th colspan="4" rowspan="1"><a name="directories" shape="rect" id="directories"></a><a href="#directories-note" shape="rect">directories</a></th></tr><tr><th rowspan="1" colspan="1"></th><th rowspan="1" colspan="1"><a href="#matlab" shape="rect">matlab</a></th><th rowspan="1" colspan="1"><a href="#r" shape="rect">r</a></th><th rowspan="1" colspan="1"><a href="#numpy" shape="rect">numpy</a></th></tr><tr><td rowspan="1" colspan="1"><a name="working-dir" shape="rect" id="working-dir"></a><a href="#working-dir-note" shape="rect">working directory</a><br /><span style="color: gray"><em>get, set</em></span></td><td rowspan="1" colspan="1">pwd<br /><br />
cd("/tmp")</td><td rowspan="1" colspan="1">getwd()<br /><br />
setwd("/tmp")</td><td rowspan="1" colspan="1">os.path.abspath('.')<br /><br />
os.chdir('/tmp')</td></tr><tr><td rowspan="1" colspan="1"><a name="build-pathname" shape="rect" id="build-pathname"></a><a href="#build-pathname-note" shape="rect">build pathname</a></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1">file.path("/etc", "hosts")</td><td rowspan="1" colspan="1">os.path.join('/etc', 'hosts')</td></tr><tr><td rowspan="1" colspan="1"><a name="dirname-basename" shape="rect" id="dirname-basename"></a><a href="#dirname-basename-note" shape="rect">dirname and basename</a></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1">dirname("/etc/hosts")<br />
basename("/etc/hosts")</td><td rowspan="1" colspan="1">os.path.dirname('/etc/hosts')<br />
os.path.basename('/etc/hosts')</td></tr><tr><td rowspan="1" colspan="1"><a name="absolute-pathname" shape="rect" id="absolute-pathname"></a><a href="#absolute-pathname-note" shape="rect">absolute pathname</a></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1">normalizePath("..")</td><td rowspan="1" colspan="1">os.path.abspath('..')</td></tr><tr><td rowspan="1" colspan="1"><a name="iterate-dir" shape="rect" id="iterate-dir"></a><a href="#iterate-dir-note" shape="rect">iterate over directory by file</a></td><td rowspan="1" colspan="1"><span style="color: gray">% lists /etc:</span><br />
ls('/etc')<br /><br /><span style="color: gray">% lists working directory:</span><br />
ls()</td><td rowspan="1" colspan="1"><span style="color: gray"># list.files() defaults to working directory</span><br />
for (path in list.files('/etc')) {<br /><span style="white-space: pre-wrap;">  </span>print(path)<br />
}</td><td rowspan="1" colspan="1">for filename in os.listdir('/etc'):<br /><span style="white-space: pre-wrap;">  </span>print(filename)</td></tr><tr><td rowspan="1" colspan="1"><a name="glob-paths" shape="rect" id="glob-paths"></a><a href="#glob-paths-note" shape="rect">glob paths</a></td><td rowspan="1" colspan="1">glob('/etc/*')</td><td rowspan="1" colspan="1">Sys.glob('/etc/*')</td><td rowspan="1" colspan="1">import glob<br /><br />
glob.glob('/etc/*')</td></tr><tr><th colspan="4" rowspan="1"><a name="processes-environment" shape="rect" id="processes-environment"></a><a href="#processes-environment-note" shape="rect">processes and environment</a></th></tr><tr><th rowspan="1" colspan="1"></th><th rowspan="1" colspan="1"><a href="#matlab" shape="rect">matlab</a></th><th rowspan="1" colspan="1"><a href="#r" shape="rect">r</a></th><th rowspan="1" colspan="1"><a href="#numpy" shape="rect">numpy</a></th></tr><tr><td rowspan="1" colspan="1"><a name="cmd-line-arg" shape="rect" id="cmd-line-arg"></a><a href="#cmd-line-arg-note" shape="rect">command line arguments</a></td><td rowspan="1" colspan="1"><span style="color: gray">% does not include interpreter name:</span><br />
argv()</td><td rowspan="1" colspan="1"><span style="color: gray"># first arg is name of interpreter:</span><br />
commandArgs()<br /><br /><span style="color: gray"># arguments after <span style="white-space: pre-wrap;">--</span>args only:</span><br />
commandArgs(TRUE)</td><td rowspan="1" colspan="1">sys.argv</td></tr><tr><td rowspan="1" colspan="1"><a name="env-var" shape="rect" id="env-var"></a><a href="#env-var-note" shape="rect">environment variable</a><br /><span style="color: gray"><em>get, set</em></span></td><td rowspan="1" colspan="1">getenv("HOME")<br /><br />
setenv("PATH", "/bin")</td><td rowspan="1" colspan="1">Sys.getenv("HOME")<br /><br />
Sys.setenv(PATH="/bin")</td><td rowspan="1" colspan="1">os.getenv('HOME')<br /><br />
os.environ['PATH'] = '/bin'</td></tr><tr><td rowspan="1" colspan="1"><a name="exit" shape="rect" id="exit"></a><a href="#exit-note" shape="rect">exit</a><br /><span style="white-space: pre-wrap;"> </span></td><td rowspan="1" colspan="1">exit(0)</td><td rowspan="1" colspan="1">quit(save="no", status=0)</td><td rowspan="1" colspan="1">sys.exit(0)</td></tr><tr><td rowspan="1" colspan="1"><a name="external-cmd" shape="rect" id="external-cmd"></a><a href="#external-cmd-note" shape="rect">external command</a></td><td rowspan="1" colspan="1">if (shell_cmd("ls -l /tmp"))<br /><span style="white-space: pre-wrap;">  </span>error("ls failed")<br />
endif</td><td rowspan="1" colspan="1">if (system("ls -l /tmp")) {<br /><span style="white-space: pre-wrap;">  </span>stop("ls failed")<br />
}</td><td rowspan="1" colspan="1">if os.system('ls -l /tmp'):<br /><span style="white-space: pre-wrap;">  </span>raise Exception('ls failed')</td></tr><tr><th colspan="4" rowspan="1"><a name="libraries-namespaces" shape="rect" id="libraries-namespaces"></a><a href="#libraries-namespaces-note" shape="rect">libraries and namespaces</a></th></tr><tr><th rowspan="1" colspan="1"></th><th rowspan="1" colspan="1"><a href="#matlab" shape="rect">matlab</a></th><th rowspan="1" colspan="1"><a href="#r" shape="rect">r</a></th><th rowspan="1" colspan="1"><a href="#numpy" shape="rect">numpy</a></th></tr><tr><td rowspan="1" colspan="1"><a name="load-lib" shape="rect" id="load-lib"></a><a href="#load-lib-note" shape="rect">load library</a></td><td rowspan="1" colspan="1"><span style="color: gray">% if installed as Octave package:</span><br />
pkg load foo</td><td rowspan="1" colspan="1">require("foo") <span style="color: gray"><em>or</em></span><br />
library("foo")</td><td rowspan="1" colspan="1">import foo</td></tr><tr><td rowspan="1" colspan="1"><a name="list-lib" shape="rect" id="list-lib"></a><a href="#list-lib-note" shape="rect">list loaded libraries</a></td><td rowspan="1" colspan="1"><span style="color: gray"><em>none</em></span></td><td rowspan="1" colspan="1">search()</td><td rowspan="1" colspan="1">dir()</td></tr><tr><td rowspan="1" colspan="1"><a name="lib-path" shape="rect" id="lib-path"></a><a href="#lib-path-note" shape="rect">library search path</a></td><td rowspan="1" colspan="1">path()<br />
addath('~/foo')<br />
rmpath('~/foo')</td><td rowspan="1" colspan="1">.libPaths()</td><td rowspan="1" colspan="1">sys.path</td></tr><tr><td rowspan="1" colspan="1"><a name="source-file" shape="rect" id="source-file"></a><a href="#source-file-note" shape="rect">source file</a><br /><span style="white-space: pre-wrap;"> </span></td><td rowspan="1" colspan="1">source('foo.m')</td><td rowspan="1" colspan="1">source("foo.r")</td><td rowspan="1" colspan="1"><span style="color: gray"><em>none</em></span></td></tr><tr><td rowspan="1" colspan="1"><a name="install-pkg" shape="rect" id="install-pkg"></a><a href="#install-pkg-note" shape="rect">install package</a></td><td rowspan="1" colspan="1"><span style="color: gray">% installs packages downloaded from<br />
% Octave-Forge in Octave:</span><br />
pkg install foo-1.0.0.tar.gz</td><td rowspan="1" colspan="1">install.packages("ggplot2")</td><td rowspan="1" colspan="1">$ pip install scipy</td></tr><tr><td rowspan="1" colspan="1"><a name="list-pkg" shape="rect" id="list-pkg"></a><a href="#list-pkg-note" shape="rect">list installed packages</a></td><td rowspan="1" colspan="1">pkg list</td><td rowspan="1" colspan="1">library()<br />
installed.packages()</td><td rowspan="1" colspan="1">$ pip freeze</td></tr><tr><th colspan="4" rowspan="1"><a name="reflection" shape="rect" id="reflection"></a><a href="#reflection-note" shape="rect">reflection</a></th></tr><tr><th rowspan="1" colspan="1"></th><th rowspan="1" colspan="1"><a href="#matlab" shape="rect">matlab</a></th><th rowspan="1" colspan="1"><a href="#r" shape="rect">r</a></th><th rowspan="1" colspan="1"><a href="#numpy" shape="rect">numpy</a></th></tr><tr><td rowspan="1" colspan="1"><a name="data-type" shape="rect" id="data-type"></a><a href="#data-type-note" shape="rect">data type</a></td><td rowspan="1" colspan="1">class(x)</td><td rowspan="1" colspan="1">class(x)<br /><span style="color: gray"># often more informative:</span><br />
str(x)</td><td rowspan="1" colspan="1">type(x)</td></tr><tr><td rowspan="1" colspan="1"><a name="attr" shape="rect" id="attr"></a><a href="#attr-note" shape="rect">attributes</a></td><td rowspan="1" colspan="1"><span style="color: gray"><em>if x is an object value:</em></span><br />
x</td><td rowspan="1" colspan="1">attributes(x)</td><td rowspan="1" colspan="1">[m for m in dir(x)<br /><span style="white-space: pre-wrap;">  </span>if not callable(getattr(o,m))]</td></tr><tr><td rowspan="1" colspan="1"><a name="methods" shape="rect" id="methods"></a><a href="#method-note" shape="rect">methods</a></td><td rowspan="1" colspan="1"><span style="color: gray"><em>note that most values are not objects:</em></span><br />
methods(x)</td><td rowspan="1" colspan="1"><span style="color: gray"><em>none; objects are implemented by functions which dispatch based on type of first arg</em></span></td><td rowspan="1" colspan="1">[m for m in dir(x)<br /><span style="white-space: pre-wrap;">  </span>if callable(getattr(o,m))]</td></tr><tr><td rowspan="1" colspan="1"><a name="var-in-scope" shape="rect" id="var-in-scope"></a><a href="#var-in-scope-note" shape="rect">variables in scope</a></td><td rowspan="1" colspan="1">who()<br /><br /><span style="color: gray">% with size and type:</span><br />
whos()</td><td rowspan="1" colspan="1">objects()<br />
ls()<br /><br /><span style="color: gray"># with type and description:</span><br />
ls.str()</td><td rowspan="1" colspan="1">dir()</td></tr><tr><td rowspan="1" colspan="1"><a name="undef-var" shape="rect" id="undef-var"></a><a href="#undef-var-note" shape="rect">undefine variable</a><br /><span style="white-space: pre-wrap;"> </span></td><td rowspan="1" colspan="1">clear('x')</td><td rowspan="1" colspan="1">rm(v)</td><td rowspan="1" colspan="1">del(x)</td></tr><tr><td rowspan="1" colspan="1"><a name="undef-all-var" shape="rect" id="undef-all-var"></a><a href="#undef-all-var-note" shape="rect">undefine all variables</a></td><td rowspan="1" colspan="1">clear -a</td><td rowspan="1" colspan="1">rm(list=objects())</td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="eval" shape="rect" id="eval"></a><a href="#eval-note" shape="rect">eval</a><br /><span style="white-space: pre-wrap;"> </span></td><td rowspan="1" colspan="1">eval('1+1')</td><td rowspan="1" colspan="1">eval(parse(text='1+1'))</td><td rowspan="1" colspan="1">eval('1+1')</td></tr><tr><td rowspan="1" colspan="1"><a name="func-doc" shape="rect" id="func-doc"></a><a href="#func-doc-note" shape="rect">function documentation</a></td><td rowspan="1" colspan="1">help tan</td><td rowspan="1" colspan="1">help(tan)<br />
?tan</td><td rowspan="1" colspan="1">math.tan.<span style="white-space: pre-wrap;">__doc__</span></td></tr><tr><td rowspan="1" colspan="1"><a name="ls-lib" shape="rect" id="ls-lib"></a><a href="#ls-lib-note" shape="rect">list library functions</a></td><td rowspan="1" colspan="1"><span style="color: gray"><em>none</em></span></td><td rowspan="1" colspan="1">ls("package:moments")</td><td rowspan="1" colspan="1">dir(stats)</td></tr><tr><td rowspan="1" colspan="1"><a name="grep-doc" shape="rect" id="grep-doc"></a><a href="#grep-doc-note" shape="rect">search documentation</a></td><td rowspan="1" colspan="1"><span style="color: gray"><em>not in Octave:</em></span><br />
docsearch tan</td><td rowspan="1" colspan="1">??tan</td><td rowspan="1" colspan="1">$ pydoc -k tan</td></tr><tr><th colspan="4" rowspan="1"><a name="data-frames" shape="rect" id="data-frames"></a><a href="#data-frames-note" shape="rect">data frames</a></th></tr><tr><th rowspan="1" colspan="1"></th><th rowspan="1" colspan="1"></th><th rowspan="1" colspan="1"><a href="#r" shape="rect">r</a></th><th rowspan="1" colspan="1"><a href="#numpy" shape="rect">numpy</a></th></tr><tr><td rowspan="1" colspan="1"><a name="construct-from-column-arrays" shape="rect" id="construct-from-column-arrays"></a><a href="#construct-from-column-arrays-note" shape="rect">construct from column arrays</a></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"><span style="color: gray"># gender, height, weight of some people<br />
# in inches and lbs:</span><br />
sx = c("F", "F", "F", "M", "M", "M")<br />
ht = c(69, 64, 67, 68, 72, 71)<br />
wt = c(148, 132, 142, 149, 167, 165)<br />
people = data.frame(sx, ht, wt)</td><td rowspan="1" colspan="1">sx = ['F', 'F', 'F', 'F', 'M', 'M']<br />
ht = [69, 64, 67, 66, 72, 70]<br />
wt = [150, 132, 142, 139, 167, 165]<br />
people = pd.DataFrame({'sx': sx, 'ht': ht, 'wt': wt})</td></tr><tr><td rowspan="1" colspan="1">size</td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1">nrow(people)<br />
ncol(people)<br /><br /><span style="color: gray"># number of rows and cols in 2-element vector:</span><br />
dim(people)</td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="column-names-as-array" shape="rect" id="column-names-as-array"></a><a href="#column-names-as-array-note" shape="rect">column names as array</a></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1">names(people)<br />
colnames(people)</td><td rowspan="1" colspan="1"><span style="color: gray"><em>returns</em> Index <em>object:</em></span><br />
people.columns</td></tr><tr><td rowspan="1" colspan="1"><a name="access-column-as-array" shape="rect" id="access-column-as-array"></a><a href="#access-column-as-array-note" shape="rect">access column as array</a></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"><span style="color: gray"><em>vectors:</em></span><br />
people$ht<br />
people[,2]<br />
people[['ht']]<br />
people[[2]]<br /><span style="color: gray"><em>1 column data frame:</em></span><br />
people[2]</td><td rowspan="1" colspan="1">people['ht']<br /><br /><span style="color: gray"><em>if name does not conflict with any</em> DataFrame <em>attributes:</em></span><br />
people.ht</td></tr><tr><td rowspan="1" colspan="1"><a name="access-row-as-tuple" shape="rect" id="access-row-as-tuple"></a><a href="#access-row-as-tuple-note" shape="rect">access row as tuple</a></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"><span style="color: gray"><em>1 row data frame:</em></span><br />
people[1, ]<br /><span style="color: gray"><em>list:</em></span><br />
as.list(people[1, ])</td><td rowspan="1" colspan="1">people.ix[0]</td></tr><tr><td rowspan="1" colspan="1"><a name="access-datum" shape="rect" id="access-datum"></a><a href="#access-datum-note" shape="rect">access datum</a></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"><span style="color: gray"><em>datum in 1st row, 2nd column:</em></span><br />
people[1,2]</td><td rowspan="1" colspan="1">people.get_value(0, 'ht')</td></tr><tr><td rowspan="1" colspan="1"><a name="order-rows-by-column" shape="rect" id="order-rows-by-column"></a><a href="#order-rows-by-column-note" shape="rect">order rows by column</a></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1">people[order(people$ht), ]</td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="order-rows-by-multiple-columns" shape="rect" id="order-rows-by-multiple-columns"></a><a href="#order-rows-by-multiple-columns-note" shape="rect">order rows by multiple columns</a></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1">people[order(sx, ht), ]</td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="order-rows-descending-order" shape="rect" id="order-rows-descending-order"></a><a href="#order-rows-descending-order-note" shape="rect">order rows in descending order</a></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1">people[order(-people$ht), ]</td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="limit-rows" shape="rect" id="limit-rows"></a><a href="#limit-rows-note" shape="rect">limit rows</a><br /><span style="white-space: pre-wrap;"> </span></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1">people[seq(1, 3), ]</td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="offset-rows" shape="rect" id="offset-rows"></a><a href="#offset-rows-note" shape="rect">offset rows</a><br /><span style="white-space: pre-wrap;"> </span></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1">people[seq(4, 6), ]</td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1">reshape</td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1">people$couple = c(1, 2, 3, 1, 2, 3)<br />
reshape(people, idvar="couple", direction="wide",<br /><span style="white-space: pre-wrap;">  </span>timevar="sx", v.names=c("ht", "wt"))</td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="attach-columns" shape="rect" id="attach-columns"></a><a href="#attach-columns-note" shape="rect">attach columns</a></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"><span style="color: gray"># put columns ht, wt, and sx<br />
# in variable name search path:</span><br />
attach(people)<br />
sum(ht)<br /><br /><span style="color: gray"># alternative which doesn't put columns in<br />
# search path:</span><br />
with(people, sum(ht))</td><td rowspan="1" colspan="1"><span style="color: gray"><em>none</em></span></td></tr><tr><td rowspan="1" colspan="1"><a name="detach-columns" shape="rect" id="detach-columns"></a><a href="#detach-columns-note" shape="rect">detach columns</a><br /><span style="white-space: pre-wrap;"> </span></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1">detach(people)</td><td rowspan="1" colspan="1"><span style="color: gray"><em>none</em></span></td></tr><tr><td rowspan="1" colspan="1"><a name="spreadsheet-editor" shape="rect" id="spreadsheet-editor"></a><a href="#spreadsheet-editor-note" shape="rect">spreadsheet editor</a></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"><span style="color: gray"><em>can edit data, in which case return value of</em> edit <em>must be saved</em></span><br />
people = edit(people)</td><td rowspan="1" colspan="1"><span style="color: gray"><em>none</em></span></td></tr><tr><th colspan="4" rowspan="1"><a name="import-export" shape="rect" id="import-export"></a><a href="#import-export-note" shape="rect">import and export</a></th></tr><tr><th rowspan="1" colspan="1"></th><th rowspan="1" colspan="1"></th><th rowspan="1" colspan="1"><a href="#r" shape="rect">r</a></th><th rowspan="1" colspan="1"><a href="#numpy" shape="rect">numpy</a></th></tr><tr><td rowspan="1" colspan="1"><a name="import-tab-delimited" shape="rect" id="import-tab-delimited"></a><a href="#import-tab-delimited-note" shape="rect">import tab delimited</a></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"><span style="color: gray"># first row defines variable names:</span><br />
df = read.delim('/path/to.tab')</td><td rowspan="1" colspan="1"><span style="color: gray"># first row defines column names:</span><br />
df = pd.read_table('/path/to.tab')</td></tr><tr><td rowspan="1" colspan="1"><a name="import-csv" shape="rect" id="import-csv"></a><a href="#import-csv-note" shape="rect">import csv</a><br /><span style="white-space: pre-wrap;"> </span></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"><span style="color: gray"># first row defines variable names:</span><br />
df = read.csv('/path/to.csv')</td><td rowspan="1" colspan="1"><span style="color: gray"># first row defines column names:</span><br />
df = pd.read_csv('/path/to.csv')</td></tr><tr><td rowspan="1" colspan="1"><a name="set-column-separator" shape="rect" id="set-column-separator"></a><a href="#set-column-separator-note" shape="rect">set column separator</a></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1">df = read.delim('/etc/passwd',<br /><span style="white-space: pre-wrap;">  </span>sep=':',<br /><span style="white-space: pre-wrap;">  </span>header=FALSE,<br /><span style="white-space: pre-wrap;">  </span>comment.char='#')</td><td rowspan="1" colspan="1"><span style="color: gray"># $ grep -v '^#' /etc/passwd &gt; /tmp/passwd</span><br /><br />
df = pd.read_table('/tmp/passwd', sep=':', header=None)</td></tr><tr><td rowspan="1" colspan="1"><a name="set-column-separator-whitesp" shape="rect" id="set-column-separator-whitesp"></a><a href="#set-column-separator-whitesp-note" shape="rect">set column separator to whitespace</a></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1">df = read.delim('/path/to.txt', sep='')</td><td rowspan="1" colspan="1">df = read_table('/path/to.txt', sep='\s+')</td></tr><tr><td rowspan="1" colspan="1"><a name="set-quote-char" shape="rect" id="set-quote-char"></a><a href="#set-quote-char-note" shape="rect">set quote character</a></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"><span style="color: gray"><em>default quote character for both</em> read.csv <em>and</em> read.delim <em>is double quotes. The quote character is escaped by doubling it.</em></span><br /><br /><span style="color: gray"># use single quote as quote character:</span><br />
df = read.csv('/path/to/single-quote.csv', quote="'")<br /><br /><span style="color: gray"># no quote character:</span><br />
df = read.csv('/path/to/no-quote.csv', quote="")</td><td rowspan="1" colspan="1"><span style="color: gray"><em>Both</em> read_table <em>and</em> read_csv <em>use double quotes as the quote character and there is no way to change it. A double quote can be escaped by doubling it.</em></span></td></tr><tr><td rowspan="1" colspan="1"><a name="import-file-without-header" shape="rect" id="import-file-without-header"></a><a href="#import-file-without-header-note" shape="rect">import file w/o header</a></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"><span style="color: gray"># column names are V1, V2, …</span><br />
read.delim('/etc/passwd',<br /><span style="white-space: pre-wrap;">  </span>sep=':',<br /><span style="white-space: pre-wrap;">  </span>header=FALSE,<br /><span style="white-space: pre-wrap;">  </span>comment.char='#')</td><td rowspan="1" colspan="1"><span style="color: gray"># $ grep -v '^#' /etc/passwd &gt; /tmp/passwd</span><br /><span style="color: gray">#</span><br /><span style="color: gray"># column names are X0, X1, …</span><br />
df = pd.read_table('/tmp/passwd', sep=':', header=None)</td></tr><tr><td rowspan="1" colspan="1"><a name="set-column-names" shape="rect" id="set-column-names"></a><a href="#set-column-names-note" shape="rect">set column names</a></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1">df = read.csv('/path/to/no-header.csv',<br /><span style="white-space: pre-wrap;">  </span>header=FALSE,<br /><span style="white-space: pre-wrap;">  </span>col.names=c('ht', 'wt', 'age'))</td><td rowspan="1" colspan="1">df = pd.read_csv('/path/to/no-header.csv',<br /><span style="white-space: pre-wrap;">  </span>names=['ht', 'wt', 'age'])</td></tr><tr><td rowspan="1" colspan="1"><a name="set-column-types" shape="rect" id="set-column-types"></a><a href="#set-column-types-note" shape="rect">set column types</a></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"><span style="color: gray"># possible values: NA, 'logical', 'integer', 'numeric',<br />
# 'complex', 'character', 'raw', 'factor', 'Date',<br />
# 'POSIXct'<br />
#<br />
# If type is set to NA, actual type will be inferred to be<br />
# 'logical', 'integer', 'numeric', 'complex', or 'factor'<br />
#</span><br />
df = read.csv('/path/to/data.csv',<br /><span style="white-space: pre-wrap;">  </span>colClasses=c('integer', 'numeric', 'character'))</td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="recognize-null-values" shape="rect" id="recognize-null-values"></a><a href="#recognize-null-values-note" shape="rect">recognize null values</a></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1">df = read.csv('/path/to/data.csv',<br /><span style="white-space: pre-wrap;">  </span>colClasses=c('integer', 'logical', 'character'),<br /><span style="white-space: pre-wrap;">  </span>na.strings=c('nil'))</td><td rowspan="1" colspan="1">df = read_csv('/path/to/data.csv',<br /><span style="white-space: pre-wrap;">  </span>na_values=['nil'])</td></tr><tr><td rowspan="1" colspan="1"><a name="change-decimal-mark" shape="rect" id="change-decimal-mark"></a><a href="#change-decimal-mark-note" shape="rect">change decimal mark</a></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1">df = read.csv('/path/to.csv', dec=',')</td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="recognize-thousands-separator" shape="rect" id="recognize-thousands-separator"></a><a href="#recognize-thousands-separator-note" shape="rect">recognize thousands separator</a></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"><span style="color: gray"><em>none</em></span></td><td rowspan="1" colspan="1">df = read_csv('/path/to.csv', thousands='.')</td></tr><tr><td rowspan="1" colspan="1"><a name="unequal-row-length-behavior" shape="rect" id="unequal-row-length-behavior"></a><a href="#unequal-row-length-behavior-note" shape="rect">unequal row length behavior</a></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"><span style="color: gray"><em>Missing fields will be set to NA unless</em> fill <em>is set to</em> FALSE. <em>If the column is of type character then the fill value is an empty string ''.<br /><br />
If there are extra fields they will be parsed as an extra row unless</em> flush <em>is set to</em> FALSE</span></td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="skip-comment-lines" shape="rect" id="skip-comment-lines"></a><a href="#skip-comment-lines-note" shape="rect">skip comment lines</a></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1">df = read.delim('/etc/passwd',<br /><span style="white-space: pre-wrap;">  </span>sep=':',<br /><span style="white-space: pre-wrap;">  </span>header=FALSE,<br /><span style="white-space: pre-wrap;">  </span>comment.char='#')</td><td rowspan="1" colspan="1"><span style="color: gray"><em>none</em></span></td></tr><tr><td rowspan="1" colspan="1"><a name="skip-rows" shape="rect" id="skip-rows"></a><a href="#skip-rows-note" shape="rect">skip rows</a></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1">df = read.csv('/path/to/data.csv', skip=4)</td><td rowspan="1" colspan="1">df = read_csv('/path/to/data.csv', skiprows=4)<br /><br /><span style="color: gray"># rows to skip can be specified individually:</span><br />
df = read_csv('/path/to/data.csv', skiprows=range(0, 4))</td></tr><tr><td rowspan="1" colspan="1"><a name="max-rows-to-read" shape="rect" id="max-rows-to-read"></a><a href="#max-rows-to-read-note" shape="rect">max rows to read</a></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1">df = read.csv('/path/to/data.csv', nrows=4)</td><td rowspan="1" colspan="1">df = read_csv('/path/to/data.csv', nrows=4)</td></tr><tr><td rowspan="1" colspan="1"><a name="index-column" shape="rect" id="index-column"></a><a href="#index-column-note" shape="rect">index column</a></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"><span style="color: gray"><em>none</em></span></td><td rowspan="1" colspan="1">df = pd.read_csv('/path/to.csv', index_col='key_col')<br /><br /><span style="color: gray"># hierarchical index:</span><br />
df = pd.read_csv('/path/to.csv', index_col=['col1', 'col2'])</td></tr><tr><td rowspan="1" colspan="1"><a name="export-tab-delimited" shape="rect" id="export-tab-delimited"></a><a href="#export-tab-delimited-note" shape="rect">export tab delimited</a></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1">write.table(df, '/tmp/data.tab', sep='\t')</td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="export-csv" shape="rect" id="export-csv"></a><a href="#export-csv-note" shape="rect">export csv</a><br /><span style="white-space: pre-wrap;"> </span></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"><span style="color: gray"># first column contains row names unless row.names<br />
# set to FALSE</span><br />
write.csv(df, '/path/to.csv', row.names=F)</td><td rowspan="1" colspan="1"></td></tr><tr><th colspan="4" rowspan="1"><a name="relational-algebra" shape="rect" id="relational-algebra"></a><a href="#relational-algebra-note" shape="rect">relational algebra</a></th></tr><tr><th rowspan="1" colspan="1"></th><th rowspan="1" colspan="1"><a href="#matlab" shape="rect">matlab</a></th><th rowspan="1" colspan="1"><a href="#r" shape="rect">r</a></th><th rowspan="1" colspan="1"><a href="#numpy" shape="rect">numpy</a></th></tr><tr><td rowspan="1" colspan="1">project columns by name</td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1">people[c('sx', 'ht')]</td><td rowspan="1" colspan="1">people[['sx', 'ht']]</td></tr><tr><td rowspan="1" colspan="1">project columns by position</td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1">people[c(1, 2)]</td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1">project expression</td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"><span style="color: gray"><em>convert to cm and kg:</em></span><br />
transform(people, ht=2.54*ht, wt=wt/2.2)</td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1">project all columns</td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1">people[people$ht &gt; 66, ]</td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1">rename columns</td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1">colnames(people) = c('gender', 'height', 'weight')</td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="access-sub-data-set" shape="rect" id="access-sub-data-set"></a><a href="#access-sub-data-set-note" shape="rect">access sub data frame</a></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"><span style="color: gray"><em>data frame of first 3 rows with</em><br />
ht <em>and</em> wt <em>columns reversed</em></span><br />
people[1:3,c(1,3,2)]</td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="data-set-filter" shape="rect" id="data-set-filter"></a><a href="#data-set-filter-note" shape="rect">select rows</a></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1">subset(people, ht &gt; 66)<br />
people[people$ht &gt; 66, ]</td><td rowspan="1" colspan="1">people[people['ht'] &gt; 66]</td></tr><tr><td rowspan="1" colspan="1">select distinct rows</td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1">unique(people$sx)</td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1">split rows</td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"><span style="color: gray">class(x) is list:</span><br />
x = split(people, people$sx == 'F')<br /><br /><span style="color: gray">data.frame only containing females:</span><br />
x$T</td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1">inner join</td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1">pw = read.delim('/etc/passwd',<br /><span style="white-space: pre-wrap;">  </span>sep=':',<br /><span style="white-space: pre-wrap;">  </span>header=F,<br /><span style="white-space: pre-wrap;">  </span>comment.char='#',<br /><span style="white-space: pre-wrap;">  </span>col.names=c('name', 'passwd', 'uid', 'gid', 'gecos',<br /><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span>'home', 'shell'))<br /><br />
grp = read.delim('/etc/group',<br /><span style="white-space: pre-wrap;">  </span>sep=':',<br /><span style="white-space: pre-wrap;">  </span>header=F,<br /><span style="white-space: pre-wrap;">  </span>comment.char='#',<br /><span style="white-space: pre-wrap;">  </span>col.names=c('name', 'passwd', 'gid', 'members'))<br /><br />
merge(pw, grp, by.x='gid', by.y='gid')</td><td rowspan="1" colspan="1"><span style="color: gray"># $ grep -v '^#' /etc/passwd &gt; /tmp/passwd<br />
# $ grep -v '^#' /etc/group &gt; /tmp/group</span><br /><br />
pw = pd.read_table('/tmp/passwd', sep=':', header=None, names=['name', 'passwd', 'uid', 'gid', 'gecos', 'home', 'shell'])<br /><br />
grp = pd.read_table('/tmp/group', sep=':', header=None, names=['name', 'passwd', 'gid', 'members'])<br /><br />
pd.merge(pw, grp, left_on='gid', right_on='gid')</td></tr><tr><td rowspan="1" colspan="1">nulls as join values</td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1">left join</td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1">merge(pw, grp, by.x='gid', by.y='gid', all.x=T)</td><td rowspan="1" colspan="1">pd.merge(pw, grp, left_on='gid', right_on='gid', how='left')</td></tr><tr><td rowspan="1" colspan="1">full join</td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1">merge(pw, grp, by.x='gid', by.y='gid', all=T)</td><td rowspan="1" colspan="1">pd.merge(pw, grp, left_on='gid', right_on='gid', how='outer')</td></tr><tr><td rowspan="1" colspan="1">antijoin</td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1">pw[!(pw$gid %in% grp$gid), ]</td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1">cross join</td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1">merge(pw, grp, by=c())</td><td rowspan="1" colspan="1"></td></tr><tr><th colspan="4" rowspan="1"><a name="aggregation" shape="rect" id="aggregation"></a><a href="#aggregation-note" shape="rect">aggregation</a></th></tr><tr><th rowspan="1" colspan="1"></th><th rowspan="1" colspan="1"><a href="#matlab" shape="rect">matlab</a></th><th rowspan="1" colspan="1"><a href="#r" shape="rect">r</a></th><th rowspan="1" colspan="1"><a href="#numpy" shape="rect">numpy</a></th></tr><tr><td rowspan="1" colspan="1">group by column</td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1">grouped = people.groupby('sx')<br />
grouped.aggregate(np.max)['ht']</td></tr><tr><td rowspan="1" colspan="1">multiple aggregated values</td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1">grouped = people.groupby('sx')<br />
grouped.aggregate(np.max)[['ht', 'wt']]</td></tr><tr><td rowspan="1" colspan="1">group by multiple columns</td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1">aggregation functions</td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1">nulls and aggregation functions</td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td></tr><tr><th colspan="4" rowspan="1"><a name="vectors" shape="rect" id="vectors"></a><a href="#vectors-note" shape="rect">vectors</a></th></tr><tr><th rowspan="1" colspan="1"></th><th rowspan="1" colspan="1"><a href="#matlab" shape="rect">matlab</a></th><th rowspan="1" colspan="1"><a href="#r" shape="rect">r</a></th><th rowspan="1" colspan="1"><a href="#numpy" shape="rect">numpy</a></th></tr><tr><td rowspan="1" colspan="1"><a href="#vector-literal" shape="rect">vector literal</a></td><td rowspan="1" colspan="1"><span style="color: gray"><em>same as array</em></span></td><td rowspan="1" colspan="1"><span style="color: gray"><em>same as array</em></span></td><td rowspan="1" colspan="1"><span style="color: gray"><em>same as array</em></span></td></tr><tr><td rowspan="1" colspan="1"><a href="#vector-element-wise" shape="rect">element-wise arithmetic operators</a></td><td rowspan="1" colspan="1">+ - .* ./</td><td rowspan="1" colspan="1">+ - * /</td><td rowspan="1" colspan="1">+ - * /</td></tr><tr><td rowspan="1" colspan="1"><a href="#vector-length-mismatch" shape="rect">result of vector length mismatch</a></td><td rowspan="1" colspan="1"><span style="color: gray"><em>raises error</em></span></td><td rowspan="1" colspan="1"><span style="color: gray"><em>values in shorter vector are recycled; warning if one vector is not a multiple length of the other</em></span></td><td rowspan="1" colspan="1"><span style="color: gray"><em>raises</em> ValueError</span></td></tr><tr><td rowspan="1" colspan="1"><a href="#vector-scalar" shape="rect">scalar multiplication</a></td><td rowspan="1" colspan="1">3 * [1, 2, 3]<br />
[1, 2, 3] * 3</td><td rowspan="1" colspan="1">3 * c(1, 2, 3)<br />
c(1, 2, 3) * 3</td><td rowspan="1" colspan="1">3 * np.array([1, 2, 3])<br />
np.array([1, 2, 3]) * 3</td></tr><tr><td rowspan="1" colspan="1"><a href="#vector-dot" shape="rect">dot product</a></td><td rowspan="1" colspan="1">dot([1, 1, 1], [2, 2, 2])</td><td rowspan="1" colspan="1">c(1, 1, 1) %*% c(2, 2, 2)</td><td rowspan="1" colspan="1">v1 = np.array([1, 1, 1])<br />
v2 = np.array([2, 2, 2])<br />
np.dot(v1, v2)</td></tr><tr><td rowspan="1" colspan="1"><a href="#vector-cross" shape="rect">cross product</a></td><td rowspan="1" colspan="1">cross([1, 0, 0], [0, 1, 0])</td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1">v1 = np.array([1, 0, 0])<br />
v2 = np.array([0, 1, 0])<br />
np.cross(v1, v2)</td></tr><tr><td rowspan="1" colspan="1"><a href="#vector-norms" shape="rect">norms</a></td><td rowspan="1" colspan="1">norm([1, 2, 3], 1)<br />
norm([1, 2, 3], 2)<br />
norm([1, 2, 3], Inf)</td><td rowspan="1" colspan="1">vnorm = function(x, t) {<br /><span style="white-space: pre-wrap;">  </span>norm(matrix(x, ncol=1), t)<br />
}<br /><br />
vnorm(c(1, 2, 3), "1")<br />
vnorm(c(1, 2, 3), "E")<br />
vnorm(c(1, 2, 3), "I")</td><td rowspan="1" colspan="1">v = np.array([1, 2, 3])<br />
np.linalg.norm(v, 1)<br />
np.linalg.norm(v, 2)<br />
np.linalg.norm(v, np.inf)</td></tr><tr><th colspan="4" rowspan="1"><a name="matrices" shape="rect" id="matrices"></a><a href="#matrices-note" shape="rect">matrices</a></th></tr><tr><th rowspan="1" colspan="1"></th><th rowspan="1" colspan="1"><a href="#matlab" shape="rect">matlab</a></th><th rowspan="1" colspan="1"><a href="#r" shape="rect">r</a></th><th rowspan="1" colspan="1"><a href="#numpy" shape="rect">numpy</a></th></tr><tr><td rowspan="1" colspan="1"><a name="matrix-literal-constructor" shape="rect" id="matrix-literal-constructor"></a><a href="#matrix-literal-constructor-note" shape="rect">literal or constructor</a></td><td rowspan="1" colspan="1"><span style="color: gray">% row-major order:</span><br />
A = [1, 2; 3, 4]<br />
B = [4 3<br /><span style="white-space: pre-wrap;">     </span>2 1]</td><td rowspan="1" colspan="1"><span style="color: gray"># column-major order:</span><br />
A = matrix(c(1, 3, 2, 4), 2, 2)<br />
B = matrix(c(4, 2, 3, 1), nrow=2)</td><td rowspan="1" colspan="1"><span style="color: gray"># row-major order:</span><br />
A = np.matrix([[1, 2], [3, 4]])<br />
B = np.matrix([[4, 3], [2, 1]])</td></tr><tr><td rowspan="1" colspan="1"><a name="constant-matrices" shape="rect" id="constant-matrices"></a><a href="#constant-matrices-note" shape="rect">constant matrices</a><br /><span style="color: gray"><em>all zeros, all ones</em></span></td><td rowspan="1" colspan="1">zeros(3, 3) <span style="color: gray"><em>or</em></span> zeros(3)<br />
ones(3, 3) <span style="color: gray"><em>or</em></span> ones(3)</td><td rowspan="1" colspan="1">matrix(0, 3, 3)<br />
matrix(1, 3, 3)</td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="diagonal-matrices" shape="rect" id="diagonal-matrices"></a><a href="#diagonal-matrices-note" shape="rect">diagonal matrices</a><br /><span style="color: gray"><em>and identity</em></span></td><td rowspan="1" colspan="1">diag([1, 2, 3])<br /><span style="color: gray">% 3x3 identity:</span><br />
eye(3)</td><td rowspan="1" colspan="1">diag(c(1, 2, 3)<br /><span style="color: gray"># 3x3 identity:</span><br />
diag(3)</td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="matrix-dim" shape="rect" id="matrix-dim"></a><a href="#matrix-dim-note" shape="rect">dimensions</a></td><td rowspan="1" colspan="1">rows(A)<br />
columns(A)</td><td rowspan="1" colspan="1">dim(A)[1]<br />
dim(A)[2]</td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a href="#matrix-access" shape="rect">element access</a></td><td rowspan="1" colspan="1">A(1, 1)</td><td rowspan="1" colspan="1">A[1, 1]</td><td rowspan="1" colspan="1">A[0, 0]</td></tr><tr><td rowspan="1" colspan="1"><a href="#matrix-row-access" shape="rect">row access</a></td><td rowspan="1" colspan="1">A(1, 1:2)</td><td rowspan="1" colspan="1">A[1, ]</td><td rowspan="1" colspan="1">A[0]</td></tr><tr><td rowspan="1" colspan="1"><a href="#matrix-column-access" shape="rect">column access</a></td><td rowspan="1" colspan="1">A(1:2, 1)</td><td rowspan="1" colspan="1">A[, 1]</td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a href="#submatrix-access" shape="rect">submatrix access</a></td><td rowspan="1" colspan="1">C = [1, 2, 3; 4, 5, 6; 7, 8, 9]<br />
C(1:2, 1:2)</td><td rowspan="1" colspan="1">C = matrix(seq(1, 9), 3, 3, byrow=T)<br />
C[1:2, 1:2]</td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a href="#matrix-scalar-multiplication" shape="rect">scalar multiplication</a></td><td rowspan="1" colspan="1">3 * A<br />
A * 3<br /><span style="color: gray"><em>also:</em></span><br />
3 .* A<br />
A .* 3</td><td rowspan="1" colspan="1">3 * A<br />
A * 3</td><td rowspan="1" colspan="1">3 * A<br />
A * 3</td></tr><tr><td rowspan="1" colspan="1"><a href="#matrix-element-wise-operators" shape="rect">element-wise operators</a></td><td rowspan="1" colspan="1">.+ .- .* ./</td><td rowspan="1" colspan="1">+ - * /</td><td rowspan="1" colspan="1">+ - np.multiply() np.divide()</td></tr><tr><td rowspan="1" colspan="1"><a href="#matrix-multiplication" shape="rect">multiplication</a></td><td rowspan="1" colspan="1">A * B</td><td rowspan="1" colspan="1">A %*% B</td><td rowspan="1" colspan="1">A * B</td></tr><tr><td rowspan="1" colspan="1"><a href="#matrix-power" shape="rect">power</a></td><td rowspan="1" colspan="1">A ^ 3<br /><br /><span style="color: gray">% power of each entry:</span><br />
A .^ 3</td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1">A ** 3</td></tr><tr><td rowspan="1" colspan="1"><a href="#kronecker-product" shape="rect">kronecker product</a></td><td rowspan="1" colspan="1">kron(A, B)</td><td rowspan="1" colspan="1">kronecker(A, B)</td><td rowspan="1" colspan="1">np.kron(A, B)</td></tr><tr><td rowspan="1" colspan="1"><a href="#matrix-comparison" shape="rect">comparison</a></td><td rowspan="1" colspan="1">all(all(A==B))<br />
any(any(A!=A))</td><td rowspan="1" colspan="1">all(A==B)<br />
any(A!=B)</td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a href="#matrix-norms" shape="rect">norms</a></td><td rowspan="1" colspan="1">norm(A, 1)<br />
norm(A, 2)<br />
norm(A, Inf)<br />
norm(A, 'fro')</td><td rowspan="1" colspan="1">norm(A, "1")<br /><span style="color: gray"><em>??</em></span><br />
norm(A, "I")<br />
norm(A, "F")</td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a href="#matrix-transpose" shape="rect">transpose</a></td><td rowspan="1" colspan="1">transpose(A)<br />
A'</td><td rowspan="1" colspan="1">t(A)</td><td rowspan="1" colspan="1">A.transpose()</td></tr><tr><td rowspan="1" colspan="1"><a href="#matrix-conjugate-transpose" shape="rect">conjugate transpose</a></td><td rowspan="1" colspan="1">A = [1i, 2i; 3i, 4i]<br />
A'</td><td rowspan="1" colspan="1">A = matrix(c(1i, 2i, 3i, 4i), nrow=2, byrow=T)<br />
Conj(t(A))</td><td rowspan="1" colspan="1">A = np.matrix([[1j, 2j], [3j, 4j]])<br />
A.conj().transpose()</td></tr><tr><td rowspan="1" colspan="1"><a href="#matrix-inverse" shape="rect">inverse</a></td><td rowspan="1" colspan="1">inv(A)</td><td rowspan="1" colspan="1">solve(A)</td><td rowspan="1" colspan="1">np.linalg.inv(A)</td></tr><tr><td rowspan="1" colspan="1"><a name="pseudoinverse" shape="rect" id="pseudoinverse"></a><a href="#pseudoinverse-note" shape="rect">pseudoinverse</a></td><td rowspan="1" colspan="1">A = [0 1; 0 0]<br /><br />
pinv(A)</td><td rowspan="1" colspan="1">install.packages('corpcor')<br />
library(corpcor)<br /><br />
A = matrix(c(0, 0, 1, 0), nrow=2)<br />
pseudoinverse(A)</td><td rowspan="1" colspan="1">A = np.matrix([[0, 1], [0, 0]])<br /><br />
np.linalg.pinv(A)</td></tr><tr><td rowspan="1" colspan="1"><a href="#matrix-determinant" shape="rect">determinant</a></td><td rowspan="1" colspan="1">det(A)</td><td rowspan="1" colspan="1">det(A)</td><td rowspan="1" colspan="1">np.linalg.det(A)</td></tr><tr><td rowspan="1" colspan="1"><a href="#matrix-trace" shape="rect">trace</a></td><td rowspan="1" colspan="1">trace(A)</td><td rowspan="1" colspan="1">sum(diag(A))</td><td rowspan="1" colspan="1">A.trace()</td></tr><tr><td rowspan="1" colspan="1"><a href="#matrix-eigenvalues" shape="rect">eigenvalues</a></td><td rowspan="1" colspan="1">eig(A)</td><td rowspan="1" colspan="1">eigen(A)$values</td><td rowspan="1" colspan="1">np.linalg.eigvals(A)</td></tr><tr><td rowspan="1" colspan="1"><a href="#matrix-eigenvectors" shape="rect">eigenvectors</a></td><td rowspan="1" colspan="1">[evec, eval] = eig(A)<br />
evec(1:2)<br />
evec(3:4)</td><td rowspan="1" colspan="1">eigen(A)$vectors</td><td rowspan="1" colspan="1">np.linalg.eig(A)[1]</td></tr><tr><td rowspan="1" colspan="1"><a name="svd" shape="rect" id="svd"></a><a href="#svd-note" shape="rect">singular value decomposition</a></td><td rowspan="1" colspan="1">X = randn(100)<br /><br />
[u, d, v] = svd(X)</td><td rowspan="1" colspan="1">X = matrix(rnorm(100), nrow=10)<br />
result = svd(X)<br /><br /><span style="color: gray"># singular values:</span><br />
result$d<br /><br /><span style="color: gray"># matrix of eigenvectors:</span><br />
result$u<br /><br /><span style="color: gray"># unitary matrix:</span><br />
result$v</td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a href="#matrix-solution" shape="rect">solve system of equations</a></td><td rowspan="1" colspan="1">A \ [2;3]</td><td rowspan="1" colspan="1">solve(A, c(2, 3))</td><td rowspan="1" colspan="1">np.linalg.solve(A, [2, 3])</td></tr><tr><td rowspan="1" colspan="1"><a name="sparse-matrix-construction" shape="rect" id="sparse-matrix-construction"></a><a href="#sparse-matrix-construction-note" shape="rect">sparse matrix construction</a></td><td rowspan="1" colspan="1"><span style="color: gray">% 100x100 matrix with 5 at (1, 1) and 4 at (2, 2):</span><br />
X = sparse([1 2], [1 2], [5 4], 100, 100)</td><td rowspan="1" colspan="1">X = spMatrix(100, 100, c(1, 2), c(1, 2), c(5, 4))</td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="sparse-matrix-decomposition" shape="rect" id="sparse-matrix-decomposition"></a><a href="#sparse-matrix-decomposition-note" shape="rect">sparse matrix decomposition</a></td><td rowspan="1" colspan="1">[rows, cols, vals] = find(X)<br /><br /><span style="color: gray">% just the values:</span><br />
nonzeros(X)</td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="sparse-identity-matrix" shape="rect" id="sparse-identity-matrix"></a><a href="#sparse-identity-matrix-note" shape="rect">sparse identity matrix</a></td><td rowspan="1" colspan="1"><span style="color: gray">% 100x100 identity:</span><br />
speye(100)</td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="dense-matrix-to-sparse-matrix" shape="rect" id="dense-matrix-to-sparse-matrix"></a><a href="#dense-matrix-to-sparse-matrix-note" shape="rect">dense matrix to sparse matrix</a><br /><span style="color: gray"><em>and back</em></span></td><td rowspan="1" colspan="1">X = sparse([1 0 0; 0 0 0; 0 0 0])<br />
X2 = full(X)</td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="sparse-matrix-storage" shape="rect" id="sparse-matrix-storage"></a><a href="#sparse-matrix-storage-note" shape="rect">sparse matrix storage</a></td><td rowspan="1" colspan="1"><span style="color: gray">% is storage sparse:</span><br />
issparse(X)<br /><br /><span style="color: gray">% memory allocation in bytes:</span><br />
nzmax(X)<br /><br /><span style="color: gray">% number of nonzero entries:</span><br />
nnz(X)</td><td rowspan="1" colspan="1"><span style="color: gray"># memory allocation in bytes:</span><br />
object.size(X)</td><td rowspan="1" colspan="1"></td></tr><tr><th colspan="4" rowspan="1"><a name="descriptive-statistics" shape="rect" id="descriptive-statistics"></a><a href="#descriptive-statistics-note" shape="rect">descriptive statistics</a></th></tr><tr><th rowspan="1" colspan="1"></th><th rowspan="1" colspan="1"><a href="#matlab" shape="rect">matlab</a></th><th rowspan="1" colspan="1"><a href="#r" shape="rect">r</a></th><th rowspan="1" colspan="1"><a href="#numpy" shape="rect">numpy</a></th></tr><tr><td rowspan="1" colspan="1"><a name="1st-moment-stats" shape="rect" id="1st-moment-stats"></a><a href="#1st-moment-stats-note" shape="rect">first moment statistics</a></td><td rowspan="1" colspan="1">x = [1 2 3 8 12 19]<br /><br />
sum(x)<br />
mean(x)</td><td rowspan="1" colspan="1">x = c(1,2,3,8,12,19)<br /><br />
sum(x)<br />
mean(x)</td><td rowspan="1" colspan="1">x = [1,2,3,8,12,19]<br /><br />
sp.sum(x)<br />
sp.mean(x)</td></tr><tr><td rowspan="1" colspan="1"><a name="2nd-moment-stats" shape="rect" id="2nd-moment-stats"></a><a href="#2nd-moment-stats-note" shape="rect">second moment statistics</a></td><td rowspan="1" colspan="1">std(x, 1)<br />
var(x, 1)</td><td rowspan="1" colspan="1">n = length(x)<br /><br />
sd(x) * sqrt((n-1)/n)<br />
var(x) * (n-1)/n</td><td rowspan="1" colspan="1">sp.std(x)<br />
sp.var(x)</td></tr><tr><td rowspan="1" colspan="1"><a name="2nd-moment-stats-sample" shape="rect" id="2nd-moment-stats-sample"></a><a href="#2nd-moment-stats-sample-note" shape="rect">second moment statistics for samples</a></td><td rowspan="1" colspan="1">std(x)<br />
var(x)</td><td rowspan="1" colspan="1">sd(x)<br />
var(x)</td><td rowspan="1" colspan="1">n = float(len(x))<br /><br />
sp.std(x) * math.sqrt(n/(n-1))<br />
sp.var(x) * n/(n-1)</td></tr><tr><td rowspan="1" colspan="1"><a name="skewness" shape="rect" id="skewness"></a><a href="#skewness-note" shape="rect">skewness</a></td><td rowspan="1" colspan="1"><span style="color: gray"><em>Octave uses sample standard deviation to compute skewness:</em></span><br />
skewness(x)</td><td rowspan="1" colspan="1">install.packages('moments')<br />
library('moments')<br /><br />
skewness(x)</td><td rowspan="1" colspan="1">stats.skew(x)</td></tr><tr><td rowspan="1" colspan="1"><a name="kurtosis" shape="rect" id="kurtosis"></a><a href="#kurtosis-note" shape="rect">kurtosis</a></td><td rowspan="1" colspan="1"><span style="color: gray"><em>Octave uses sample standard deviation to compute kurtosis:</em></span><br />
kurtosis(x)</td><td rowspan="1" colspan="1">install.packages('moments')<br />
library('moments')<br /><br />
kurtosis(x) - 3</td><td rowspan="1" colspan="1">stats.kurtosis(x)</td></tr><tr><td rowspan="1" colspan="1"><a name="nth-moment" shape="rect" id="nth-moment"></a><a href="#nth-moment-note" shape="rect">nth moment and nth central moment</a></td><td rowspan="1" colspan="1">n = 5<br /><br />
moment(x, n)<br />
moment(x, n, "c")</td><td rowspan="1" colspan="1">install.packages('moments')<br />
library('moments')<br /><br />
n = 5<br />
moment(x, n)<br />
moment(x, n, central=T)</td><td rowspan="1" colspan="1">n = 5<br /><br /><span style="color: gray"><em>??</em></span><br />
stats.moment(x, n)</td></tr><tr><td rowspan="1" colspan="1"><a name="mode" shape="rect" id="mode"></a><a href="#mode-note" shape="rect">mode</a></td><td rowspan="1" colspan="1">mode([1 2 2 2 3 3 4])</td><td rowspan="1" colspan="1">samp = c(1,2,2,2,3,3,4)<br />
names(sort(-table(samp)))[1]</td><td rowspan="1" colspan="1">stats.mode([1,2,2,2,3,3,4])[0][0]</td></tr><tr><td rowspan="1" colspan="1"><a name="quantile-stats" shape="rect" id="quantile-stats"></a><a href="#quantile-stats-note" shape="rect">quantile statistics</a></td><td rowspan="1" colspan="1">min(x)<br />
median(x)<br />
max(x)<br /><span style="color: gray"><em>?</em></span></td><td rowspan="1" colspan="1">min(x)<br />
median(x)<br />
max(x)<br />
quantile(x, prob=.90)</td><td rowspan="1" colspan="1">min(x)<br />
sp.median(x)<br />
max(x)<br />
stats.scoreatpercentile(x, 90.0)</td></tr><tr><td rowspan="1" colspan="1"><a name="bivariate-stats" shape="rect" id="bivariate-stats"></a><a href="#bivariate-stats-note" shape="rect">bivariate statistiscs</a><br /><span style="color: gray"><em>correlation, covariance</em></span></td><td rowspan="1" colspan="1">x = [1 2 3]<br />
y = [2 4 7]<br /><br />
cor(x, y)<br />
cov(x, y)</td><td rowspan="1" colspan="1">x = c(1,2,3)<br />
y = c(2,4,7)<br /><br />
cor(x, y)<br />
cov(x, y)</td><td rowspan="1" colspan="1">x = [1,2,3]<br />
y = [2,4,7]<br /><br />
stats.linregress(x, y)[2]<br /><span style="color: gray"><em>??</em></span></td></tr><tr><td rowspan="1" colspan="1"><a name="correlation-matrix" shape="rect" id="correlation-matrix"></a><a href="#correlation-matrix-note" shape="rect">correlation matrix</a></td><td rowspan="1" colspan="1">x1 = randn(100, 1)<br />
x2 = 0.5 * x1 + randn(100, 1)<br />
x3 = 0.1 * x1 + 0.1 * x2 + 0.1 * randn(100, 1)<br /><br />
corr([x1 x2 x3])</td><td rowspan="1" colspan="1">x1 = rnorm(100)<br />
x2 = x1 + 0.5 * rnorm(100)<br />
x3 = 0.3 * x1 + 0.1 * 2 + 0.1 * rnorm(100)<br /><br />
cor(cbind(x1, x2, x3))</td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="freq-table" shape="rect" id="freq-table"></a><a href="#freq-table-note" shape="rect">frequency table</a></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1">x = c(1,2,1,1,2,5,1,2,7)<br />
tab = table(x)</td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="invert-freq-table" shape="rect" id="invert-freq-table"></a><a href="#invert-freq-table-note" shape="rect">invert frequency table</a></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1">rep(as.integer(names(tab)),<br /><span style="white-space: pre-wrap;">  </span>unname(tab))</td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="bin" shape="rect" id="bin"></a><a href="#bin-note" shape="rect">bin</a></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1">x = c(1.1, 3.7, 8.9, 1.2, 1.9, 4.1)<br />
xf = cut(x, breaks=c(0, 3, 6, 9))<br />
bins = tapply(x, xf, length)</td><td rowspan="1" colspan="1"></td></tr><tr><th colspan="4" rowspan="1"><a name="distributions" shape="rect" id="distributions"></a><a href="#distribution-note" shape="rect">distributions</a></th></tr><tr><th rowspan="1" colspan="1"></th><th rowspan="1" colspan="1"><a href="#matlab" shape="rect">matlab</a></th><th rowspan="1" colspan="1"><a href="#r" shape="rect">r</a></th><th rowspan="1" colspan="1"><a href="#numpy" shape="rect">numpy</a></th></tr><tr><td rowspan="1" colspan="1"><a name="binomial" shape="rect" id="binomial"></a><a href="#binomial-note" shape="rect">binomial</a><br /><span style="color: gray"><em>density, cumulative, quantile,<br />
sample of 10</em></span></td><td rowspan="1" colspan="1">binopdf(x, <span style="color: gray"><em>n</em></span>, <span style="color: gray"><em>p</em></span>)<br />
binocdf(x, <span style="color: gray"><em>n</em></span>, <span style="color: gray"><em>p</em></span>)<br />
binoinv(y, <span style="color: gray"><em>n</em></span>, <span style="color: gray"><em>p</em></span>)<br />
binornd(<span style="color: gray"><em>n</em></span>, <span style="color: gray"><em>p</em></span>, 1, 10)</td><td rowspan="1" colspan="1">dbinom(x, <span style="color: gray"><em>n</em></span>, <span style="color: gray"><em>p</em></span>)<br />
pbinom(x, <span style="color: gray"><em>n</em></span>, <span style="color: gray"><em>p</em></span>)<br />
qbinom(y, <span style="color: gray"><em>n</em></span>, <span style="color: gray"><em>p</em></span>)<br />
rbinom(10, <span style="color: gray"><em>n</em></span>, <span style="color: gray"><em>p</em></span>)</td><td rowspan="1" colspan="1">stats.binom.pmf(x, <span style="color: gray"><em>n</em></span>, <span style="color: gray"><em>p</em></span>)<br />
stats.binom.cdf(x, <span style="color: gray"><em>n</em></span>, <span style="color: gray"><em>p</em></span>)<br />
stats.binom.ppf(y, <span style="color: gray"><em>n</em></span>, <span style="color: gray"><em>p</em></span>)<br />
stats.binom.rvs(<span style="color: gray"><em>n</em></span>, <span style="color: gray"><em>p</em></span>)</td></tr><tr><td rowspan="1" colspan="1"><a name="poisson" shape="rect" id="poisson"></a><a href="#poisson-note" shape="rect">poisson</a><br /><span style="color: gray"><em>density, cumulative, quantile,<br />
sample of 10</em></span></td><td rowspan="1" colspan="1">poisspdf(x, <span style="color: gray"><em>lambda</em></span>)<br />
poisscdf(x, <span style="color: gray"><em>lambda</em></span>)<br />
poissinv(y, <span style="color: gray"><em>lambda</em></span>)<br />
poissrnd(<span style="color: gray"><em>lambda</em></span>, 1, 10)</td><td rowspan="1" colspan="1">dpois(x, <span style="color: gray"><em>lambda</em></span>)<br />
ppois(x, <span style="color: gray"><em>lambda</em></span>)<br />
qpois(y, <span style="color: gray"><em>lambda</em></span>)<br />
rpois(10, <span style="color: gray"><em>lambda</em></span>)</td><td rowspan="1" colspan="1">stats.poisson.pmf(x, <span style="color: gray"><em>lambda</em></span>)<br />
stats.poisson.cdf(x, <span style="color: gray"><em>lambda</em></span>)<br />
stats.poisson.ppf(y, <span style="color: gray"><em>lambda</em></span>)<br />
stats.poisson.rvs(<span style="color: gray"><em>lambda</em></span>, size=1)</td></tr><tr><td rowspan="1" colspan="1"><a name="normal" shape="rect" id="normal"></a><a href="#normal-note" shape="rect">normal</a><br /><span style="color: gray"><em>density, cumulative, quantile,<br />
sample of 10</em></span></td><td rowspan="1" colspan="1">normpdf(x, <span style="color: gray"><em>mu</em></span>, <span style="color: gray"><em>sigma</em></span>)<br />
normcdf(x, <span style="color: gray"><em>mu</em></span>, <span style="color: gray"><em>sigma</em></span>)<br />
norminv(y, <span style="color: gray"><em>mu</em></span>, <span style="color: gray"><em>sigma</em></span>)<br />
normrnd(<span style="color: gray"><em>mu</em></span>, <span style="color: gray"><em>sigma</em></span>, 1, 10)</td><td rowspan="1" colspan="1">dnorm(x, <span style="color: gray"><em>mu</em></span>, <span style="color: gray"><em>sigma</em></span>)<br />
pnorm(x, <span style="color: gray"><em>mu</em></span>, <span style="color: gray"><em>sigma</em></span>)<br />
qnorm(y, <span style="color: gray"><em>mu</em></span>, <span style="color: gray"><em>sigma</em></span>)<br />
rnorm(10, <span style="color: gray"><em>mu</em></span>, <span style="color: gray"><em>sigma</em></span>)</td><td rowspan="1" colspan="1">stats.norm.pdf(x, <span style="color: gray"><em>mu</em></span>, <span style="color: gray"><em>sigma</em></span>)<br />
stats.norm.cdf(x, <span style="color: gray"><em>mu</em></span>, <span style="color: gray"><em>sigma</em></span>)<br />
stats.norm.ppf(y, <span style="color: gray"><em>mu</em></span>, <span style="color: gray"><em>sigma</em></span>)<br />
stats.norm.rvs(<span style="color: gray"><em>mu</em></span>, <span style="color: gray"><em>sigma</em></span>)</td></tr><tr><td rowspan="1" colspan="1"><a name="gamma" shape="rect" id="gamma"></a><a href="#gamma-note" shape="rect">gamma</a><br /><span style="color: gray"><em>density, cumulative, quantile,<br />
sample of 10</em></span></td><td rowspan="1" colspan="1">gampdf(x, <span style="color: gray"><em>k</em></span>, <span style="color: gray"><em>theta</em></span>)<br />
gamcdf(x, <span style="color: gray"><em>k</em></span>, <span style="color: gray"><em>theta</em></span>)<br />
gaminv(y, <span style="color: gray"><em>k</em></span>, <span style="color: gray"><em>theta</em></span>)<br />
gamrnd(<span style="color: gray"><em>k</em></span>, <span style="color: gray"><em>theta</em></span>, 1, 10)</td><td rowspan="1" colspan="1">dgamma(x, <span style="color: gray"><em>k</em></span>, scale=<span style="color: gray"><em>theta</em></span>)<br />
pgamma(x, <span style="color: gray"><em>k</em></span>, scale=<span style="color: gray"><em>theta</em></span>)<br />
qgamma(y, <span style="color: gray"><em>k</em></span>, scale=<span style="color: gray"><em>theta</em></span>)<br />
rgamma(10, <span style="color: gray"><em>k</em></span>, scale=<span style="color: gray"><em>theta</em></span>)</td><td rowspan="1" colspan="1">stats.gamma.pdf(x, <span style="color: gray"><em>k</em></span>, scale=<span style="color: gray"><em>theta</em></span>)<br />
stats.gamma.cdf(x, <span style="color: gray"><em>k</em></span>, scale=<span style="color: gray"><em>theta</em></span>)<br />
stats.gamma.ppf(y, <span style="color: gray"><em>k</em></span>, scale=<span style="color: gray"><em>theta</em></span>)<br />
stats.gamma.rvs(<span style="color: gray"><em>k</em></span>, scale=<span style="color: gray"><em>theta</em></span>)</td></tr><tr><td rowspan="1" colspan="1"><a name="exponential" shape="rect" id="exponential"></a><a href="#exponential-note" shape="rect">exponential</a><br /><span style="color: gray"><em>density, cumulative, quantile,<br />
sample of 10</em></span></td><td rowspan="1" colspan="1">exppdf(x, <span style="color: gray"><em>lambda</em></span>)<br />
expcdf(x, <span style="color: gray"><em>lambda</em></span>)<br />
expinv(y, <span style="color: gray"><em>lambda</em></span>)<br />
exprnd(<span style="color: gray"><em>lambda</em></span>, 1, 10)</td><td rowspan="1" colspan="1">dexp(x, <span style="color: gray"><em>lambda</em></span>)<br />
pexp(x, <span style="color: gray"><em>lambda</em></span>)<br />
qexp(y, <span style="color: gray"><em>lambda</em></span>)<br />
rexp(10, <span style="color: gray"><em>lambda</em></span>)</td><td rowspan="1" colspan="1">stats.expon.pdf(x, scale=1.0/<span style="color: gray"><em>lambda</em></span>)<br />
stats.expon.cdf(x, scale=1.0/<span style="color: gray"><em>lambda</em></span>)<br />
stats.expon.ppf(x, scale=1.0/<span style="color: gray"><em>lambda</em></span>)<br />
stats.expon.rvs(scale=1.0/<span style="color: gray"><em>lambda</em></span>)</td></tr><tr><td rowspan="1" colspan="1"><a name="chi-squared" shape="rect" id="chi-squared"></a><a href="#chi-squared-note" shape="rect">chi-squared</a><br /><span style="color: gray"><em>density, cumulative, quantile,<br />
sample of 10</em></span></td><td rowspan="1" colspan="1">chi2pdf(x, <span style="color: gray"><em>nu</em></span>)<br />
chi2cdf(x, <span style="color: gray"><em>nu</em></span>)<br />
chi2inv(y, <span style="color: gray"><em>nu</em></span>)<br />
chi2rnd(<span style="color: gray"><em>nu</em></span>, 1, 10)</td><td rowspan="1" colspan="1">dchisq(x, <span style="color: gray"><em>nu</em></span>)<br />
pchisq(x, <span style="color: gray"><em>nu</em></span>)<br />
qchisq(y, <span style="color: gray"><em>nu</em></span>)<br />
rchisq(10, <span style="color: gray"><em>nu</em></span>)</td><td rowspan="1" colspan="1">stats.chi2.pdf(x, <span style="color: gray"><em>nu</em></span>)<br />
stats.chi2.cdf(x, <span style="color: gray"><em>nu</em></span>)<br />
stats.chi2.ppf(y, <span style="color: gray"><em>nu</em></span>)<br />
stats.chi2.rvs(<span style="color: gray"><em>nu</em></span>)</td></tr><tr><td rowspan="1" colspan="1"><a name="beta" shape="rect" id="beta"></a><a href="#beta-note" shape="rect">beta</a><br /><span style="color: gray"><em>density, cumulative, quantile,<br />
sample of 10</em></span></td><td rowspan="1" colspan="1">betapdf(x, <span style="color: gray"><em>alpha</em></span>, <span style="color: gray"><em>beta</em></span>)<br />
betacdf(x, <span style="color: gray"><em>alpha</em></span>, <span style="color: gray"><em>beta</em></span>)<br />
betainvf(y, <span style="color: gray"><em>alpha</em></span>, <span style="color: gray"><em>beta</em></span>)<br />
betarnd(<span style="color: gray"><em>alpha</em></span>, <span style="color: gray"><em>beta</em></span>, 1, 10)</td><td rowspan="1" colspan="1">dbeta(x, <span style="color: gray"><em>alpha</em></span>, <span style="color: gray"><em>beta</em></span>)<br />
pbeta(x, <span style="color: gray"><em>alpha</em></span>, <span style="color: gray"><em>beta</em></span>)<br />
qbeta(y, <span style="color: gray"><em>alpha</em></span>, <span style="color: gray"><em>beta</em></span>)<br />
rbeta(10, <span style="color: gray"><em>alpha</em></span>, <span style="color: gray"><em>beta</em></span>)</td><td rowspan="1" colspan="1">stats.beta.pdf(x, <span style="color: gray"><em>alpha</em></span>, <span style="color: gray"><em>beta</em></span>)<br />
stats.beta.cdf(x, <span style="color: gray"><em>alpha</em></span>, <span style="color: gray"><em>beta</em></span>)<br />
stats.beta.ppf(y, <span style="color: gray"><em>alpha</em></span>, <span style="color: gray"><em>beta</em></span>)<br />
stats.beta.pvs(<span style="color: gray"><em>alpha</em></span>, <span style="color: gray"><em>beta</em></span>)</td></tr><tr><td rowspan="1" colspan="1"><a name="uniform" shape="rect" id="uniform"></a><a href="#uniform-note" shape="rect">uniform</a><br /><span style="color: gray"><em>density, cumulative, quantile,<br />
sample of 10</em></span></td><td rowspan="1" colspan="1">unifpdf(x, <span style="color: gray"><em>a</em></span>, <span style="color: gray"><em>b</em></span>)<br />
unifcdf(x, <span style="color: gray"><em>a</em></span>, <span style="color: gray"><em>b</em></span>)<br />
unifinv(y, <span style="color: gray"><em>a</em></span>, <span style="color: gray"><em>b</em></span>)<br />
unifrnd(<span style="color: gray"><em>a</em></span>, <span style="color: gray"><em>b</em></span>, 1, 10)</td><td rowspan="1" colspan="1">dunif(x, <span style="color: gray"><em>a</em></span>, <span style="color: gray"><em>b</em></span>)<br />
punif(x, <span style="color: gray"><em>a</em></span>, <span style="color: gray"><em>b</em></span>)<br />
qunif(y, <span style="color: gray"><em>a</em></span>, <span style="color: gray"><em>b</em></span>)<br />
runif(10, <span style="color: gray"><em>a</em></span>, <span style="color: gray"><em>b</em></span>)</td><td rowspan="1" colspan="1">stats.uniform.pdf(x, <span style="color: gray"><em>a</em></span>, <span style="color: gray"><em>b</em></span>)<br />
stats.uniform.cdf(x, <span style="color: gray"><em>a</em></span>, <span style="color: gray"><em>b</em></span>)<br />
stats.uniform.ppf(y, <span style="color: gray"><em>a</em></span>, <span style="color: gray"><em>b</em></span>)<br />
stats.unifrom.rvs(<span style="color: gray"><em>a</em></span>, <span style="color: gray"><em>b</em></span>)</td></tr><tr><td rowspan="1" colspan="1"><a name="students-t" shape="rect" id="students-t"></a><a href="#students-t-note" shape="rect">Student's t</a><br /><span style="color: gray"><em>density, cumulative, quantile,<br />
sample of 10</em></span></td><td rowspan="1" colspan="1">tpdf(x, <span style="color: gray"><em>nu</em></span>)<br />
tcdf(x, <span style="color: gray"><em>nu</em></span>)<br />
tinv(y, <span style="color: gray"><em>nu</em></span>)<br />
trnd(<span style="color: gray"><em>nu</em></span>, 1, 10)</td><td rowspan="1" colspan="1">dt(x, <span style="color: gray"><em>nu</em></span>)<br />
pt(x, <span style="color: gray"><em>nu</em></span>)<br />
qt(y, <span style="color: gray"><em>nu</em></span>)<br />
rt(10, <span style="color: gray"><em>nu</em></span>)</td><td rowspan="1" colspan="1">stats.t.pdf(x, <span style="color: gray"><em>nu</em></span>)<br />
stats.t.cdf(x, <span style="color: gray"><em>nu</em></span>)<br />
stats.t.ppf(y, <span style="color: gray"><em>nu</em></span>)<br />
stats.t.rvs(<span style="color: gray"><em>nu</em></span>)</td></tr><tr><td rowspan="1" colspan="1"><a name="snedecors-f" shape="rect" id="snedecors-f"></a><a href="#snedecors-f-note" shape="rect">Snedecor's F</a><br /><span style="color: gray"><em>density, cumulative, quantile,<br />
sample of 10</em></span></td><td rowspan="1" colspan="1">fpdf(x, <span style="color: gray"><em>d1</em></span>, <span style="color: gray"><em>d2</em></span>)<br />
fcdf(x, <span style="color: gray"><em>d1</em></span>, <span style="color: gray"><em>d2</em></span>)<br />
finv(y, <span style="color: gray"><em>d1</em></span>, <span style="color: gray"><em>d2</em></span>)<br />
frnd(<span style="color: gray"><em>d1</em></span>, <span style="color: gray"><em>d2</em></span>, 1, 10)</td><td rowspan="1" colspan="1">df(x, <span style="color: gray"><em>d1</em></span>, <span style="color: gray"><em>d2</em></span>)<br />
pf(x, <span style="color: gray"><em>d1</em></span>, <span style="color: gray"><em>d2</em></span>)<br />
qf(y, <span style="color: gray"><em>d1</em></span>, <span style="color: gray"><em>d2</em></span>)<br />
rf(10, <span style="color: gray"><em>d1</em></span>, <span style="color: gray"><em>d2</em></span>)</td><td rowspan="1" colspan="1">stats.f.pdf(x, <span style="color: gray"><em>d1</em></span>, <span style="color: gray"><em>d2</em></span>)<br />
stats.f.cdf(x, <span style="color: gray"><em>d1</em></span>, <span style="color: gray"><em>d2</em></span>)<br />
stats.f.ppf(y, <span style="color: gray"><em>d1</em></span>, <span style="color: gray"><em>d2</em></span>)<br />
stats.f.rvs(<span style="color: gray"><em>d1</em></span>, <span style="color: gray"><em>d2</em></span>)</td></tr><tr><td rowspan="1" colspan="1"><a name="empirical-density-func" shape="rect" id="empirical-density-func"></a><a href="#empirical-density-func-note" shape="rect">empirical density function</a></td><td rowspan="1" colspan="1"><span style="color: gray">% $ apt-get install octave-econometrics</span><br /><br />
x = (-3:.05:3)'<br />
y = kernel_density(x, normrnd(0, 1, 100, 1))</td><td rowspan="1" colspan="1">dfunc = density(rnorm(100))<br /><br />
dfunc$x<br />
dfunc$y</td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="empirical-cumulative-distribution" shape="rect" id="empirical-cumulative-distribution"></a><a href="#empirical-cumulative-distribution-note" shape="rect">empirical cumulative distribution</a></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"><span style="color: gray"><em>F is a right-continuous step function:</em></span><br />
F = ecdf(rnorm(100))</td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="empirical-quantile-func" shape="rect" id="empirical-quantile-func"></a><a href="#empirical-quantile-func-note" shape="rect">empirical quantile function</a></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1">F = ecdf(rnorm(100))<br />
Finv = ecdf(F(seq(0, 1, .01)))</td><td rowspan="1" colspan="1"></td></tr><tr><th colspan="4" rowspan="1"><a name="linear-models" shape="rect" id="linear-models"></a><a href="#linear-models-note" shape="rect">linear models</a></th></tr><tr><th rowspan="1" colspan="1"></th><th rowspan="1" colspan="1"><a href="#matlab" shape="rect">matlab</a></th><th rowspan="1" colspan="1"><a href="#r" shape="rect">r</a></th><th rowspan="1" colspan="1"><a href="#numpy" shape="rect">numpy</a></th></tr><tr><td rowspan="1" colspan="1"><a name="simple-linear-regression" shape="rect" id="simple-linear-regression"></a><a href="#simple-linear-regression-note" shape="rect">simple linear regression</a><br /><span style="color: gray"><em>coefficient, intercept, and residuals</em></span></td><td rowspan="1" colspan="1">x = [1 2 3]<br />
y = [2 4 7]<br /><br />
[lsq, res] = polyfit(x, y, 1)<br />
a = lsq(1)<br />
b = lsq(2)<br />
y - (a*x+b)</td><td rowspan="1" colspan="1">x = seq(10)<br />
y = 2 * x + 1 + rnorm(10)<br /><br />
fit = lm(y ~ x)<br />
summary(fit)<br /><br /><span style="color: gray"># yhat = ax + b:</span><br />
a = fit$coefficients[2]<br />
b = fit$coefficients[1]<br /><br /><span style="color: gray"># y - (ax + b):</span><br />
fit$residuals</td><td rowspan="1" colspan="1">x = np.array([1,2,3])<br />
y = np.array([2,4,7])<br /><br />
lsq = stats.linregress(x, y)<br />
a = lsq[0]<br />
b = lsq[1]<br />
y - (a*x+b)</td></tr><tr><td rowspan="1" colspan="1"><a name="linear-regression-no-intercept" shape="rect" id="linear-regression-no-intercept"></a><a href="#linear-regression-no-intercept-note" shape="rect">no intercept</a></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1">x = seq(10)<br />
y = 2 * x + 1 + rnorm(10)<br /><br />
fit = lm(y ~ x + 0)<br />
summary(fit)<br /><br /><span style="color: gray"># y = ax:</span><br />
a = fit$coefficients[1]</td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="multiple-linear-regression" shape="rect" id="multiple-linear-regression"></a><a href="#multiple-linear-regression-note" shape="rect">multiple linear regression</a></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1">x1 = rnorm(100)<br />
x2 = rnorm(100)<br />
y = 2 * x2 + rnorm(100)<br /><br />
fit = lm(y ~ x1 + x2)<br />
summary(fit)</td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="polynomial-regression" shape="rect" id="polynomial-regression"></a><a href="#polynomial-regression-note" shape="rect">polynomial regression</a></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1">x1 = rnorm(100)<br />
x2 = rnorm(100)<br />
y = 2 * x1 + x2 + 3 * x1 * x2 + rnorm(100)<br /><br /><span style="color: gray"># x1, x2, and x1*x2 as predictors:</span><br />
fit = lm(y ~ x1 * x2)<br />
summary(fit)<br /><br /><span style="color: gray"># just x1*x2 as predictor:</span><br />
fit2 = lm(Y ~ x1:x2)</td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="logistic-regression" shape="rect" id="logistic-regression"></a><a href="#logistic-regression-note" shape="rect">logistic regression</a></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1">y = round(runif(100))<br />
x1 = round(runif(100))<br />
x2 = y + rnorm(100)<br /><br />
fit = glm(y ~ x1 + x2, family="binomial")<br />
summary(fit)</td><td rowspan="1" colspan="1"></td></tr><tr><th colspan="4" rowspan="1"><a name="polynomial-interpolation" shape="rect" id="polynomial-interpolation"></a><a href="#polynomial-interpolation-note" shape="rect">polynomial interpolation</a></th></tr><tr><th rowspan="1" colspan="1"></th><th rowspan="1" colspan="1"><a href="#matlab" shape="rect">matlab</a></th><th rowspan="1" colspan="1"><a href="#r" shape="rect">r</a></th><th rowspan="1" colspan="1"><a href="#numpy" shape="rect">numpy</a></th></tr><tr><th colspan="4" rowspan="1"><a name="statistical-tests" shape="rect" id="statistical-tests"></a><a href="#statistical-tests-note" shape="rect">statistical tests</a></th></tr><tr><th rowspan="1" colspan="1"></th><th rowspan="1" colspan="1"><a href="#matlab" shape="rect">matlab</a></th><th rowspan="1" colspan="1"><a href="#r" shape="rect">r</a></th><th rowspan="1" colspan="1"><a href="#numpy" shape="rect">numpy</a></th></tr><tr><td rowspan="1" colspan="1"><a name="wilcoxon" shape="rect" id="wilcoxon"></a><a href="#wilcoxon-note" shape="rect">wilcoxon signed-rank test</a><br /><span style="color: gray"><em>variable is symmetric around zero</em></span></td><td rowspan="1" colspan="1">x = unifrnd(-0.5, 0.5, 100, 1)<br /><br /><span style="color: gray">% null hypothesis is true:</span><br />
wilcoxon_test(x, zeros(100, 1))<br /><br /><span style="color: gray">% alternative hypothesis is true:</span><br />
wilcoxon_test(x + 1.0, zeros(100, 1))</td><td rowspan="1" colspan="1"><span style="color: gray"># null hypothesis is true:</span><br />
wilcox.test(runif(100) - 0.5)<br /><br /><span style="color: gray">alternative hypothesis is true:</span><br />
wilcox.test(runif(100) + 0.5)</td><td rowspan="1" colspan="1">stats.wilcoxon()</td></tr><tr><td rowspan="1" colspan="1"><a name="kruskal" shape="rect" id="kruskal"></a><a href="#kruskal-note" shape="rect">kruskal-wallis rank sum test</a><br /><span style="color: gray"><em>variables have same location parameter</em></span></td><td rowspan="1" colspan="1">x = unifrnd(0, 1, 200, 1)<br /><br /><span style="color: gray">% null hypothesis is true:</span><br />
kruskal_wallis_test(randn(100, 1), randn(200, 1))<br /><br /><span style="color: gray">% alternative hypothesis is true:</span><br />
kruskal_wallis_test(randn(100, 1), x)</td><td rowspan="1" colspan="1"><span style="color: gray"># null hypothesis is true:</span><br />
kruskal.test(list(rnorm(100), rnorm(200)))<br /><br /><span style="color: gray"># alternative hypothesis is true:</span><br />
kruskal.test(list(rnorm(100), runif(200)))</td><td rowspan="1" colspan="1">stats.kruskal()</td></tr><tr><td rowspan="1" colspan="1"><a name="kolmogorov-smirnov-test" shape="rect" id="kolmogorov-smirnov-test"></a><a href="#kolmogorov-smirnov-test-note" shape="rect">kolmogorov-smirnov test</a><br /><span style="color: gray"><em>variables have same distribution</em></span></td><td rowspan="1" colspan="1">x = randn(100, 1)<br />
y1 = randn(100, 1)<br />
y2 = unifrnd(-0.5, 0.5, 100, 1)<br /><br /><span style="color: gray">% null hypothesis is true:</span><br />
kolmogorov_smirnov_test_2(x, y1)<br /><br /><span style="color: gray">% alternative hypothesis is true:</span><br />
kolmogorov_smirnov_test_2(x, y2)</td><td rowspan="1" colspan="1"><span style="color: gray"># null hypothesis is true:</span><br />
ks.test(rnorm(100), rnorm(100))<br /><br /><span style="color: gray"># alternative hypothesis is true:</span><br />
ks.test(rnorm(100), runif(100) - 0.5)</td><td rowspan="1" colspan="1">stats.ks_2samp()</td></tr><tr><td rowspan="1" colspan="1"><a name="one-sample-t-test" shape="rect" id="one-sample-t-test"></a><a href="#one-sample-t-test-note" shape="rect">one-sample t-test</a><br /><span style="color: gray"><em>mean of normal variable with unknown variance is zero</em></span></td><td rowspan="1" colspan="1">x1 = 3 * randn(100, 1)<br />
x2 = 3 * randn(100, 1) + 3<br /><br /><span style="color: gray">% null hypothesis is true:</span><br />
t_test(x1, 0)<br /><br /><span style="color: gray">% alternative hypothesis is true:</span><br />
t_test(x2, 0)</td><td rowspan="1" colspan="1"><span style="color: gray"># null hypothesis is true:</span><br />
t.test(rnorm(100, 0, 3))<br /><br /><span style="color: gray"># alternative hypothesis is true:</span><br />
t.test(rnorm(100, 3, 3))</td><td rowspan="1" colspan="1">stats.ttest_1samp()</td></tr><tr><td rowspan="1" colspan="1"><a name="independent-two-sample-t-test" shape="rect" id="independent-two-sample-t-test"></a><a href="#independent-two-sample-t-test-note" shape="rect">independent two-sample t-test</a><br /><span style="color: gray"><em>two normal variables have same mean</em></span></td><td rowspan="1" colspan="1">x = randn(100, 1)<br />
y1 = randn(100, 1)<br />
y2 = randn(100, 1) + 1.5<br /><br /><span style="color: gray">% null hypothesis is true:</span><br />
t_test_2(x, y1)<br /><br /><span style="color: gray">% alternative hypothesis is true:</span><br />
t_test_2(x, y2)</td><td rowspan="1" colspan="1"><span style="color: gray"># null hypothesis is true:</span><br />
t.test(rnorm(100), rnorm(100))<br /><br /><span style="color: gray"># alternative hypothesis is true:</span><br />
t.test(rnorm(100), rnorm(100, 3))</td><td rowspan="1" colspan="1">stats.ttest_ind()</td></tr><tr><td rowspan="1" colspan="1"><a name="one-sample-binomial-test" shape="rect" id="one-sample-binomial-test"></a><a href="#one-sample-binomial-test-note" shape="rect">one-sample binomial test</a><br /><span style="color: gray"><em>binomial variable parameter is as given</em></span></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1">n = 100<br />
x = rbinom(1, n, 0.5)<br /><br /><span style="color: gray"># null hypothesis that p=0.5 is true:</span><br />
binom.test(x, n)<br /><br /><span style="color: gray"># alternative hypothesis is true:</span><br />
binom.test(x, n, p=0.3)</td><td rowspan="1" colspan="1">stats.binom_test()</td></tr><tr><td rowspan="1" colspan="1"><a name="two-sample-binomial-test" shape="rect" id="two-sample-binomial-test"></a><a href="#two-sample-binomial-test-note" shape="rect">two-sample binomial test</a><br /><span style="color: gray"><em>parameters of two binomial variables are equal</em></span></td><td rowspan="1" colspan="1">prop_test_2()</td><td rowspan="1" colspan="1">n = 100<br />
x1 = rbinom(1, n, 0.5)<br />
x2 = rbinom(1, n, 0.5)<br /><br /><span style="color: gray"># null hypothesis that p=0.5 is true:</span><br />
prop.test(c(x1, x2), c(n, n))<br /><br />
y = rbinom(1, n, 0.3)<br /><span style="color: gray"># alternative hypothesis is true:</span><br />
prop.test(c(x1, y), c(n, n))</td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="chi-squared-test" shape="rect" id="chi-squared-test"></a><a href="#chi-squared-test-note" shape="rect">chi-squared test</a><br /><span style="color: gray"><em>parameters of multinomial variable are all equal</em></span></td><td rowspan="1" colspan="1">chisquare_test_independence()</td><td rowspan="1" colspan="1">fair = floor(6 * runif(100)) + 1<br />
loaded = floor(7 * runif(100)) + 1<br />
loaded[which(loaded &gt; 6)] = 6<br /><br /><span style="color: gray"># null hypothesis is true:</span><br />
chisq.test(table(fair))<br /><br /><span style="color: gray"># alternative hypothesis is true:</span><br />
chisq.test(table(loaded))</td><td rowspan="1" colspan="1">stats.chisquare()</td></tr><tr><td rowspan="1" colspan="1"><a name="poisson-test" shape="rect" id="poisson-test"></a><a href="#poisson-test-note" shape="rect">poisson test</a><br /><span style="color: gray"><em>parameter of poisson variable is as given</em></span></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"><span style="color: gray"># null hypothesis is true:</span><br />
poisson.test(rpois(1, 100), r=100)<br /><br /><span style="color: gray"># alternative test is true:</span><br />
poisson.test(rpois(1, 150), r=100)</td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="f-test" shape="rect" id="f-test"></a><a href="#f-test-note" shape="rect">F test</a><br /><span style="color: gray"><em>ratio of variance of normal variables is as given</em></span></td><td rowspan="1" colspan="1">var_test()</td><td rowspan="1" colspan="1">x = rnorm(100)<br />
y = rnorm(100, 0, sd=sqrt(3))<br /><br /><span style="color: gray"># null hypothesis is true:</span><br />
var.test(y, x, ratio=3)<br /><br /><span style="color: gray"># alternative hypothesis is true:</span><br />
var.test(y, x, ratio=1)</td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="pearson-product-moment-test" shape="rect" id="pearson-product-moment-test"></a><a href="#pearson-product-moment-test-note" shape="rect">pearson product moment test</a><br /><span style="color: gray"><em>normal variables are not correlated</em></span></td><td rowspan="1" colspan="1">cor_test()</td><td rowspan="1" colspan="1">x1 = rnorm(100)<br />
x2 = rnorm(100)<br />
y = x2 + rnorm(100)<br /><br /><span style="color: gray"># null hypothesis is true:</span><br />
cor.test(y, x1)<br /><br /><span style="color: gray"># alternative hypothesis is true:</span><br />
cor.test(y, x2)</td><td rowspan="1" colspan="1">stats.pearsonr()</td></tr><tr><td rowspan="1" colspan="1"><a name="shapiro-wilk-test" shape="rect" id="shapiro-wilk-test"></a><a href="#shapiro-wilk-test-note" shape="rect">shapiro-wilk test</a><br /><span style="color: gray"><em>variable has normal distribution</em></span></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"><span style="color: gray"># null hypothesis is true:</span><br />
shapiro.test(rnorm(1000))<br /><br /><span style="color: gray"># alternative hypothesis is true:</span><br />
shapiro.test(runif(1000))</td><td rowspan="1" colspan="1">stats.shapiro()</td></tr><tr><td rowspan="1" colspan="1"><a name="bartletts-test" shape="rect" id="bartletts-test"></a><a href="#bartletts-test-note" shape="rect">bartlett's test</a><br /><span style="color: gray"><em>two or more normal variables have same variance</em></span></td><td rowspan="1" colspan="1">bartlett_test()</td><td rowspan="1" colspan="1">x = rnorm(100)<br />
y1 = rnorm(100)<br />
y2 = 0.1 * rnorm(100)<br /><br /><span style="color: gray"># null hypothesis is true:</span><br />
bartlett.test(list(x, y1))<br /><br /><span style="color: gray"># alternative hypothesis is true:</span><br />
bartlett.test(list(x, y))</td><td rowspan="1" colspan="1">stats.bartlett()</td></tr><tr><td rowspan="1" colspan="1"><a name="levene-test" shape="rect" id="levene-test"></a><a href="#levene-test-note" shape="rect">levene's test</a><br /><span style="color: gray"><em>two or more variables have same variance</em></span></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1">install.packages('reshape', 'car')<br />
library(reshape)<br />
library(car)<br /><br />
x = rnorm(100)<br />
y1 = rnorm(100)<br />
y2 = 0.1 * rnorm(100)<br /><br /><span style="color: gray"># null hypothesis is true:</span><br />
df = melt(data.frame(x, y1))<br />
leveneTest(df$value, df$variable)<br /><br /><span style="color: gray"># alternative hypothesis is true:</span><br />
df = melt(data.frame(x, y2))<br />
leveneTest(df$value, df$variable)</td><td rowspan="1" colspan="1">stats.levene()</td></tr><tr><td rowspan="1" colspan="1"><a name="one-way-anova" shape="rect" id="one-way-anova"></a><a href="#one-way-anova-note" shape="rect">one-way anova</a><br /><span style="color: gray"><em>two or more normal variables have same mean</em></span></td><td rowspan="1" colspan="1">x1 = randn(100, 1)<br />
x2 = randn(100, 1)<br />
x3 = randn(100, 1)<br />
x = [x1; x2; x3]<br />
y = [x1; x2; x3 + 0.5]<br />
units = ones(100, 1)<br />
grp = [units; 2 * units; 3 * units]<br /><br /><span style="color: gray">% null hypothesis is true:</span><br />
anova(x, grp)<br /><br /><span style="color: gray">% alternative hypothesis is true:</span><br />
anova(y, grp)</td><td rowspan="1" colspan="1">install.packages('reshape')<br />
library(reshape)<br /><br /><span style="color: gray"># null hypothesis that all means are the same<br />
# is true:</span><br />
x1 = rnorm(100)<br />
x2 = rnorm(100)<br />
x3 = rnorm(100)<br /><br />
df = melt(data.frame(x1, x2, x3))<br />
fit = lm(df$value ~ df$variable)<br />
anova(fit)</td><td rowspan="1" colspan="1">stats.f_oneway()</td></tr><tr><th colspan="4" rowspan="1"><a name="time-series-analysis" shape="rect" id="time-series-analysis"></a><a href="#time-series-analysis-note" shape="rect">time series analysis</a></th></tr><tr><th rowspan="1" colspan="1"></th><th rowspan="1" colspan="1"><a href="#matlab" shape="rect">matlab</a></th><th rowspan="1" colspan="1"><a href="#r" shape="rect">r</a></th><th rowspan="1" colspan="1"><a href="#numpy" shape="rect">numpy</a></th></tr><tr><td rowspan="1" colspan="1">time series</td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"><span style="color: gray"># first observation time is 1:</span><br />
y = ts(rnorm(100))<br /><br /><span style="color: gray"># first observation time is 0:</span><br />
y2 = ts(rnorm(100), start=0)<br /><br />
plot(y)</td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1">multiple observations per time interval</td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1">moving average<br /><span style="color: gray"><em>simple, weighted, exponential</em></span></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1">ma = SMA(y, n=4)<br /><br />
plot(y)<br />
lines(ma, col='red')</td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1">decompose into seasonal and trend</td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1">raw = seq(1,100) + rnorm(100) + rep(seq(1,10), 10)<br />
y = ts(raw, frequency=10)<br />
decomp = decompose(y)<br />
decomp$trend<br />
decomp$seasonal<br />
decomp$random</td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1">loess</td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1">exponential smoothing</td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1">correlogram</td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1">arima</td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td></tr><tr><th colspan="4" rowspan="1"><a name="univariate-charts" shape="rect" id="univariate-charts"></a><a href="#univariate-chart-note" shape="rect">univariate charts</a></th></tr><tr><th rowspan="1" colspan="1"></th><th rowspan="1" colspan="1"><a href="#matlab" shape="rect">matlab</a></th><th rowspan="1" colspan="1"><a href="#r" shape="rect">r</a></th><th rowspan="1" colspan="1"><a href="#numpy" shape="rect">matplotlib</a></th></tr><tr><td rowspan="1" colspan="1"><img src="http://farm5.static.flickr.com/4090/5039793334_f76edece33_m.jpg" alt="5039793334_f76edece33_m.jpg" class="image" /><a name="bar-chart" shape="rect" id="bar-chart"></a><a href="#bar-chart-note" shape="rect">vertical bar chart</a></td><td rowspan="1" colspan="1">bar([7 3 8 5 5])</td><td rowspan="1" colspan="1">cnts = c(7,3,8,5,5)<br />
names(cnts) = c("a","b","c","d","e")<br />
barplot(cnts)<br /><br />
x = floor(6*runif(100))<br />
barplot(table(x))</td><td rowspan="1" colspan="1">cnts = [7,3,8,5,5]<br />
plt.bar(range(0,len(cnts)), cnts)</td></tr><tr><td rowspan="1" colspan="1"><img src="http://farm5.static.flickr.com/4092/5039776078_cc38a4ff5f_m.jpg" alt="5039776078_cc38a4ff5f_m.jpg" class="image" /><br /><a name="horizontal-bar-chart" shape="rect" id="horizontal-bar-chart"></a><a href="#horizontal-bar-chart-note" shape="rect">horizontal bar chart</a></td><td rowspan="1" colspan="1">barh([7 3 8 5 5])</td><td rowspan="1" colspan="1">cnts = c(7,3,8,5,5)<br />
names(cnts) = c("a","b","c","d","e")<br />
barplot(cnts, horiz=T)</td><td rowspan="1" colspan="1">cnts = [7,3,8,5,5]<br />
plt.barh(range(0,len(cnts)), cnts)</td></tr><tr><td rowspan="1" colspan="1"><img src="http://farm5.static.flickr.com/4145/5037819710_d932767cd5_m.jpg" alt="5037819710_d932767cd5_m.jpg" class="image" /><br /><a name="pie-chart" shape="rect" id="pie-chart"></a><a href="#pie-chart-note" shape="rect">pie chart</a></td><td rowspan="1" colspan="1">labels = {'a','b','c','d','e'}<br />
pie([7 3 8 5 5], labels)</td><td rowspan="1" colspan="1">cnts = c(7,3,8,5,5)<br />
names(cnts) = c("a","b","c","d","e")<br />
pie(cnts)</td><td rowspan="1" colspan="1">cnts = [7,3,8,5,5]<br />
labs = ['a','b','c','d','e']<br />
plt.pie(cnts, labels=labs)</td></tr><tr><td rowspan="1" colspan="1"><img src="http://farm5.static.flickr.com/4113/5037283957_9499b8529a_m.jpg" alt="5037283957_9499b8529a_m.jpg" class="image" /><br /><a name="dot-plot" shape="rect" id="dot-plot"></a><a href="#dot-plot-note" shape="rect">dot plot</a></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1">stripchart(floor(10*runif(50)),<br /><span style="white-space: pre-wrap;">    </span>method="stack",<br /><span style="white-space: pre-wrap;">    </span>offset=1,<br /><span style="white-space: pre-wrap;">    </span>pch=19)</td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><img src="http://farm5.static.flickr.com/4089/5037399669_13c8e585e0_m.jpg" alt="5037399669_13c8e585e0_m.jpg" class="image" /><br /><a name="stem-plot" shape="rect" id="stem-plot"></a><a href="#stem-plot-note" shape="rect">stem plot</a></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"><span style="color: gray"><em>generates an ascii chart:</em></span><br /><br />
stem(20*rnorm(100))</td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><img src="http://farm5.static.flickr.com/4106/5037415497_4c6fbfcab2_m.jpg" alt="5037415497_4c6fbfcab2_m.jpg" class="image" /><br /><a name="histogram" shape="rect" id="histogram"></a><a href="#histogram-note" shape="rect">histogram</a></td><td rowspan="1" colspan="1">hist(randn(1, 100), 10)</td><td rowspan="1" colspan="1">hist(rnorm(100), breaks=10)</td><td rowspan="1" colspan="1">plt.hist(sp.randn(100),<br /><span style="white-space: pre-wrap;">  </span>bins=range(-5,5))</td></tr><tr><td rowspan="1" colspan="1"><img src="http://farm5.static.flickr.com/4106/5037525393_7ac86e81c3_m.jpg" alt="5037525393_7ac86e81c3_m.jpg" class="image" /><br /><a name="box-plot" shape="rect" id="box-plot"></a><a href="#box-plot-note" shape="rect">box plot</a></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1">boxplot(rnorm(100))<br /><br />
boxplot(rnorm(100),<br /><span style="white-space: pre-wrap;">        </span>rexp(100),<br /><span style="white-space: pre-wrap;">        </span>runif(100))</td><td rowspan="1" colspan="1">plt.boxplot(sp.randn(100))<br /><br />
plt.boxplot([sp.randn(100),<br /><span style="white-space: pre-wrap;">  </span>np.random.uniform(size=100),<br /><span style="white-space: pre-wrap;">  </span>np.random.exponential(size=100)])</td></tr><tr><td rowspan="1" colspan="1"><a name="chart-title" shape="rect" id="chart-title"></a><a href="#chart-title-note" shape="rect">chart title</a></td><td rowspan="1" colspan="1">bar([7 3 8 5 5])<br />
title('bar chart example')</td><td rowspan="1" colspan="1"><span style="color: gray"><em>all chart functions except for</em> stem <em>accept a</em> main <em>parameter:</em></span><br />
boxplot(rnorm(100),<br /><span style="white-space: pre-wrap;">  </span>main="boxplot example",<br /><span style="white-space: pre-wrap;">  </span>sub="to illustrate options")</td><td rowspan="1" colspan="1">plt.boxplot(sp.randn(100))<br />
plt.title('boxplot example')</td></tr><tr><td rowspan="1" colspan="1">grid of subplots<img src="http://hyperpolyglot.wdfiles.com/local--files/numerical-analysis/subplots.png" alt="subplots.png" class="image" /></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1">for (i in split.screen(c(2, 2))) {<br /><span style="white-space: pre-wrap;">  </span>screen(n=i)<br /><span style="white-space: pre-wrap;">  </span>hist(rnorm(100))<br />
}</td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1">open new plot window</td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1">hist(rnorm(100))<br />
dev.new()<br />
hist(rnorm(100))</td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1">save plot as png</td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1">png('hist.png')<br />
hist(rnorm(100))<br />
dev.off()</td><td rowspan="1" colspan="1"></td></tr><tr><th colspan="4" rowspan="1"><a name="bivariate-charts" shape="rect" id="bivariate-charts"></a><a href="#bivariate-chart-note" shape="rect">bivariate charts</a></th></tr><tr><th rowspan="1" colspan="1"></th><th rowspan="1" colspan="1"><a href="#matlab" shape="rect">matlab</a></th><th rowspan="1" colspan="1"><a href="#r" shape="rect">r</a></th><th rowspan="1" colspan="1"><a href="#numpy" shape="rect">matplotlib</a></th></tr><tr><td rowspan="1" colspan="1"><img src="http://farm5.static.flickr.com/4154/5039126187_e340b3f4aa_m.jpg" alt="5039126187_e340b3f4aa_m.jpg" class="image" /><br /><a name="stacked-bar-chart" shape="rect" id="stacked-bar-chart"></a><a href="#stacked-bar-chart-note" shape="rect">stacked bar chart</a></td><td rowspan="1" colspan="1">d = [7 1; 3 2; 8 1; 5 3; 5 1]<br />
bar(d, 'stacked')</td><td rowspan="1" colspan="1">d = matrix(c(7,1,3,2,8,1,5,3,5,1),<br /><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;"> </span>nrow=2)<br />
labels = c("a","b","c","d","e")<br />
barplot(d,names.arg=labels)</td><td rowspan="1" colspan="1">a1 = [7,3,8,5,5]<br />
a2 = [1,2,1,3,1]<br />
plt.bar(range(0,5), a1, color='r')<br />
plt.bar(range(0,5), a2, color='b')</td></tr><tr><td rowspan="1" colspan="1"><img src="http://hyperpolyglot.wdfiles.com/local--files/numerical-analysis/grouped-bar.png" alt="grouped-bar.png" class="image" /><br /><a name="grouped-bar-chart" shape="rect" id="grouped-bar-chart"></a><a href="#grouped-bar-chart-note" shape="rect">grouped bar chart</a></td><td rowspan="1" colspan="1">d = [7 1; 3 2; 8 1; 5 3; 5 1]<br />
bar(d)</td><td rowspan="1" colspan="1">d = matrix(c(7,1,3,2,8,1,5,3,5,1),<br /><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;"> </span>nrow=2)<br />
labels = c("a","b","c","d","e")<br />
barplot(d,names.arg=labels,beside=TRUE)</td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><img src="http://farm6.static.flickr.com/5044/5267212089_a7749bbe3e_s.jpg" alt="5267212089_a7749bbe3e_s.jpg" class="image" /><br /><a name="scatter-plot" shape="rect" id="scatter-plot"></a><a href="#scatter-plot-note" shape="rect">scatter plot</a></td><td rowspan="1" colspan="1">plot(randn(1,50),randn(1,50),'+')</td><td rowspan="1" colspan="1">plot(rnorm(50), rnorm(50))</td><td rowspan="1" colspan="1">plt.scatter(sp.randn(50),<br /><span style="white-space: pre-wrap;">  </span>sp.randn(50))</td></tr><tr><td rowspan="1" colspan="1"><img src="http://hyperpolyglot.wdfiles.com/local--files/numerical-analysis/hexbin.png" alt="hexbin.png" class="image" /><br /><a name="hexbin" shape="rect" id="hexbin"></a><a href="#hexbin-note" shape="rect">hexagonal binning</a></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1">install.packages('hexbin')<br />
library('hexbin')<br /><br />
plot(hexbin(rnorm(1000),<br /><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span>rnorm(1000),<br /><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span>xbins=12))</td><td rowspan="1" colspan="1">hexbin(randn(1000),<br /><span style="white-space: pre-wrap;">  </span>randn(1000),<br /><span style="white-space: pre-wrap;">  </span>gridsize=12)</td></tr><tr><td rowspan="1" colspan="1"><img src="http://farm6.static.flickr.com/5089/5267975488_2216ae147e_s.jpg" alt="5267975488_2216ae147e_s.jpg" class="image" /><br /><a name="linear-regression-line" shape="rect" id="linear-regression-line"></a><a href="#linear-regression-line-note" shape="rect">linear regression line</a></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1">x = 0:20<br />
y = 2 * x + rnorm(21)*10<br /><br />
fit = lm(y ~ x)<br /><br />
plot(y)<br />
lines(x, fit$fitted.values, type='l')</td><td rowspan="1" colspan="1">x = range(0,20)<br />
err = sp.randn(20)*10<br />
y = [2*i for i in x] + err<br /><br />
A = np.vstack([x,np.ones(len(x))]).T<br />
m, c = np.linalg.lstsq(A, y)[0]<br /><br />
plt.scatter(x, y)<br />
plt.plot(x, [m*i + c for i in x])</td></tr><tr><td rowspan="1" colspan="1"><img src="http://farm6.static.flickr.com/5125/5267434941_f8537c9d26_s.jpg" alt="5267434941_f8537c9d26_s.jpg" class="image" /><br /><a name="polygonal-plot" shape="rect" id="polygonal-plot"></a><a href="#polygonal-plot-note" shape="rect">polygonal line plot</a></td><td rowspan="1" colspan="1">plot(1:20,randn(1,20))</td><td rowspan="1" colspan="1">plot(1:20, rnorm(20), type="l")</td><td rowspan="1" colspan="1">plot(range(0,20), randn(20))</td></tr><tr><td rowspan="1" colspan="1"><img src="http://farm6.static.flickr.com/5049/5268229340_0b96b5e223_s.jpg" alt="5268229340_0b96b5e223_s.jpg" class="image" /><br /><a name="cubic-spline" shape="rect" id="cubic-spline"></a><a href="#cubic-spline-note" shape="rect">cubic spline</a></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1">f = splinefun(rnorm(20))<br />
x = seq(1, 20, .1)<br />
plot(x, f(x), type="l")</td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><img src="http://farm6.static.flickr.com/5204/5268208606_b745646ea6_s.jpg" alt="5268208606_b745646ea6_s.jpg" class="image" /><br /><a name="function-plot" shape="rect" id="function-plot"></a><a href="#function-plot-note" shape="rect">function plot</a></td><td rowspan="1" colspan="1">fplot(@sin, [-4 4])</td><td rowspan="1" colspan="1">x = seq(-4, 4, .01)<br />
plot(sin(x), type="l")</td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><img src="http://farm6.static.flickr.com/5048/5267567389_27a19429e4_s.jpg" alt="5267567389_27a19429e4_s.jpg" class="image" /><br /><a name="qq-plot" shape="rect" id="qq-plot"></a><a href="#qq-plot-note" shape="rect">quantile-quantile plot</a></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1">qqplot(runif(50),rnorm(50))<br />
lines(c(-9,9), c(-9,9), col="red")</td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="axis-labels" shape="rect" id="axis-labels"></a><a href="#axis-labels-note" shape="rect">axis labels</a></td><td rowspan="1" colspan="1">plot( 1:20, (1:20) .** 2)<br />
xlabel('x')<br />
ylabel('x squared')</td><td rowspan="1" colspan="1">plot(1:20, (1:20)^2,<br /><span style="white-space: pre-wrap;">  </span>xlab="x", ylab="x squared")</td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="axis-limits" shape="rect" id="axis-limits"></a><a href="#axis-limits-note" shape="rect">axis limits</a></td><td rowspan="1" colspan="1">plot( 1:20, (1:20) .** 2)<br />
axis([1 20 -200 500])</td><td rowspan="1" colspan="1">plot(1:20, (1:20)^2,<br /><span style="white-space: pre-wrap;">  </span>xlim=c(0, 20), ylim=c(-200,500))</td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="logarithmic-y-axis" shape="rect" id="logarithmic-y-axis"></a><a href="#logarithmic-y-axis-note" shape="rect">logarithmic y-axis</a></td><td rowspan="1" colspan="1">semilogy(x, x .** 2,<br /><span style="white-space: pre-wrap;">  </span>x, x .** 3,<br /><span style="white-space: pre-wrap;">  </span>x, x .** 4,<br /><span style="white-space: pre-wrap;">  </span>x, x .** 5)</td><td rowspan="1" colspan="1">x = 0:20<br />
plot(x, x^2, log="y",type="l")<br />
lines(x, x^3, col="blue")<br />
lines(x, x^4, col="green")<br />
lines(x, x^5, col="red")</td><td rowspan="1" colspan="1">x = range(0, 20)<br /><br />
for i in [2,3,4,5]:<br /><span style="white-space: pre-wrap;">  </span>y.append([j**i for j in x])<br /><br />
for i in [0,1,2,3]:<br /><span style="white-space: pre-wrap;">  </span>semilogy(x, y[i])</td></tr><tr><th colspan="4" rowspan="1"><a name="multivariate-charts" shape="rect" id="multivariate-charts"></a><a href="#multivariate-chart-note" shape="rect">multivariate charts</a></th></tr><tr><th rowspan="1" colspan="1"></th><th rowspan="1" colspan="1"><a href="#matlab" shape="rect">matlab</a></th><th rowspan="1" colspan="1"><a href="#r" shape="rect">r</a></th><th rowspan="1" colspan="1"><a href="#numpy" shape="rect">matplotlib</a></th></tr><tr><td rowspan="1" colspan="1"><a name="additional-line" shape="rect" id="additional-line"></a><img src="http://farm6.static.flickr.com/5245/5268191292_a75a367c39_s.jpg" alt="5268191292_a75a367c39_s.jpg" class="image" /><br /><a href="#additional-line-note" shape="rect">additional line set</a></td><td rowspan="1" colspan="1">plot(1:20, randn(1, 20),<br /><span style="white-space: pre-wrap;">  </span>1:20, randn(1, 20))<br /><br /><span style="color: gray"><em>optional method:</em></span><br />
plot(1:20, randn(1, 20))<br />
hold on<br />
plot(1:20, randn(1, 20))</td><td rowspan="1" colspan="1">plot(1:20, rnorm(20), type="l")<br />
lines(1:20, rnorm(20), col="red")</td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1">superimposed plots with different y-axis scales</td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="legend" shape="rect" id="legend"></a><img src="http://hyperpolyglot.wdfiles.com/local--files/numerical-analysis/legend.png" alt="legend.png" class="image" /><br /><a href="#legend-note" shape="rect">legend</a></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1">x = (1:20)<br />
y = x + rnorm(20)<br />
y2 = x - 2 + rnorm(20)<br /><br />
plot(x, y, type="l", col="black")<br />
lines(x, y2, type="l", col="red")<br />
legend('topleft', c('first', 'second'),<br /><span style="white-space: pre-wrap;">  </span>lty=c(1,1), lwd=c(2.5, 2.5),<br /><span style="white-space: pre-wrap;">  </span>col=c('black', 'red'))</td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="additional-point" shape="rect" id="additional-point"></a><img src="http://hyperpolyglot.wdfiles.com/local--files/numerical-analysis/additional-point.png" alt="additional-point.png" class="image" /><br /><a href="#additional-point-note" shape="rect">additional point set</a></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1">plot(rnorm(20), rnorm(20))<br />
points(rnorm(20), rnorm(20),<br /><span style="white-space: pre-wrap;">  </span>col='red')</td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="area-chart" shape="rect" id="area-chart"></a><img src="http://farm6.static.flickr.com/5041/5268071368_75c3aee42e_t.jpg" alt="5268071368_75c3aee42e_t.jpg" class="image" /><br /><a href="#area-chart-note" shape="rect">stacked area chart</a></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1">x = rep(0:4, each=3)<br />
y = round(5 * runif(15))<br />
letter = rep(LETTERS[1:3], 5)<br />
df = data.frame(x, y, letter)<br /><br />
p = ggplot(df, aes(x=x, y=y,<br /><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span>group=letter,<br /><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span>fill=letter))<br />
p + geom_area(position='stack')</td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="overlapping-area-chart" shape="rect" id="overlapping-area-chart"></a><img src="http://hyperpolyglot.wdfiles.com/local--files/numerical-analysis/overlapping-area-chart.png" alt="overlapping-area-chart.png" class="image" /><br /><a href="#overlapping-area-chart-note" shape="rect">overlapping area chart</a></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1">x = rep(0:4, each=3)<br />
y = round(5 * runif(15))<br />
letter = rep(LETTERS[1:3], 5)<br />
df = data.frame(x, y, letter)<br />
alpha = rep(I(2/10), each=15)<br /><br />
p = ggplot(df, aes(x=x, ymin=0, ymax=y,<br /><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span>group=letter, fill=letter,<br /><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span>alpha=alpha))<br />
p + geom_ribbon()</td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="3d-scatter-plot" shape="rect" id="3d-scatter-plot"></a><img src="http://hyperpolyglot.wdfiles.com/local--files/numerical-analysis/scatterplot3d.png" alt="scatterplot3d.png" class="image" /><br /><a href="#3d-scatter-plot-note" shape="rect">3d scatter plot</a></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1">install.packages('scatterplot3d')<br />
library('scatterplot3d')<br /><br />
scatterplot3d(rnorm(50), rnorm(50),<br /><span style="white-space: pre-wrap;">  </span>rnorm(50), type="h")</td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="bubble-chart" shape="rect" id="bubble-chart"></a><img src="http://hyperpolyglot.wdfiles.com/local--files/numerical-analysis/bubble-chart.png" alt="bubble-chart.png" class="image" /><br /><a href="#bubble-chart-note" shape="rect">bubble chart</a></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1">df = data.frame(x=rnorm(20),<br /><span style="white-space: pre-wrap;">  </span>y=rnorm(20), z=rnorm(20))<br /><br />
p = ggplot(df, aes(x=x, y=y, size=z))<br />
p + geom_point()</td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="scatter-plot-matrix" shape="rect" id="scatter-plot-matrix"></a><img src="http://hyperpolyglot.wdfiles.com/local--files/numerical-analysis/scatter-plot-matrix.png" alt="scatter-plot-matrix.png" class="image" /><br /><a href="#scatter-plot-matrix-note" shape="rect">scatter plot matrix</a></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1">x = rnorm(20)<br />
y = rnorm(20)<br />
z = x + 3*y<br />
w = y + 0.1*rnorm(20)<br />
df = data.frame(x, y, z, w)<br /><br />
pairs(df)</td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="contour-plot" shape="rect" id="contour-plot"></a><img src="http://hyperpolyglot.wdfiles.com/local--files/numerical-analysis/contour-plot.png" alt="contour-plot.png" class="image" /><br /><a href="#contour-plot-note" shape="rect">contour plot</a></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1">m = matrix(0, 100, 100)<br />
for (i in 2:100) {<br /><span style="white-space: pre-wrap;">  </span>for (j in 2:100) {<br /><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span>m[i,j] = (m[i-1,j] + m[i,j-1])/2 +<br /><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span>runif(1) - 0.5<br /><span style="white-space: pre-wrap;">  </span>}<br />
}<br /><br />
filled.contour(1:100, 1:100, m)</td><td rowspan="1" colspan="1"></td></tr><tr><th rowspan="1" colspan="1"></th><th rowspan="1" colspan="1"><span style="color: #efefef"><span style="white-space: pre-wrap;">_______________________________________________________</span></span></th><th rowspan="1" colspan="1"><span style="color: #efefef"><span style="white-space: pre-wrap;">_______________________________________________________</span></span></th><th rowspan="1" colspan="1"><span style="color: #efefef"><span style="white-space: pre-wrap;">_______________________________________________________</span></span></th></tr></table><p><a name="general-note" shape="rect" id="general-note"></a></p>
<h1 id="toc0"><span><a href="#top" shape="rect">General</a></span></h1>
<p><a name="version-used-note" shape="rect" id="version-used-note"></a></p>
<h2 id="toc1"><span><a href="#version-used" shape="rect">version used</a></span></h2>
<p>The version of software used to check the examples in the reference sheet.</p>
<p><a name="show-version-note" shape="rect" id="show-version-note"></a></p>
<h2 id="toc2"><span><a href="#show-version" shape="rect">show version</a></span></h2>
<p>How to determine the version of an installation.</p>
<p><a name="implicit-prologue-note" shape="rect" id="implicit-prologue-note"></a></p>
<h2 id="toc3"><span><a href="#implicit-prologue" shape="rect">implicit prologue</a></span></h2>
<p>Code which examples in the sheet assume to have already been executed.</p>
<p><strong>r:</strong></p>
<p>The <tt>ggplot2</tt> library must be installed and loaded to use the plotting functions <tt>qplot</tt> and <tt>ggplot</tt>.</p>
<p><a name="grammar-invocation-note" shape="rect" id="grammar-invocation-note"></a></p>
<h1 id="toc4"><span><a href="#grammar-invocation" shape="rect">Grammar and Invocation</a></span></h1>
<p><a name="interpreter-note" shape="rect" id="interpreter-note"></a></p>
<h2 id="toc5"><span><a href="#interpreter" shape="rect">interpreter</a></span></h2>
<p>How to invoke the interpreter on a script.</p>
<p><a name="repl-note" shape="rect" id="repl-note"></a></p>
<h2 id="toc6"><span><a href="#repl" shape="rect">repl</a></span></h2>
<p>How to launch a command line read-eval-print loop for the language.</p>
<p><strong>r:</strong></p>
<p>R installations come with a clickable GUI REPL.</p>
<p><a name="cmd-line-program-note" shape="rect" id="cmd-line-program-note"></a></p>
<h2 id="toc7"><span><a href="#cmd-line-program" shape="rect">command line program</a></span></h2>
<p>How to pass the code to be executed to the interpreter as a command line argument.</p>
<p><a name="env-var-note" shape="rect" id="env-var-note"></a></p>
<h2 id="toc8"><span><a href="#env-var" shape="rect">environment variables</a></span></h2>
<p>How to get and set an environment variable.</p>
<p><a name="block-delimiters-note" shape="rect" id="block-delimiters-note"></a></p>
<h2 id="toc9"><span><a href="#block-delimiters" shape="rect">block delimiters</a></span></h2>
<p>Punctuation or keywords which define blocks.</p>
<p><strong>matlab:</strong></p>
<p>The list of keywords which define blocks is not exhaustive. Blocks are also defined by</p>
<ul><li><em>switch</em>, <em>case</em>, <em>otherwise</em>, <em>endswitch</em></li><li><em>unwind_protect</em>, <em>unwind_protect_cleanup</em>, <em>end_unwind_protect</em></li><li><em>try</em>, <em>catch</em>, <em>end_try_catch</em></li></ul><p><a name="stmt-separator-note" shape="rect" id="stmt-separator-note"></a></p>
<h2 id="toc10"><span><a href="#stmt-separator" shape="rect">statement separator</a></span></h2>
<p>How statements are separated.</p>
<p><strong>matlab:</strong></p>
<p>Semicolons are used at the end of lines to suppress output. Output echoes the assignment performed by a statement; if the statement is not an assignment the value of the statement is assigned to the special variable <tt>ans</tt>.</p>
<p>In Octave, but not MATLAB, newlines are not separators when preceded by a backslash.</p>
<p><a name="eol-comment-note" shape="rect" id="eol-comment-note"></a></p>
<h2 id="toc11"><span><a href="#eol-comment" shape="rect">end-of-line comment</a></span></h2>
<p>Character used to start a comment that goes to the end of the line.</p>
<p><a name="var-expr-note" shape="rect" id="var-expr-note"></a></p>
<h1 id="toc12"><span><a href="#var-expr" shape="rect">Variables and Expressions</a></span></h1>
<p><a name="assignment-note" shape="rect" id="assignment-note"></a></p>
<h2 id="toc13"><span><a href="#assignment" shape="rect">assignment</a></span></h2>
<p><strong>r:</strong></p>
<p>Traditionally &lt;- was used in R for assignment. Using an = for assignment was introduced in version 1.4.0 sometime before 2002. -&gt; can also be used for assignment:</p>
<div class="code">
<pre xml:space="preserve">
<code>3 -&gt; x</code>
</pre></div>
<p><a name="compound-assignment-note" shape="rect" id="compound-assignment-note"></a></p>
<h2 id="toc14"><span><a href="#compound-assignment" shape="rect">compound assignment</a></span></h2>
<p>The compound assignment operators.</p>
<p><a name="incr-decr-note" shape="rect" id="incr-decr-note"></a></p>
<h2 id="toc15"><span><a href="#incr-decr" shape="rect">increment and decrement operator</a></span></h2>
<p>The operator for incrementing the value in a variable; the operator for decrementing the value in a variable.</p>
<p><a name="null-note" shape="rect" id="null-note"></a></p>
<h2 id="toc16"><span><a href="#null" shape="rect">null</a></span></h2>
<p><strong>matlab:</strong></p>
<p>NA can be used for missing numerical values. Using a comparison operator on it always returns false, including NA == NA. Using a logical operator on NA raises an error.</p>
<p><strong>r:</strong></p>
<p>Relational operators return NA when one of the arguments is NA. In particular NA == NA is NA. When acting on values that might be NA, the logical operators observe the rules of <a href="http://en.wikipedia.org/wiki/Ternary_logic" shape="rect">ternary logic</a>, treating NA is the unknown value.</p>
<p><a name="null-test-note" shape="rect" id="null-test-note"></a></p>
<h2 id="toc17"><span><a href="#null-test" shape="rect">null test</a></span></h2>
<p>How to test if a value is null.</p>
<p><a name="cond-expr-note" shape="rect" id="cond-expr-note"></a></p>
<h2 id="toc18"><span><a href="#cond-expr" shape="rect">conditional expression</a></span></h2>
<p>A conditional expression.</p>
<p><a name="arithmetic-logic-note" shape="rect" id="arithmetic-logic-note"></a></p>
<h1 id="toc19"><span><a href="#arithmetic-logic" shape="rect">Arithmetic and Logic</a></span></h1>
<p><a name="true-false-note" shape="rect" id="true-false-note"></a></p>
<h2 id="toc20"><span><a href="#true-false" shape="rect">true and false</a></span></h2>
<p>The boolean literals.</p>
<p><strong>matlab:</strong></p>
<p><em>true</em> and <em>false</em> are functions which return matrices of ones and zeros of type <em>logical</em>. If no arguments are specified they return single entry matrices. If one argument is provided, a square matrix is returned. If two arguments are provided, they are the row and column dimensions.</p>
<p><a name="falsehoods-note" shape="rect" id="falsehoods-note"></a></p>
<h2 id="toc21"><span><a href="#falsehoods" shape="rect">falsehoods</a></span></h2>
<p>Values which evaluate to false in a conditional test.</p>
<p><strong>matlab:</strong></p>
<p>When used in a conditional, matrices evaluate to false unless they are nonempty and all their entries evaluate to true. Because strings are matrices of characters, an empty string ('' or "") will evaluate to false. Most other strings will evaluate to true, but it is possible to create a nonempty string which evaluates to false by inserting a null character; e.g. "false\000".</p>
<p><strong>r:</strong></p>
<p>When used in a conditional, a vector evaluates to the boolean value of its first entry. Using a vector with more than one entry in a conditional results in a warning message. Using an empty vector in a conditional, <em>c()</em> or <em>NULL</em>, raises an error.</p>
<p><a name="logical-op-note" shape="rect" id="logical-op-note"></a></p>
<h2 id="toc22"><span><a href="#logical-op" shape="rect">logical operators</a></span></h2>
<p>The boolean operators.</p>
<p><strong>matlab:</strong></p>
<p>Note that MATLAB does not use the exclamation point '!' for negation.</p>
<p>&amp;&amp; and <span style="white-space: pre-wrap;">||</span> are short circuit logical operators.</p>
<p><a name="relational-op-note" shape="rect" id="relational-op-note"></a></p>
<h2 id="toc23"><span><a href="#relational-op" shape="rect">relational operators</a></span></h2>
<p>The relational operators.</p>
<p><strong>matlab:</strong></p>
<p>Note that MATLAB does not use '!=' for an inequality test.</p>
<p><a name="arith-op-note" shape="rect" id="arith-op-note"></a></p>
<h2 id="toc24"><span><a href="#arith-op" shape="rect">arithmetic operators</a></span></h2>
<p>The arithmetic operators: addition, subtraction, multiplication, division, quotient, remainder.</p>
<p><strong>matlab:</strong></p>
<p><em>mod</em> is a function and not an infix operator. <em>mod</em> returns a positive value if the first argument is positive, whereas <em>rem</em> returns a negative value.</p>
<p><a name="int-div-note" shape="rect" id="int-div-note"></a></p>
<h2 id="toc25"><span><a href="#int-div" shape="rect">integer division</a></span></h2>
<p>How to compute the quotient of two integers.</p>
<p><a name="int-div-zero-note" shape="rect" id="int-div-zero-note"></a></p>
<h2 id="toc26"><span><a href="#int-div-zero" shape="rect">integer division by zero</a></span></h2>
<p>What happens when an integer is divided by zero.</p>
<p><a name="float-div-note" shape="rect" id="float-div-note"></a></p>
<h2 id="toc27"><span><a href="#float-div" shape="rect">float division</a></span></h2>
<p>How to perform float division, even if the arguments are integers.</p>
<p><a name="float-div-zero-note" shape="rect" id="float-div-zero-note"></a></p>
<h2 id="toc28"><span><a href="#float-div-zero" shape="rect">float division by zero</a></span></h2>
<p>What happens when a float is divided by zero.</p>
<p><a name="power-note" shape="rect" id="power-note"></a></p>
<h2 id="toc29"><span><a href="#power" shape="rect">power</a></span></h2>
<p><strong>matlab:</strong></p>
<p>^ is a synonym for **.</p>
<p><strong>r:</strong></p>
<p>^ is a synonym for **.</p>
<p><a name="sqrt-note" shape="rect" id="sqrt-note"></a></p>
<h2 id="toc30"><span><a href="#sqrt" shape="rect">sqrt</a></span></h2>
<p>The square root function.</p>
<p><a name="sqrt-negative-one-note" shape="rect" id="sqrt-negative-one-note"></a></p>
<h2 id="toc31"><span><a href="#sqrt-negative-one" shape="rect">sqrt(-1)</a></span></h2>
<p>The result of taking the square root of a negative number.</p>
<p><a name="transcendental-func-note" shape="rect" id="transcendental-func-note"></a></p>
<h2 id="toc32"><span><a href="#transcendental-func" shape="rect">transcendental functions</a></span></h2>
<p>The standard transcendental functions.</p>
<p><a name="transcendental-const-note" shape="rect" id="transcendental-const-note"></a></p>
<h2 id="toc33"><span><a href="#transcendental-const" shape="rect">transcendental constants</a></span></h2>
<p>Constants for <em>pi</em> and <em>e</em>.</p>
<p><a name="float-truncation-note" shape="rect" id="float-truncation-note"></a></p>
<h2 id="toc34"><span><a href="#float-truncation" shape="rect">float truncation</a></span></h2>
<p>Ways of converting a float to a nearby integer.</p>
<p><a name="absolute-val-note" shape="rect" id="absolute-val-note"></a></p>
<h2 id="toc35"><span><a href="#absolute-val" shape="rect">absolute value</a></span></h2>
<p>The absolute value and signum of a number.</p>
<p><a name="int-overflow-note" shape="rect" id="int-overflow-note"></a></p>
<h2 id="toc36"><span><a href="#int-overflow" shape="rect">integer overflow</a></span></h2>
<p>What happens when an expression evaluates to an integer which is too big to be represented.</p>
<p><a name="float-overflow-note" shape="rect" id="float-overflow-note"></a></p>
<h2 id="toc37"><span><a href="#float-overflow" shape="rect">float overflow</a></span></h2>
<p>What happens when an expression evaluates to a float which is too big to be represented.</p>
<p><a name="float-limits-note" shape="rect" id="float-limits-note"></a></p>
<h2 id="toc38"><span><a href="#float-limits" shape="rect">float limits</a></span></h2>
<p>The <a href="http://en.wikipedia.org/wiki/Machine_epsilon" shape="rect">machine epsilon</a>; the largest representable float and the smallest (i.e. closest to negative infinity) representable float.</p>
<p><a name="complex-construction-note" shape="rect" id="complex-construction-note"></a></p>
<h2 id="toc39"><span><a href="#complex-construction" shape="rect">complex construction</a></span></h2>
<p>Literals for complex numbers.</p>
<p><a name="complex-decomposition-note" shape="rect" id="complex-decomposition-note"></a></p>
<h2 id="toc40"><span><a href="#complex-decomposition" shape="rect">complex decomposition</a></span></h2>
<p>How to decompose a complex number into its real and imaginary parts; how to decompose a complex number into its absolute value and argument; how to get the complex conjugate.</p>
<p><a name="random-num-note" shape="rect" id="random-num-note"></a></p>
<h2 id="toc41"><span><a href="#random-num" shape="rect">random number</a></span></h2>
<p>How to generate a random integer from a uniform distribution; how to generate a random float from a uniform distribution.</p>
<p><a name="random-seed-note" shape="rect" id="random-seed-note"></a></p>
<h2 id="toc42"><span><a href="#random-seed" shape="rect">random seed</a></span></h2>
<p>How to set, get, and restore the seed used by the random number generator.</p>
<p><strong>matlab:</strong></p>
<p>At startup the random number generator is seeded using operating system entropy.</p>
<p><strong>r:</strong></p>
<p>At startup the random number generator is seeded using the current time.</p>
<p><strong>numpy:</strong></p>
<p>On Unix the random number generator is seeded at startup from /dev/random.</p>
<p><a name="bit-op-note" shape="rect" id="bit-op-note"></a></p>
<h2 id="toc43"><span><a href="#bit-op" shape="rect">bit operators</a></span></h2>
<p>The bit operators left shift, right shift, and, or , xor, and negation.</p>
<p><strong>matlab/octave:</strong></p>
<p><tt>bitshift</tt> takes a second argument which is positive for left shift and negative for right shift.</p>
<p><tt>bitcmp</tt> takes a second argument which is the size in bits of the integer being operated on. Octave is not compatible with MATLAB in how the integer size is indicated.</p>
<p><strong>r:</strong></p>
<p>There is a library on CRAN called <tt>bitops</tt> which provides bit operators.</p>
<p><a name="strings-note" shape="rect" id="strings-note"></a></p>
<h1 id="toc44"><span><a href="#strings" shape="rect">Strings</a></span></h1>
<p><a name="str-literal-note" shape="rect" id="str-literal-note"></a></p>
<h2 id="toc45"><span><a href="#str-literal" shape="rect">literal</a></span></h2>
<p>The syntax for a string literal.</p>
<p><a name="str-newline-note" shape="rect" id="str-newline-note"></a></p>
<h2 id="toc46"><span><a href="#str-newline" shape="rect">newline in literal</a></span></h2>
<p>Can a newline be included in a string literal? Equivalently, can a string literal span more than one line of source code?</p>
<p><a name="str-esc-note" shape="rect" id="str-esc-note"></a></p>
<h2 id="toc47"><span><a href="#str-esc" shape="rect">literal escapes</a></span></h2>
<p>Escape sequences for including special characters in string literals.</p>
<p><a name="char-access-note" shape="rect" id="char-access-note"></a></p>
<h2 id="toc48"><span><a href="#char-access" shape="rect">character access</a></span></h2>
<p>How to get the character in a string at a given index.</p>
<p><a name="chr-ord-note" shape="rect" id="chr-ord-note"></a></p>
<h2 id="toc49"><span><a href="#chr-ord" shape="rect">chr and ord</a></span></h2>
<p>How to convert an ASCII code to a character; how to convert a character to its ASCII code.</p>
<p><a name="str-len-note" shape="rect" id="str-len-note"></a></p>
<h2 id="toc50"><span><a href="#str-len" shape="rect">length</a></span></h2>
<p>How to get the number of characters in a string.</p>
<p><a name="str-concat-note" shape="rect" id="str-concat-note"></a></p>
<h2 id="toc51"><span><a href="#str-concat" shape="rect">concatenate</a></span></h2>
<p>How to concatenate strings.</p>
<p><a name="str-replicate-note" shape="rect" id="str-replicate-note"></a></p>
<h2 id="toc52"><span><a href="#str-replicate" shape="rect">replicate</a></span></h2>
<p>How to create a string which consists of a character of substring repeated a fixed number of times.</p>
<p><a name="index-substr-note" shape="rect" id="index-substr-note"></a></p>
<h2 id="toc53"><span><a href="#index-substr" shape="rect">index of substring</a></span></h2>
<p>How to get the index of first occurrence of a substring.</p>
<p><a name="extract-substr-note" shape="rect" id="extract-substr-note"></a></p>
<h2 id="toc54"><span><a href="#extract-substr" shape="rect">extract substring</a></span></h2>
<p>How to get the substring at a given index.</p>
<p><a name="split-note" shape="rect" id="split-note"></a></p>
<h2 id="toc55"><span><a href="#split" shape="rect">split</a></span></h2>
<p>How to split a string into an array of substrings. In the original string the substrings must be separated by a character, string, or regex pattern which will not appear in the array of substrings.</p>
<p>The split operation can be used to extract the fields from a field delimited record of data.</p>
<p><a name="join-note" shape="rect" id="join-note"></a></p>
<h2 id="toc56"><span><a href="#join" shape="rect">join</a></span></h2>
<p>How to join an array of substrings into single string. The substrings can be separated by a specified character or string.</p>
<p>Joining is the inverse of splitting.</p>
<p><a name="trim-note" shape="rect" id="trim-note"></a></p>
<h2 id="toc57"><span><a href="#trim" shape="rect">trim</a></span></h2>
<p>How to remove whitespace from the beginning and the end of a string.</p>
<p>Trimming is often performed on user provided input.</p>
<p><a name="num-str-conversion-note" shape="rect" id="num-str-conversion-note"></a></p>
<h2 id="toc58"><span><a href="#num-str-conversion" shape="rect">convert from string, to string</a></span></h2>
<p>How to convert strings to numbers and vice versa.</p>
<p><a name="case-manipulation-note" shape="rect" id="case-manipulation-note"></a></p>
<h2 id="toc59"><span><a href="#case-manipulation" shape="rect">case manipulation</a></span></h2>
<p>How to put a string into all caps. How to put a string into all lower case letters. How to capitalize the first letter of a string.</p>
<p><a name="sprintf-note" shape="rect" id="sprintf-note"></a></p>
<h2 id="toc60"><span><a href="#sprintf" shape="rect">sprintf</a></span></h2>
<p>How to create a string using a printf style format.</p>
<p><a name="regexes-note" shape="rect" id="regexes-note"></a></p>
<h1 id="toc61"><span><a href="#regexes" shape="rect">Regular Expressions</a></span></h1>
<p><a name="regex-match-note" shape="rect" id="regex-match-note"></a></p>
<h2 id="toc62"><span><a href="#regex-match" shape="rect">regex test</a></span></h2>
<p>How to test whether a string matches a regular expression.</p>
<p><a name="regex-subst-note" shape="rect" id="regex-subst-note"></a></p>
<h2 id="toc63"><span><a href="#regex-subst" shape="rect">regex substitution</a></span></h2>
<p>How to replace all substring which match a pattern with a specified string; how to replace the first substring which matches a pattern with a specified string.</p>
<p><a name="dates-time-note" shape="rect" id="dates-time-note"></a></p>
<h1 id="toc64"><span><a href="#dates-time" shape="rect">Date and Time</a></span></h1>
<p><a name="current-date-time-note" shape="rect" id="current-date-time-note"></a></p>
<h2 id="toc65"><span><a href="#current-date-time" shape="rect">current date/time</a></span></h2>
<p>How to get the current date and time.</p>
<p><strong>r:</strong></p>
<p><tt>Sys.time()</tt> returns a value of type <tt>POSIXct</tt>.</p>
<p><a name="date-time-type-note" shape="rect" id="date-time-type-note"></a></p>
<h2 id="toc66"><span><a href="#date-time-type" shape="rect">date/time type</a></span></h2>
<p>The data type used to hold a combined date and time value.</p>
<p><a name="date-time-diff-type-note" shape="rect" id="date-time-diff-type-note"></a></p>
<h2 id="toc67"><span><a href="#date-time-diff-type" shape="rect">date/time difference type</a></span></h2>
<p>The data type used to hold the difference between two date/time types.</p>
<p><a name="date-parts-note" shape="rect" id="date-parts-note"></a></p>
<h2 id="toc68"><span><a href="#date-parts" shape="rect">get date parts</a></span></h2>
<p>How to get the year, the month as an integer from 1 through 12, and the day of the month from a date/time value.</p>
<p><a name="time-parts-note" shape="rect" id="time-parts-note"></a></p>
<h2 id="toc69"><span><a href="#time-parts" shape="rect">get time parts</a></span></h2>
<p>How to get the hour as an integer from 0 through 23, the minute, and the second from a date/time value.</p>
<p><a name="build-date-time-note" shape="rect" id="build-date-time-note"></a></p>
<h2 id="toc70"><span><a href="#build-date-time" shape="rect">build date/time from parts</a></span></h2>
<p>How to build a date/time value from the year, month, day, hour, minute, and second as integers.</p>
<p><a name="date-to-str-note" shape="rect" id="date-to-str-note"></a></p>
<h2 id="toc71"><span><a href="#date-to-str" shape="rect">convert to string</a></span></h2>
<p>How to convert a date value to a string using the default format for the locale.</p>
<p><a name="strptime-note" shape="rect" id="strptime-note"></a></p>
<h2 id="toc72"><span><a href="#strptime" shape="rect">strptime</a></span></h2>
<p>How to parse a date/time value from a string in the manner of strptime from the C standard library.</p>
<p><a name="strftime-note" shape="rect" id="strftime-note"></a></p>
<h2 id="toc73"><span><a href="#strftime" shape="rect">strftime</a></span></h2>
<p>How to write a date/time value to a string in the manner of strftime from the C standard library.</p>
<p><a name="tuples-note" shape="rect" id="tuples-note"></a></p>
<h1 id="toc74"><span><a href="#tuples" shape="rect">Tuples</a></span></h1>
<table class="wiki-content-table"><tr><th rowspan="1" colspan="1"></th><th rowspan="1" colspan="1">homogeneous array</th><th rowspan="1" colspan="1">vector</th><th rowspan="1" colspan="1">tuple</th><th rowspan="1" colspan="1">record</th><th rowspan="1" colspan="1">map</th></tr><tr><th rowspan="1" colspan="1">NumPy</th><td rowspan="1" colspan="1">list</td><td rowspan="1" colspan="1">vector</td><td rowspan="1" colspan="1">tuple</td><td rowspan="1" colspan="1">dict</td><td rowspan="1" colspan="1">dict</td></tr><tr><th rowspan="1" colspan="1">Octave</th><td rowspan="1" colspan="1">rank 1 matrix</td><td rowspan="1" colspan="1">rank 1 matrix</td><td rowspan="1" colspan="1">cell array</td><td rowspan="1" colspan="1">struct</td><td rowspan="1" colspan="1"></td></tr><tr><th rowspan="1" colspan="1">R</th><td rowspan="1" colspan="1">vector</td><td rowspan="1" colspan="1">vector</td><td rowspan="1" colspan="1">list</td><td rowspan="1" colspan="1">list</td><td rowspan="1" colspan="1"></td></tr></table><p><a name="tuple-literal-note" shape="rect" id="tuple-literal-note"></a></p>
<h2 id="toc75"><span><a href="#tuple-literal" shape="rect">tuple literal</a></span></h2>
<p>How to create a tuple, which we define as a fixed length, inhomogeneous list.</p>
<p><a name="tuple-access-note" shape="rect" id="tuple-access-note"></a></p>
<h2 id="toc76"><span><a href="#tuple-access" shape="rect">tuple element access</a></span></h2>
<p>How to access an element of a tuple.</p>
<p><a name="tuple-len-note" shape="rect" id="tuple-len-note"></a></p>
<h2 id="toc77"><span><a href="#tuple-len" shape="rect">tuple length</a></span></h2>
<p>How to get the number of elements in a tuple.</p>
<p><a name="arrays-note" shape="rect" id="arrays-note"></a></p>
<h1 id="toc78"><span><a href="#arrays" shape="rect">Arrays</a></span></h1>
<p>This section covers one-dimensional arrays which map integers to values.</p>
<p><a href="#multidimensional-arrays" shape="rect">Multidimensional arrays</a> are a generalization which map tuples of integers to values.</p>
<p><a href="#vectors" shape="rect">Vectors</a> and <a href="#matrices" shape="rect">matrices</a> are one-dimensional and two-dimensional arrays respectively containing numeric values. They support additional operations including the dot product, matrix multiplication, and norms.</p>
<p>Here are the data types covered in each section:</p>
<table class="wiki-content-table"><tr><th rowspan="1" colspan="1">section</th><th rowspan="1" colspan="1">matlab</th><th rowspan="1" colspan="1">r</th><th rowspan="1" colspan="1">numpy</th></tr><tr><td rowspan="1" colspan="1"><a href="#arrays" shape="rect">arrays</a></td><td rowspan="1" colspan="1">matrix (ndims = 1)</td><td rowspan="1" colspan="1">vector</td><td rowspan="1" colspan="1">list</td></tr><tr><td rowspan="1" colspan="1"><a href="#multidimensional-arrays" shape="rect">multidimensional arrays</a></td><td rowspan="1" colspan="1">matrix</td><td rowspan="1" colspan="1">array</td><td rowspan="1" colspan="1">np.array</td></tr><tr><td rowspan="1" colspan="1"><a href="#vectors" shape="rect">vectors</a></td><td rowspan="1" colspan="1">matrix (ndims = 1)</td><td rowspan="1" colspan="1">vector</td><td rowspan="1" colspan="1">np.array (ndim = 1)</td></tr><tr><td rowspan="1" colspan="1"><a href="#matrices" shape="rect">matrices</a></td><td rowspan="1" colspan="1">matrix (ndims = 2)</td><td rowspan="1" colspan="1">matrix</td><td rowspan="1" colspan="1">np.matrix</td></tr></table><p><a name="array-elem-type-note" shape="rect" id="array-elem-type-note"></a></p>
<h2 id="toc79"><span><a href="#array-elem-type" shape="rect">element type</a></span></h2>
<p>How to get the type of the elements of an array.</p>
<p><a name="permitted-array-elem-types-note" shape="rect" id="permitted-array-elem-types-note"></a></p>
<h2 id="toc80"><span><a href="#permitted-array-elem-types" shape="rect">permitted element types</a></span></h2>
<p>Permitted data types for array elements.</p>
<p><strong>matlab:</strong></p>
<p>Arrays in Octave can only contain numeric elements.</p>
<p>Array literals can have a nested structure, but Octave will flatten them. The following literals create the same array:</p>
<div class="code">
<pre xml:space="preserve">
<code>[ 1 2 3 [ 4 5 6] ]
[ 1 2 3 4 5 6 ]</code>
</pre></div>
<p>Logical values can be put into an array because <em>true</em> and <em>false</em> are synonyms for 1 and 0. Thus the following literals create the same arrays:</p>
<div class="code">
<pre xml:space="preserve">
<code>[ true false false ]
[ 1 0 0 ]</code>
</pre></div>
<p>If a string is encountered in an array literal, the string is treated as an array of ASCII values and it is concatenated with other ASCII values to produce as string. The following literals all create the same string:</p>
<div class="code">
<pre xml:space="preserve">
<code>[ 'foo', 98, 97, 114]
[ 'foo', 'bar' ]
'foobar'</code>
</pre></div>
<p>If the other numeric values in an array literal that includes a string are not integer values that fit into a ASCII byte, then they are converted to byte sized values.</p>
<p><strong>r:</strong></p>
<p>Array literals can have a nested structure, but R will flatten them. The following literals produce the same array of 6 elements:</p>
<div class="code">
<pre xml:space="preserve">
<code>c(1,2,3,c(4,5,6))
c(1,2,3,4,5,6)</code>
</pre></div>
<p>If an array literal contains a mixture of booleans and numbers, then the boolean literals will be converted to 1 (for TRUE and T) and 0 (for FALSE and F).</p>
<p>If an array literal contains strings and either booleans or numbers, then the booleans and numbers will be converted to their string representations. For the booleans the string representations are "TRUE'" and "FALSE".</p>
<p><a name="array-literal-note" shape="rect" id="array-literal-note"></a></p>
<h2 id="toc81"><span><a href="#array-literal" shape="rect">literal</a></span></h2>
<p>The syntax, if any, for an array literal.</p>
<p><strong>matlab:</strong></p>
<p>The array literal</p>
<div class="code">
<pre xml:space="preserve">
<code>[1,'foo',3]</code>
</pre></div>
<br />
will create an array with 5 elements of class <em>char</em>.
<p><strong>r:</strong></p>
<p>The array literal</p>
<div class="code">
<pre xml:space="preserve">
<code>c(1,'foo',3)</code>
</pre></div>
<p>will create an array of 3 elements of class <em>character</em>, which is the R string type.</p>
<p><a name="array-size-note" shape="rect" id="array-size-note"></a></p>
<h2 id="toc82"><span><a href="#array-size" shape="rect">size</a></span></h2>
<p>How to get the number of values in an array.</p>
<p><a name="array-empty-test-note" shape="rect" id="array-empty-test-note"></a></p>
<h2 id="toc83"><span><a href="#array-empty-test" shape="rect">empty test</a></span></h2>
<p><a name="array-lookup-note" shape="rect" id="array-lookup-note"></a></p>
<h2 id="toc84"><span><a href="#array-lookup" shape="rect">lookup</a></span></h2>
<p><a name="array-update-note" shape="rect" id="array-update-note"></a></p>
<h2 id="toc85"><span><a href="#array-update" shape="rect">update</a></span></h2>
<p><a name="array-out-of-bounds-note" shape="rect" id="array-out-of-bounds-note"></a></p>
<h2 id="toc86"><span><a href="#array-out-of-bounds" shape="rect">out-of-bounds behavior</a></span></h2>
<p><a name="array-element-index-note" shape="rect" id="array-element-index-note"></a></p>
<h2 id="toc87"><span><a href="#array-element-index" shape="rect">index of element</a></span></h2>
<p><a name="array-slice-note" shape="rect" id="array-slice-note"></a></p>
<h2 id="toc88"><span><a href="#array-slice" shape="rect">slice</a></span></h2>
<p><a name="array-slice-to-end-note" shape="rect" id="array-slice-to-end-note"></a></p>
<h2 id="toc89"><span><a href="#array-slice-to-end" shape="rect">slice to end</a></span></h2>
<p><a name="array-back-note" shape="rect" id="array-back-note"></a></p>
<h2 id="toc90"><span><a href="#array-back" shape="rect">manipulate back</a></span></h2>
<p><a name="array-front-note" shape="rect" id="array-front-note"></a></p>
<h2 id="toc91"><span><a href="#array-front" shape="rect">manipulate front</a></span></h2>
<p><a name="array-concatenation-note" shape="rect" id="array-concatenation-note"></a></p>
<h2 id="toc92"><span><a href="#array-concatenation" shape="rect">concatenate</a></span></h2>
<p><a name="array-replication-note" shape="rect" id="array-replication-note"></a></p>
<h2 id="toc93"><span><a href="#array-replication" shape="rect">replicate</a></span></h2>
<p><a name="array-copy-note" shape="rect" id="array-copy-note"></a></p>
<h2 id="toc94"><span><a href="#array-copy" shape="rect">copy</a></span></h2>
<p>How to make an address copy, a shallow copy, and a deep copy of an array.</p>
<p>After an address copy is made, modifications to the copy also modify the original array.</p>
<p>After a shallow copy is made, the addition, removal, or replacement of elements in the copy does not modify of the original array. However, if elements in the copy are modified, those elements are also modified in the original array.</p>
<p>A deep copy is a recursive copy. The original array is copied and a deep copy is performed on all elements of the array. No change to the contents of the copy will modify the contents of the original array.</p>
<p><strong>r:</strong></p>
<p>R does not provide a way to perform an address copy.</p>
<p>Because arrays cannot be elements of arrays, there is no distinction between a shallow copy and a deep copy.</p>
<p><a name="arithmetic-sequences-note" shape="rect" id="arithmetic-sequences-note"></a></p>
<h1 id="toc95"><span><a href="#arithmetic-sequences" shape="rect">Arithmetic Sequences</a></span></h1>
<p>An arithmetic sequence is a sequence of numeric values in which consecutive terms have a constant difference.</p>
<p><a name="arith-seq-diff-one-note" shape="rect" id="arith-seq-diff-one-note"></a></p>
<h2 id="toc96"><span>unit difference</span></h2>
<p>An arithmetic sequence with a difference of 1.</p>
<h2 id="toc97"><span>difference of 10</span></h2>
<p>An arithmetic sequence with a difference of 10.</p>
<h2 id="toc98"><span>difference of 0.1</span></h2>
<p>An arithmetic sequence with a difference of 0.1.</p>
<h2 id="toc99"><span>iterate</span></h2>
<p>How to iterate over an arithmetic sequence.</p>
<h2 id="toc100"><span>convert to array</span></h2>
<p>How to convert an arithmetic sequence to an array.</p>
<p><a name="multidimensional-arrays-note" shape="rect" id="multidimensional-arrays-note"></a></p>
<h1 id="toc101"><span><a href="#multidimensional-arrays" shape="rect">Multidimensional Arrays</a></span></h1>
<p>Multidimensional arrays are a generalization of arrays which map tuples of integers to values. All tuples in the domain of a multidimensional array have the same length; this length is the dimension of the array.</p>
<p>The multidimensional arrays described in this sheet are homogeneous, meaning that the values are all of the same type. This restriction allows the implementation to store the values of the multidimensional array in a contiguous region of memory without the use of references or points.</p>
<p>Multidimensional arrays should be contrasted with nested arrays. When arrays are nested, the innermost nested arrays contain the values and the other arrays contain references to arrays. The syntax for looking up a value is usually different:</p>
<div class="code">
<pre xml:space="preserve">
<code># nested:
a[1][2]

# multidimensional:
a[1, 2]</code>
</pre></div>
<p><a name="multidimensional-array-elem-type-note" shape="rect" id="multidimensional-array-elem-type-note"></a></p>
<h2 id="toc102"><span><a href="#multidimensional-array-elem-type" shape="rect">element type</a></span></h2>
<p>How to get the type of the values stored in a multidimensional array.</p>
<p><strong>r:</strong></p>
<p><a name="1d-array-literal-note" shape="rect" id="1d-array-literal-note"></a></p>
<h2 id="toc103"><span><a href="#1d-array-literal" shape="rect">literal—1d</a></span></h2>
<p><a name="2d-array-literal-note" shape="rect" id="2d-array-literal-note"></a></p>
<h2 id="toc104"><span><a href="#2d-array-literal" shape="rect">literal—2d</a></span></h2>
<p><a name="2d-construct-seq-note" shape="rect" id="2d-construct-seq-note"></a></p>
<h2 id="toc105"><span><a href="#2d-construct-seq" shape="rect">construct from sequence—2d</a></span></h2>
<p><a name="3d-construct-seq-note" shape="rect" id="3d-construct-seq-note"></a></p>
<h2 id="toc106"><span><a href="#3d-construct-seq" shape="rect">construct from sequence—3d</a></span></h2>
<p><a name="2d-construct-nested-seq-note" shape="rect" id="2d-construct-nested-seq-note"></a></p>
<h2 id="toc107"><span><a href="#2d-construct-nested-seq" shape="rect">construct from nested sequences—2d</a></span></h2>
<p><a name="3d-construct-nested-seq-note" shape="rect" id="3d-construct-nested-seq-note"></a></p>
<h2 id="toc108"><span><a href="#3d-construct-nested-seq" shape="rect">construct from nested sequences—3d</a></span></h2>
<p><a name="2d-construct-rows-note" shape="rect" id="2d-construct-rows-note"></a></p>
<h2 id="toc109"><span><a href="#2d-construct-rows" shape="rect">construct from rows—2d</a></span></h2>
<p><a name="2d-construct-columns-note" shape="rect" id="2d-construct-columns-note"></a></p>
<h2 id="toc110"><span><a href="#2d-construct-columns" shape="rect">construct from columns—2d</a></span></h2>
<p><a name="2d-construct-subarrays-note" shape="rect" id="2d-construct-subarrays-note"></a></p>
<h2 id="toc111"><span><a href="#2d-construct-subarrays" shape="rect">construct from subarrays—2d</a></span></h2>
<p><a name="3d-construct-2d-arrays-note" shape="rect" id="3d-construct-2d-arrays-note"></a></p>
<h2 id="toc112"><span><a href="#3d-construct-2d-arrays" shape="rect">construct 3d array from 2d arrays</a></span></h2>
<p><a name="multidimensional-array-size-note" shape="rect" id="multidimensional-array-size-note"></a></p>
<h2 id="toc113"><span><a href="#multidimensional-array-size" shape="rect">size</a></span></h2>
<p><a name="1d-lookup-note" shape="rect" id="1d-lookup-note"></a></p>
<h2 id="toc114"><span><a href="#1d-lookup" shape="rect">lookup—1d</a></span></h2>
<p><a name="2d-lookup-note" shape="rect" id="2d-lookup-note"></a></p>
<h2 id="toc115"><span><a href="#2d-lookup" shape="rect">lookup—2d</a></span></h2>
<p><a name="1d-lookup-2d-array-note" shape="rect" id="1d-lookup-2d-array-note"></a></p>
<h2 id="toc116"><span><a href="#1d-lookup-2d-array" shape="rect">1d lookup on 2d array</a></span></h2>
<p><a name="2d-update-note" shape="rect" id="2d-update-note"></a></p>
<h2 id="toc117"><span><a href="#2d-update" shape="rect">update—2d</a></span></h2>
<p><a name="multidimensional-array-out-of-bounds-note" shape="rect" id="multidimensional-array-out-of-bounds-note"></a></p>
<h2 id="toc118"><span><a href="#multidimensional-array-out-of-bounds" shape="rect">out-of-bounds behavior</a></span></h2>
<p><a name="multidimensional-array-slice-note" shape="rect" id="multidimensional-array-slice-note"></a></p>
<h2 id="toc119"><span><a href="#multidimensional-array-slice" shape="rect">slice</a></span></h2>
<p><a name="multidimensional-array-slice-to-end-note" shape="rect" id="multidimensional-array-slice-to-end-note"></a></p>
<h2 id="toc120"><span><a href="#multidimensional-array-slice-to-end" shape="rect">slice to end</a></span></h2>
<p><a name="multidimensional-array-slice-subarray-note" shape="rect" id="multidimensional-array-slice-subarray-note"></a></p>
<h2 id="toc121"><span><a href="#multidimensional-array-slice-subarray" shape="rect">slice subarray</a></span></h2>
<p><a name="multidimensional-array-transpose-note" shape="rect" id="multidimensional-array-transpose-note"></a></p>
<h2 id="toc122"><span><a href="#multidimensional-array-transpose" shape="rect">transpose</a></span></h2>
<p><a name="multidimensional-array-swap-axes-note" shape="rect" id="multidimensional-array-swap-axes-note"></a></p>
<h2 id="toc123"><span><a href="#multidimensional-array-swap-axes" shape="rect">swap axes</a></span></h2>
<p><a name="2d-flip-note" shape="rect" id="2d-flip-note"></a></p>
<h2 id="toc124"><span><a href="#2d-flip" shape="rect">flip—2d</a></span></h2>
<p><a name="3d-flip-note" shape="rect" id="3d-flip-note"></a></p>
<h2 id="toc125"><span><a href="#3d-flip" shape="rect">flip—3d</a></span></h2>
<h2 id="toc126"><span>circular shift—2d</span></h2>
<h2 id="toc127"><span>rotate—2d</span></h2>
<h2 id="toc128"><span>apply function element-wise</span></h2>
<h2 id="toc129"><span>apply function to linear subarrays</span></h2>
<p><a name="dictionaries-note" shape="rect" id="dictionaries-note"></a></p>
<h1 id="toc130"><span><a href="#dictionaries" shape="rect">Dictionaries</a></span></h1>
<p><a name="dict-literal-note" shape="rect" id="dict-literal-note"></a></p>
<h2 id="toc131"><span><a href="#dict-literal" shape="rect">dictionary literal</a></span></h2>
<p>The syntax for a dictionary literal.</p>
<p><a name="dict-lookup-note" shape="rect" id="dict-lookup-note"></a></p>
<h2 id="toc132"><span><a href="#dict-lookup" shape="rect">dictionary lookup</a></span></h2>
<p>How to use a key to lookup a value in a dictionary.</p>
<p><a name="data-frames-note" shape="rect" id="data-frames-note"></a></p>
<h1 id="toc133"><span><a href="#data-frames" shape="rect">Data Frames</a></span></h1>
<table class="wiki-content-table"><tr><th rowspan="1" colspan="1"></th><th rowspan="1" colspan="1">r</th><th rowspan="1" colspan="1">pandas</th></tr><tr><td rowspan="1" colspan="1">ordered dictionary</td><td rowspan="1" colspan="1">list()</td><td rowspan="1" colspan="1">Series()</td></tr><tr><td rowspan="1" colspan="1">data frame</td><td rowspan="1" colspan="1">data frame</td><td rowspan="1" colspan="1">DataFrame()</td></tr><tr><td rowspan="1" colspan="1">data frame column type</td><td rowspan="1" colspan="1">vector</td><td rowspan="1" colspan="1">Series</td></tr><tr><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1">row.names</td><td rowspan="1" colspan="1">Index()</td></tr><tr><td rowspan="1" colspan="1">hierarchical index</td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1">factor (ordered and unordered)</td><td rowspan="1" colspan="1"></td></tr></table><p><a name="construct-from-column-arrays-note" shape="rect" id="construct-from-column-arrays-note"></a></p>
<h2 id="toc134"><span><a href="#construct-from-column-arrays" shape="rect">construct from column arrays</a></span></h2>
<p>How to construct a data frame from a set of arrays representing the columns.</p>
<p><a name="construct-from-row-tuples-note" shape="rect" id="construct-from-row-tuples-note"></a></p>
<h2 id="toc135"><span><a href="#construct-from-row-tuples" shape="rect">construct from row tuples</a></span></h2>
<p><a name="column-names-as-array-note" shape="rect" id="column-names-as-array-note"></a></p>
<h2 id="toc136"><span><a href="#column-names-as-array" shape="rect">column names as array</a></span></h2>
<p>How to show the names of the columns.</p>
<p><a name="access-column-as-array-note" shape="rect" id="access-column-as-array-note"></a></p>
<h2 id="toc137"><span><a href="#access-column-as-array" shape="rect">access column as array</a></span></h2>
<p>How to access a column in a data frame.</p>
<p><a name="access-row-as-tuple-note" shape="rect" id="access-row-as-tuple-note"></a></p>
<h2 id="toc138"><span><a href="#access-row-as-tuple" shape="rect">access row as tuple</a></span></h2>
<p>How to access a row in a data frame.</p>
<p><strong>r:</strong></p>
<p><em>people[1, ]</em> returns the 1st row from the data frame <em>people</em> as a new data frame with one row. This can be converted to a list using the function <em>as.list</em>. There is often no need because lists and one row data frames have nearly the same behavior.</p>
<p><a name="access-datum-note" shape="rect" id="access-datum-note"></a></p>
<h2 id="toc139"><span><a href="#access-datum" shape="rect">access datum</a></span></h2>
<p>How to access a single datum in a data frame; i.e. the value in a column of a single row.</p>
<p><a name="order-rows-by-column-note" shape="rect" id="order-rows-by-column-note"></a></p>
<h2 id="toc140"><span><a href="#order-rows-by-column" shape="rect">order rows by column</a></span></h2>
<p>How to sort the rows in a data frame according to the values in a specified column.</p>
<p><a name="order-rows-by-multiple-columns-note" shape="rect" id="order-rows-by-multiple-columns-note"></a></p>
<h2 id="toc141"><span><a href="#order-rows-by-multiple-columns" shape="rect">order rows by multiple columns</a></span></h2>
<p><a name="order-rows-descending-order-note" shape="rect" id="order-rows-descending-order-note"></a></p>
<h2 id="toc142"><span><a href="#order-rows-descending-order" shape="rect">order rows in descending order</a></span></h2>
<p>How to sort the rows in descending order according to the values in a specified column.</p>
<p><a name="limit-rows-note" shape="rect" id="limit-rows-note"></a></p>
<h2 id="toc143"><span><a href="#limit-rows" shape="rect">limit rows</a></span></h2>
<p>How to select the first <em>n</em> rows according to some ordering.</p>
<p><a name="offset-rows-note" shape="rect" id="offset-rows-note"></a></p>
<h2 id="toc144"><span><a href="#offset-rows" shape="rect">offset rows</a></span></h2>
<p>How to select rows starting at offset <em>n</em> according to some ordering.</p>
<p><a name="attach-columns-note" shape="rect" id="attach-columns-note"></a></p>
<h2 id="toc145"><span><a href="#attach-columns" shape="rect">attach columns</a></span></h2>
<p>How to make column name a variable in the current scope which refers to the column as an array.</p>
<p><strong>r:</strong></p>
<p>Each column of the data frame is copies into a variable named after the column containing the column as a vector. Modifying the data in the variable does not alter the original data frame.</p>
<p><a name="detach-columns-note" shape="rect" id="detach-columns-note"></a></p>
<h2 id="toc146"><span><a href="#detach-columns" shape="rect">detach columns</a></span></h2>
<p>How to remove attached column names from the current scope.</p>
<p><a name="spreadsheet-editor-note" shape="rect" id="spreadsheet-editor-note"></a></p>
<h2 id="toc147"><span><a href="#spreadsheet-editor" shape="rect">spreadsheet editor</a></span></h2>
<p>How to view and edit the data frame in a spreadsheet.</p>
<p><a name="import-export-note" shape="rect" id="import-export-note"></a></p>
<h1 id="toc148"><span><a href="#import-export" shape="rect">Import and Export</a></span></h1>
<p><a name="import-tab-delimited-note" shape="rect" id="import-tab-delimited-note"></a></p>
<h2 id="toc149"><span><a href="#import-tab-delimited" shape="rect">import tab delimited file</a></span></h2>
<p>Load a data frame from a tab delimited file.</p>
<p><a name="import-csv-note" shape="rect" id="import-csv-note"></a></p>
<h2 id="toc150"><span><a href="#import-csv" shape="rect">import comma-separated values file</a></span></h2>
<p>Load a data frame from a CSV file.</p>
<p><a name="column-separator-note" shape="rect" id="column-separator-note"></a></p>
<h2 id="toc151"><span><a href="#column-separator" shape="rect">set column separator</a></span></h2>
<p>How to set the column separator when importing a delimited file.</p>
<p><a name="quote-char-note" shape="rect" id="quote-char-note"></a></p>
<h2 id="toc152"><span><a href="#quote-char" shape="rect">set quote character</a></span></h2>
<p>How to change the quote character. Quoting is used when strings contain the column separator or the line terminator.</p>
<p><a name="no-header-note" shape="rect" id="no-header-note"></a></p>
<h2 id="toc153"><span><a href="#no-header" shape="rect">import file w/o header</a></span></h2>
<p>How to import a file that lacks a header.</p>
<p><a name="set-column-names-note" shape="rect" id="set-column-names-note"></a></p>
<h2 id="toc154"><span><a href="#set-column-names" shape="rect">set column names</a></span></h2>
<p>How to set the column names.</p>
<p><a name="set-column-types-note" shape="rect" id="set-column-types-note"></a></p>
<h2 id="toc155"><span><a href="#set-column-types" shape="rect">set column types</a></span></h2>
<p>How to indicate the type of the columns.</p>
<p><strong>r:</strong></p>
<p>If the column types are not set or if the type is set to NA or NULL, then the type will be set to logical, integer, numeric, complex, or factor.</p>
<p><a name="recognize-null-values-note" shape="rect" id="recognize-null-values-note"></a></p>
<h2 id="toc156"><span><a href="#recognize-null-values" shape="rect">recognize null values</a></span></h2>
<p>Specify the input values which should be converted to null values.</p>
<p><a name="unequal-row-length-note" shape="rect" id="unequal-row-length-note"></a></p>
<h2 id="toc157"><span><a href="#unequal-row-length" shape="rect">unequal row length behavior</a></span></h2>
<p>What happen when a row of input has less than or more than the expected number of columns.</p>
<p><a name="skip-comment-lines-note" shape="rect" id="skip-comment-lines-note"></a></p>
<h2 id="toc158"><span><a href="#skip-comment-lines" shape="rect">skip comment lines</a></span></h2>
<p>How to skip comment lines.</p>
<p><a name="skip-rows-note" shape="rect" id="skip-rows-note"></a></p>
<h2 id="toc159"><span><a href="#skip-rows" shape="rect">skip rows</a></span></h2>
<p><a name="max-rows-to-read-note" shape="rect" id="max-rows-to-read-note"></a></p>
<h2 id="toc160"><span><a href="#max-rows-to-read" shape="rect">maximum rows to read</a></span></h2>
<p><a name="index-column-note" shape="rect" id="index-column-note"></a></p>
<h2 id="toc161"><span><a href="#index-column" shape="rect">index column</a></span></h2>
<p><a name="export-tab-delimited-note" shape="rect" id="export-tab-delimited-note"></a></p>
<h2 id="toc162"><span><a href="#export-tab-delimited" shape="rect">export tab delimited file</a></span></h2>
<p><a name="export-csv-note" shape="rect" id="export-csv-note"></a></p>
<h2 id="toc163"><span><a href="#export-csv" shape="rect">export comma-separated values file</a></span></h2>
<p>Save a data frame to a CSV file.</p>
<p><strong>r:</strong></p>
<p>If row.names is not set to F, the initial column will be the row number as a string starting from "1".</p>
<p><a name="relational-algebra-note" shape="rect" id="relational-algebra-note"></a></p>
<h1 id="toc164"><span><a href="#relational-algebra" shape="rect">Relational Algebra</a></span></h1>
<p><a name="data-frame-map-note" shape="rect" id="data-frame-map-note"></a></p>
<h2 id="toc165"><span><a href="#data-frame-map" shape="rect">map data frame</a></span></h2>
<p>How to apply a mapping transformation to the rows of a data set.</p>
<p><a name="data-set-filter-note" shape="rect" id="data-set-filter-note"></a></p>
<h2 id="toc166"><span><a href="#data-set-filter" shape="rect">filter data set</a></span></h2>
<p>How to select the rows of a data set that satisfy a predicate.</p>
<p><a name="aggregation-note" shape="rect" id="aggregation-note"></a></p>
<h1 id="toc167"><span><a href="#aggregation" shape="rect">Aggregation</a></span></h1>
<p><a name="functions-note" shape="rect" id="functions-note"></a></p>
<h1 id="toc168"><span><a href="#functions" shape="rect">Functions</a></span></h1>
<p><a name="definition" shape="rect" id="definition"></a></p>
<h2 id="toc169"><span>definition</span></h2>
<p><a name="invocation" shape="rect" id="invocation"></a></p>
<h2 id="toc170"><span>invocation</span></h2>
<p><a name="function-value" shape="rect" id="function-value"></a></p>
<h2 id="toc171"><span>function value</span></h2>
<p><a name="execution-control-note" shape="rect" id="execution-control-note"></a></p>
<h1 id="toc172"><span><a href="#execution-control" shape="rect">Execution Control</a></span></h1>
<p><a name="if-note" shape="rect" id="if-note"></a></p>
<h2 id="toc173"><span><a href="#if" shape="rect">if</a></span></h2>
<p>How to write a branch statement.</p>
<p><a name="while-note" shape="rect" id="while-note"></a></p>
<h2 id="toc174"><span><a href="#while" shape="rect">while</a></span></h2>
<p>How to write a conditional loop.</p>
<p><a name="for-note" shape="rect" id="for-note"></a></p>
<h2 id="toc175"><span><a href="#for" shape="rect">for</a></span></h2>
<p>How to write a C-style for statement.</p>
<p><a name="break-continue-note" shape="rect" id="break-continue-note"></a></p>
<h2 id="toc176"><span><a href="#break-continue" shape="rect">break/continue</a></span></h2>
<p>How to break out of a loop. How to jump to the next iteration of a loop.</p>
<p><a name="raise-exc-note" shape="rect" id="raise-exc-note"></a></p>
<h2 id="toc177"><span><a href="#raise-exc" shape="rect">raise exception</a></span></h2>
<p>How to raise an exception.</p>
<p><a name="handle-exc-note" shape="rect" id="handle-exc-note"></a></p>
<h2 id="toc178"><span><a href="#handle-exc" shape="rect">handle exception</a></span></h2>
<p>How to handle an exception.</p>
<p><a name="finally-note" shape="rect" id="finally-note"></a></p>
<h2 id="toc179"><span><a href="#finally" shape="rect">finally block</a></span></h2>
<p>How to write code that executes even if an exception is raised.</p>
<p><a name="file-handle-note" shape="rect" id="file-handle-note"></a></p>
<h1 id="toc180"><span><a href="#file-handle" shape="rect">File Handles</a></span></h1>
<p><a name="std-file-handles-note" shape="rect" id="std-file-handles-note"></a></p>
<h2 id="toc181"><span><a href="#std-file-handles" shape="rect">standard file handles</a></span></h2>
<p>Standard input, standard output, and standard error.</p>
<p><a name="read-line-stdin-note" shape="rect" id="read-line-stdin-note"></a></p>
<h2 id="toc182"><span><a href="#read-line-stdin" shape="rect">read line from stdin</a></span></h2>
<p><a name="write-line-stdout-note" shape="rect" id="write-line-stdout-note"></a></p>
<h2 id="toc183"><span><a href="#write-line-stdout" shape="rect">write line to stdout</a></span></h2>
<p><a name="printf-note" shape="rect" id="printf-note"></a></p>
<h2 id="toc184"><span><a href="#printf" shape="rect">write formatted string to stdout</a></span></h2>
<p><a name="open-file-note" shape="rect" id="open-file-note"></a></p>
<h2 id="toc185"><span><a href="#open-file" shape="rect">open file for reading</a></span></h2>
<p><a name="open-file-write-note" shape="rect" id="open-file-write-note"></a></p>
<h2 id="toc186"><span><a href="#open-file-write" shape="rect">open file for writing</a></span></h2>
<p><a name="open-file-append-note" shape="rect" id="open-file-append-note"></a></p>
<h2 id="toc187"><span><a href="#open-file-append" shape="rect">open file for appending</a></span></h2>
<p><a name="close-file-note" shape="rect" id="close-file-note"></a></p>
<h2 id="toc188"><span><a href="#close-file" shape="rect">close file</a></span></h2>
<p><a name="io-err-note" shape="rect" id="io-err-note"></a></p>
<h2 id="toc189"><span><a href="#io-err" shape="rect">i/o errors</a></span></h2>
<p><a name="read-line-note" shape="rect" id="read-line-note"></a></p>
<h2 id="toc190"><span><a href="#read-line" shape="rect">read line</a></span></h2>
<p><a name="file-iterate-note" shape="rect" id="file-iterate-note"></a></p>
<h2 id="toc191"><span><a href="#file-iterate" shape="rect">iterate over file by line</a></span></h2>
<p><a name="read-file-array-note" shape="rect" id="read-file-array-note"></a></p>
<h2 id="toc192"><span><a href="#read-file-array" shape="rect">read file into array of strings</a></span></h2>
<p><a name="write-str-note" shape="rect" id="write-str-note"></a></p>
<h2 id="toc193"><span><a href="#write-str" shape="rect">write string</a></span></h2>
<p><a name="write-line-note" shape="rect" id="write-line-note"></a></p>
<h2 id="toc194"><span><a href="#write-line" shape="rect">write line</a></span></h2>
<p><a name="flush-note" shape="rect" id="flush-note"></a></p>
<h2 id="toc195"><span><a href="#flush" shape="rect">flush file handle</a></span></h2>
<p><a name="seek-note" shape="rect" id="seek-note"></a></p>
<h2 id="toc196"><span><a href="#seek" shape="rect">file handle position</a></span></h2>
<p><a name="redirect-stdout-to-file-note" shape="rect" id="redirect-stdout-to-file-note"></a></p>
<h2 id="toc197"><span><a href="#redirect-stdout-to-file" shape="rect">redirect stdout to file</a></span></h2>
<p><a name="directories-note" shape="rect" id="directories-note"></a></p>
<h1 id="toc198"><span><a href="#directories" shape="rect">Directories</a></span></h1>
<p><a name="working-dir-note" shape="rect" id="working-dir-note"></a></p>
<h2 id="toc199"><span><a href="#working-dir" shape="rect">working directory</a></span></h2>
<p>How to get and set the working directory.</p>
<p><a name="processes-environment-note" shape="rect" id="processes-environment-note"></a></p>
<h1 id="toc200"><span><a href="#processes-environment" shape="rect">Processes and Environment</a></span></h1>
<p><a name="cmd-line-arg-note" shape="rect" id="cmd-line-arg-note"></a></p>
<h2 id="toc201"><span><a href="#cmd-line-arg" shape="rect">command line arguments</a></span></h2>
<p>How to get the command line arguments.</p>
<p><a name="env-var-note" shape="rect" id="env-var-note"></a></p>
<h2 id="toc202"><span><a href="#env-var" shape="rect">environment variables</a></span></h2>
<p>How to get and set and environment variable.</p>
<p><a name="libraries-namespaces-note" shape="rect" id="libraries-namespaces-note"></a></p>
<h1 id="toc203"><span><a href="#libraries-namespaces" shape="rect">Libraries and Namespaces</a></span></h1>
<p><a name="load-lib-note" shape="rect" id="load-lib-note"></a></p>
<h2 id="toc204"><span><a href="#load-lib" shape="rect">load library</a></span></h2>
<p>How to load a library.</p>
<p><a name="list-lib-note" shape="rect" id="list-lib-note"></a></p>
<h2 id="toc205"><span><a href="#list-lib" shape="rect">list loaded libraries</a></span></h2>
<p>Show the list of libraries which have been loaded.</p>
<p><a name="lib-path-note" shape="rect" id="lib-path-note"></a></p>
<h2 id="toc206"><span><a href="#lib-path" shape="rect">library search path</a></span></h2>
<p>The list of directories the interpreter will search looking for a library to load.</p>
<p><a name="source-file-note" shape="rect" id="source-file-note"></a></p>
<h2 id="toc207"><span><a href="#source-file" shape="rect">source file</a></span></h2>
<p>How to source a file.</p>
<p><strong>r:</strong></p>
<p>When sourcing a file, the suffix if any must be specified, unlike when loading library. Also, a library may contain a shared object, but a sourced file must consist of just R source code.</p>
<p><a name="install-pkg-note" shape="rect" id="install-pkg-note"></a></p>
<h2 id="toc208"><span><a href="#install-pkg" shape="rect">install package</a></span></h2>
<p>How to install a package.</p>
<p><a name="list-pkg-note" shape="rect" id="list-pkg-note"></a></p>
<h2 id="toc209"><span><a href="#list-pkg" shape="rect">list installed packages</a></span></h2>
<p>How to list the packages which have been installed.</p>
<p><a name="reflection-note" shape="rect" id="reflection-note"></a></p>
<h1 id="toc210"><span><a href="#reflection" shape="rect">Reflection</a></span></h1>
<p><a name="data-type-note" shape="rect" id="data-type-note"></a></p>
<h2 id="toc211"><span><a href="#data-type" shape="rect">data type</a></span></h2>
<p>How to get the data type of a value.</p>
<p><strong>r:</strong></p>
<p>For vectors <tt>class</tt> returns the <em>mode</em> of the vector which is the type of data contained in it. The possible modes are</p>
<ul><li>numeric</li><li>complex</li><li>logical</li><li>character</li><li>raw</li></ul><p>Some of the more common class types for non-vector entities are:</p>
<ul><li>matrix</li><li>array</li><li>list</li><li>factor</li><li>data.frame</li></ul><p><a name="attr-note" shape="rect" id="attr-note"></a></p>
<h2 id="toc212"><span><a href="#attr" shape="rect">attributes</a></span></h2>
<p>How to get the attributes for an object.</p>
<p><strong>r:</strong></p>
<p>Arrays and vectors do not have attributes.</p>
<p><a name="method-note" shape="rect" id="method-note"></a></p>
<h2 id="toc213"><span><a href="#methods" shape="rect">methods</a></span></h2>
<p>How to get the methods for an object.</p>
<p><a name="var-in-scope-note" shape="rect" id="var-in-scope-note"></a></p>
<h2 id="toc214"><span><a href="#var-in-scope" shape="rect">variables in scope</a></span></h2>
<p>How to list the variables in scope.</p>
<p><a name="undef-var-note" shape="rect" id="undef-var-note"></a></p>
<h2 id="toc215"><span><a href="#undef-var" shape="rect">undefine variable</a></span></h2>
<p>How to undefine a variable.</p>
<p><a name="undef-all-var-note" shape="rect" id="undef-all-var-note"></a></p>
<h2 id="toc216"><span><a href="#undef-all-var" shape="rect">undefine all variables</a></span></h2>
<p>How to undefine all variables.</p>
<p><a name="eval-note" shape="rect" id="eval-note"></a></p>
<h2 id="toc217"><span><a href="#eval" shape="rect">eval</a></span></h2>
<p>How to interpret a string as source code and execute it.</p>
<p><a name="func-doc-note" shape="rect" id="func-doc-note"></a></p>
<h2 id="toc218"><span><a href="#func-doc" shape="rect">function documentation</a></span></h2>
<p>How to get the documentation for a function.</p>
<p><a name="ls-lib-note" shape="rect" id="ls-lib-note"></a></p>
<h2 id="toc219"><span><a href="#ls-lib" shape="rect">list library functions</a></span></h2>
<p>How to list the functions and other definitions in a library.</p>
<p><a name="grep-doc-note" shape="rect" id="grep-doc-note"></a></p>
<h2 id="toc220"><span><a href="#grep-doc" shape="rect">search documentation</a></span></h2>
<p>How to search the documentation by keyword.</p>
<p><a name="vectors-note" shape="rect" id="vectors-note"></a></p>
<h1 id="toc221"><span><a href="#vectors" shape="rect">Vectors</a></span></h1>
<p>A vector is a one dimensional array which supports these operations:</p>
<ul><li>addition on vectors of the same length</li><li>scalar multiplication</li><li>a dot product</li><li>a norm</li></ul><p>The languages in this reference sheet provide the above operations for all one dimensional arrays which contain numeric values.</p>
<p><a name="vector-literal" shape="rect" id="vector-literal"></a></p>
<h2 id="toc222"><span>vector literal</span></h2>
<p><a name="vector-element-wise" shape="rect" id="vector-element-wise"></a></p>
<h2 id="toc223"><span>element-wise arithmetic operators</span></h2>
<p><a name="vector-scalar" shape="rect" id="vector-scalar"></a></p>
<h2 id="toc224"><span>scalar multiplication</span></h2>
<p><a name="vector-dot" shape="rect" id="vector-dot"></a></p>
<h2 id="toc225"><span>dot product</span></h2>
<p><a name="vector-cross" shape="rect" id="vector-cross"></a></p>
<h2 id="toc226"><span>cross product</span></h2>
<p><a name="vector-norms" shape="rect" id="vector-norms"></a></p>
<h2 id="toc227"><span>norms</span></h2>
<p><strong>matlab:</strong></p>
<p>The <em>norm</em> function returns the p-norm, where the second argument is <em>p</em>. If no second argument is provided, the 2-norm is returned.</p>
<p><a name="matrices-note" shape="rect" id="matrices-note"></a></p>
<h1 id="toc228"><span><a href="#matrices" shape="rect">Matrices</a></span></h1>
<p><a name="matrix-literal-constructor-note" shape="rect" id="matrix-literal-constructor-note"></a></p>
<h2 id="toc229"><span><a href="#matrix-literal-constructor" shape="rect">literal or constructor</a></span></h2>
<p>Literal syntax or constructor for creating a matrix.</p>
<p>The elements of a matrix must be specified in a linear order. If the elements of each row of the matrix are adjacent to other elements of the same row in the linear order we say the order is <em>row-major</em>. If the elements of each column are adjacent to other elements of the same column we say the order is <em>column-major</em>.</p>
<p><strong>matlab:</strong></p>
<p>Square brackets are used for matrix literals. Semicolons are used to separate rows, and commas separate row elements. Optionally, newlines can be used to separate rows and whitespace to separate row elements.</p>
<p><strong>r:</strong></p>
<p>Matrices are created by passing a vector containing all of the elements, as well as the number of rows and columns, to the <em>matrix</em> constructor.</p>
<p>If there are not enough elements in the data vector, the values will be recycled. If there are too many extra values will be ignored. However, the number of elements in the data vector must be a factor or a multiple of the number of elements in the final matrix or an error results.</p>
<p>When consuming the elements in the data vector, R will normally fill by column. To change this behavior pass a <em>byrow=T</em> argument to the <em>matrix</em> constructor:</p>
<div class="code">
<pre xml:space="preserve">
<code>A = matrix(c(1,2,3,4),nrow=2,byrow=T)</code>
</pre></div>
<p><a name="constant-matrices-note" shape="rect" id="constant-matrices-note"></a></p>
<h2 id="toc230"><span><a href="#constant-matrices" shape="rect">constant matrices</a></span></h2>
<p>How to create a matrices with zeros for entries or with ones for entries.</p>
<p><a name="diagonal-matrices-note" shape="rect" id="diagonal-matrices-note"></a></p>
<h2 id="toc231"><span><a href="#diagonal-matrices" shape="rect">diagonal matrices</a></span></h2>
<p>How to create diagonal matrices including the identity matrix.</p>
<p>A matrix is diagonal if and only if <tt>a<sub>ij</sub> = 0</tt> for all <tt>i ≠ j</tt>.</p>
<p><a name="matrix-dim-note" shape="rect" id="matrix-dim-note"></a></p>
<h2 id="toc232"><span><a href="#matrix-dim" shape="rect">dimensions</a></span></h2>
<p>How to get the dimensions of a matrix.</p>
<p><a name="matrix-access" shape="rect" id="matrix-access"></a></p>
<h2 id="toc233"><span>element access</span></h2>
<p>How to access an element of a matrix. All languages described here follow the convention from mathematics of specifying the row index before the column index.</p>
<p><strong>matlab:</strong></p>
<p>Rows and columns are indexed from one.</p>
<p><strong>r:</strong></p>
<p>Rows and columns are indexed from one.</p>
<p><a name="matrix-row-access" shape="rect" id="matrix-row-access"></a></p>
<h2 id="toc234"><span>row access</span></h2>
<p>How to access a row.</p>
<p><a name="matrix-column-access" shape="rect" id="matrix-column-access"></a></p>
<h2 id="toc235"><span>column access</span></h2>
<p>How to access a column.</p>
<p><a name="submatrix-access" shape="rect" id="submatrix-access"></a></p>
<h2 id="toc236"><span>submatrix access</span></h2>
<p>How to access a submatrix.</p>
<p><a name="matrix-scalar-multiplication" shape="rect" id="matrix-scalar-multiplication"></a></p>
<h2 id="toc237"><span>scalar multiplication</span></h2>
<p>How to multiply a matrix by a scalar.</p>
<p><a name="matrix-element-wise-operators" shape="rect" id="matrix-element-wise-operators"></a></p>
<h2 id="toc238"><span>element-wise operators</span></h2>
<p>Operators which act on two identically sized matrices element by element. Note that element-wise multiplication of two matrices is used less frequently in mathematics than matrix multiplication.</p>
<div class="code">
<pre xml:space="preserve">
<code>from numpy import array
matrix(array(A) * array(B))
matrix(array(A) / array(B))</code>
</pre></div>
<p><a name="matrix-multiplication" shape="rect" id="matrix-multiplication"></a></p>
<h2 id="toc239"><span>multiplication</span></h2>
<p>How to multiply matrices. Matrix multiplication should not be confused with element-wise multiplication of matrices. Matrix multiplication in non-commutative and only requires that the number of columns of the matrix on the left match the number of rows of the matrix. Element-wise multiplication, by contrast, is commutative and requires that the dimensions of the two matrices be equal.</p>
<p><a name="kronecker-product" shape="rect" id="kronecker-product"></a></p>
<h2 id="toc240"><span>kronecker product</span></h2>
<p>The <a href="http://en.wikipedia.org/wiki/Kronecker_product" shape="rect">Kronecker product</a> is a non-commutative operation defined on any two matrices. If A is m x n and B is p x q, then the Kronecker product is a matrix with dimensions mp x nq.</p>
<p><a name="matrix-comparison" shape="rect" id="matrix-comparison"></a></p>
<h2 id="toc241"><span>comparison</span></h2>
<p>How to test two matrices for equality.</p>
<p><strong>matlab:</strong></p>
<p>== and != perform entry-wise comparison. The result of using either operator on two matrices is a matrix of boolean values.</p>
<p>~= is a synonym for !=.</p>
<p><strong>r:</strong></p>
<p>== and != perform entry-wise comparison. The result of using either operator on two matrices is a matrix of boolean values.</p>
<p><a name="matrix-norms" shape="rect" id="matrix-norms"></a></p>
<h2 id="toc242"><span>norms</span></h2>
<p>How to compute the 1-norm, the 2-norm, the infinity norm, and the frobenius norm.</p>
<p><strong>matlab:</strong></p>
<p><em>norm(A)</em> is the same as <em>norm(A,2)</em>.</p>
<p><a name="sparse-matrix-construction-note" shape="rect" id="sparse-matrix-construction-note"></a></p>
<h2 id="toc243"><span><a href="#sparse-matrix-construction" shape="rect">sparse matrix construction</a></span></h2>
<p>How to construct a sparse matrix using coordinate format.</p>
<p>Coordinate format specifies a matrix with three arrays: the row indices, the the column indices, and the values.</p>
<p><a name="sparse-matrix-decomposition-note" shape="rect" id="sparse-matrix-decomposition-note"></a></p>
<h2 id="toc244"><span><a href="#sparse-matrix-decomposition" shape="rect">sparse matrix decomposition</a></span></h2>
<p><a name="sparse-identity-matrix-note" shape="rect" id="sparse-identity-matrix-note"></a></p>
<h2 id="toc245"><span><a href="#sparse-identity-matrix" shape="rect">sparse identity matrix</a></span></h2>
<p><a name="dense-matrix-to-sparse-matrix-note" shape="rect" id="dense-matrix-to-sparse-matrix-note"></a></p>
<h2 id="toc246"><span><a href="#dense-matrix-to-sparse-matrix" shape="rect">dense matrix to sparse matrix</a></span></h2>
<p><a name="sparse-matrix-storage-note" shape="rect" id="sparse-matrix-storage-note"></a></p>
<h2 id="toc247"><span><a href="#sparse-matrix-storage" shape="rect">sparse matrix storage</a></span></h2>
<p><a name="descriptive-statistics-note" shape="rect" id="descriptive-statistics-note"></a></p>
<h1 id="toc248"><span><a href="#descriptive-statistics" shape="rect">Descriptive Statistics</a></span></h1>
<p>A statistic is a single number which summarizes a population of data. The most familiar example is the mean or average. Statistics defined for discrete populations can often be meaningfully extended to continuous distributions by replacing summations with integration.</p>
<p>An important class of statistics are the nth moments. The nth moment <span class="math-inline">
      $$\mu'_n$$
    </span> of a population of <em>k</em> values <em>x<sub>i</sub></em> with mean <em><span style="white-space: pre-wrap;">μ</span></em> is:</p>

<div class="math-inline" style="display; block;">
      $$\begin{align} \mu'_n = \sum_{i=1}^k x_i^n \end{align}$$
    </div>
<p>The nth central moment <em><span style="white-space: pre-wrap;">μ</span><sub>n</sub></em> of the same population is:</p>

<div class="math-inline" style="display; block;">
      $$\begin{align} \mu_n = \sum_{i=1}^k (x_i - \mu)^n \end{align}$$
    </div>
<p><a name="1st-moment-stats-note" shape="rect" id="1st-moment-stats-note"></a></p>
<h2 id="toc249"><span><a href="#1st-moment-stats" shape="rect">first moment statistics</a></span></h2>
<p>The sum and the mean.</p>
<p>The mean is the first moment. It is one definition of the center of the population. The median and the mode are also used to define the center. In most populations they will be close to but not identical to the mean.</p>
<p><a name="2nd-moment-stats-note" shape="rect" id="2nd-moment-stats-note"></a></p>
<h2 id="toc250"><span><a href="#2nd-moment-stats" shape="rect">second moment statistics</a></span></h2>
<p>The variance and the standard deviation. The variance is the second central moment. It is a measure of the spread or width of the population.</p>
<p>The standard deviation is the square root of the variance. It is also a measurement of population spread. The standard deviation has the same units of measurement as the data in the population.</p>
<p><a name="2nd-moment-stats-sample-note" shape="rect" id="2nd-moment-stats-sample-note"></a></p>
<h2 id="toc251"><span><a href="#2nd-moment-stats-sample" shape="rect">second moment statistics for samples</a></span></h2>
<p>The sample variance and sample standard deviation.</p>
<p><a name="skewness-note" shape="rect" id="skewness-note"></a></p>
<h2 id="toc252"><span><a href="#skewness" shape="rect">skewness</a></span></h2>
<p>The skewness of a population.</p>
<p>The skewness measures the asymmetrically of the population. The skewness will be negative, positive, or zero when the population is more spread out on the left, more spread out on the right, or similarly spread out on both sides, respectively.</p>
<p>The skewness can be calculated from the third moment and the standard deviation:</p>

<div class="math-inline" style="display; block;">
      $$\begin{align} \gamma_1 = E\Big[\Big(\frac{x - \mu}{\sigma}\Big)^3\Big] = \frac{\mu_3}{\sigma^3} \end{align}$$
    </div>
<p>When estimating the population skewness from a sample a correction factor is often used, yielding the sample skewness:</p>

<div class="math-inline" style="display; block;">
      $$\begin{align} \frac{(n(n-1))^{\frac{1}{2}}}{n-2} \gamma_1 \end{align}$$
    </div>
<p><strong>octave and matlab:</strong></p>
<p>Octave uses the sample standard deviation to compute skewness. This behavior is different from Matlab and should possibly be regarded as a bug.</p>
<p>Matlab, but not Octave, will take a flag as a second parameter. When set to zero Matlab returns the sample skewness:</p>
<div class="code">
<pre xml:space="preserve">
<code>skewness(x, 0)</code>
</pre></div>
<p><strong>numpy:</strong></p>
<p>Set the named parameter <tt>bias</tt> to <tt>False</tt> to get the sample skewness:</p>
<div class="code">
<pre xml:space="preserve">
<code>stats.skew(x, bias=False)</code>
</pre></div>
<p><a name="kurtosis-note" shape="rect" id="kurtosis-note"></a></p>
<h2 id="toc253"><span><a href="#kurtosis" shape="rect">kurtosis</a></span></h2>
<p>The kurtosis of a population.</p>
<p>The formula for kurtosis is:</p>

<div class="math-inline" style="display; block;">
      $$\begin{align} \gamma_2 = \frac{\mu_4}{\sigma^4} - 3 \end{align}$$
    </div>
<p>When kurtosis is negative the sides of a distribution tend to be more convex than when the kurtosis is is positive. A negative kurtosis distribution tends to have a wide, flat peak and narrow tails. Such a distribution is called platykurtic. A positive kurtosis distribution tends to have a narrow, sharp peak and long tails. Such a distribution is called leptokurtic.</p>
<p>The fourth standardized moment is</p>

<div class="math-inline" style="display; block;">
      $$\begin{align} \beta_2 = \frac{\mu_4}{\sigma^4} \end{align}$$
    </div>
<p>The fourth standardized moment is sometimes taken as the definition of kurtosis in older literature. The reason the modern definition is preferred is because it assigns the normal distribution a kurtosis of zero.</p>
<p><strong>matlab:</strong></p>
<p>Octave uses the sample standard deviation when computing kurtosis. This should probably be regarded as a bug.</p>
<p><strong>r:</strong></p>
<p>R uses the older fourth standardized moment definition of kurtosis.</p>
<p><a name="nth-moment-note" shape="rect" id="nth-moment-note"></a></p>
<h2 id="toc254"><span><a href="#nth-moment" shape="rect">nth moment and nth central moment</a></span></h2>
<p>How to compute the nth moment (also called the nth absolute moment) and the nth central moment for arbitrary <em>n</em>.</p>
<p><a name="mode-note" shape="rect" id="mode-note"></a></p>
<h2 id="toc255"><span><a href="#mode" shape="rect">mode</a></span></h2>
<p>The mode is the most common value in the sample.</p>
<p>The mode is a measure of central tendency like the mean and the median. A problem with the mean is that it can produce values not found in the data. For example the mean number of persons in an American household was 2.6 in 2009.</p>
<p>The mode might not be unique. If there are two modes the sample is said to be bimodal, and in general if there is more than one mode the sample is said to be multimodal.</p>
<p><a name="quantile-stats-note" shape="rect" id="quantile-stats-note"></a></p>
<h2 id="toc256"><span><a href="#quantile-stats" shape="rect">quantile statistics</a></span></h2>
<p>If the data is sorted from smallest to largest, the minimum is the first value, the median is the middle value, and the maximum is the last value. If there are an even number of data points, the median is the average of the middle two points.</p>
<p>The median divides the population into two halves. When the population is divided into four parts the division markers are called the first, second, and third quartile. When the population is divided into a hundred the division markers are called percentiles. If the population is divided into <em>n</em>parts the markers are called the 1st, 2nd, …, (n-1)th n-quantile.</p>
<p><a name="bivariate-stats-note" shape="rect" id="bivariate-stats-note"></a></p>
<h2 id="toc257"><span><a href="#bivariate-stats" shape="rect">bivariate statistics</a></span></h2>
<p>The correlation and the covariance.</p>
<p>The correlation is a number from -1 to 1. It is a measure of the linearity of the data, with values of -1 and 1 representing indicating a perfectly linear relationship. When the correlation is positive the quantities tend to increase together and when the correlation is negative one quantity will tend to increase as the other decreases.</p>
<p>A variable can be completely dependent on another and yet the two variables can have zero correlation. This happens for Y = X<sup>2</sup> where uniform X on the interval [-1, 1]. <a href="http://en.wikipedia.org/wiki/Anscombe's_quartet" shape="rect">Anscombe's quartet</a> gives four examples of data sets each with the same fairly high correlation 0.816 and yet which show significant qualitative differences when plotted.</p>
<p>The covariance is defined by</p>

<div class="math-inline" style="display; block;">
      $$\begin{align} E[X -\mu_X)(Y- \mu_Y)] \end{align}$$
    </div>
<p>The correlation is the normalized version of the covariance. It is defined by</p>

<div class="math-inline" style="display; block;">
      $$\begin{align} \frac{E[X -\mu_X)(Y- \mu_Y)]}{\sigma_X \sigma_Y} \end{align}$$
    </div>
<p><a name="correlation-matrix-note" shape="rect" id="correlation-matrix-note"></a></p>
<h2 id="toc258"><span><a href="#correlation-matrix" shape="rect">correlation matrix</a></span></h2>
<p><a name="freq-table-note" shape="rect" id="freq-table-note"></a></p>
<h2 id="toc259"><span><a href="#freq-table" shape="rect">frequency table</a></span></h2>
<p>How to compute the frequency table for a data set. A frequency table counts how often each value occurs in the data set.</p>
<p><strong>r:</strong></p>
<p>The <tt>table</tt> function returns an object of type <tt>table</tt>.</p>
<p><a name="invert-freq-table-note" shape="rect" id="invert-freq-table-note"></a></p>
<h2 id="toc260"><span><a href="#invert-freq-table" shape="rect">invert frequency table</a></span></h2>
<p>How to convert a frequency table back into the original data set.</p>
<p>The order of the original data set is not preserved.</p>
<p><a name="bin-note" shape="rect" id="bin-note"></a></p>
<h2 id="toc261"><span><a href="#bin" shape="rect">bin</a></span></h2>
<p>How to bin a data set. The result is a frequency table where each frequency represents the number of samples from the data set for an interval.</p>
<p><strong>r:</strong></p>
<p>The <tt>cut</tt> function returns a <tt>factor</tt>.</p>
<p>A <tt>labels</tt> parameter can be provided with a vector argument to assign the bins names. Otherwise bin names are constructed from the breaks using "[0.0,1.0)" style notation.</p>
<p>The <tt>hist</tt> function can be used to bin a data set:</p>
<div class="code">
<pre xml:space="preserve">
<code>x = c(1.1, 3.7, 8.9, 1.2, 1.9, 4.1)
hist(x, breaks=c(0, 3, 6, 9), plot=FALSE)</code>
</pre></div>
<p><tt>hist</tt> returns an object of type <tt>histogram</tt>. The counts are in the <tt>$counts</tt> attribute.</p>
<p><a name="distribution-note" shape="rect" id="distribution-note"></a></p>
<h1 id="toc262"><span><a href="#distributions" shape="rect">Distributions</a></span></h1>
<p>A distribution density function <em>f(x)</em> is a non-negative function which, when integrated over its entire domain is equal to one. The distributions described in this sheet have as their domain the real numbers. The support of a distribution is the part of the domain on which the density function is non-zero.</p>
<p>A distribution density function can be used to describe the values one is likely to see when drawing an example from a population. Values in areas where the density function is large are more likely than values in areas where the density function is small. Values where there density function is zero do not occur. Thus it can be useful to plot the density function.</p>
<p>To derive probabilities from a density function one must integrate or use the associated cumulative density function</p>

<div class="math-inline" style="display; block;">
      $$\begin{align} F(x) = \int_{-\infty}^x f(t) dt \end{align}$$
    </div>
<p>which gives the probability of seeing a value less than or equal to <em>x</em>. As probabilities are non-negative and no greater than one, <em>F</em> is a function from (-<span style="white-space: pre-wrap;">∞</span>, <span style="white-space: pre-wrap;">∞</span>) to [0,1]. The inverse of F is called the inverse cumulative distribution function or the quantile function for the distribution.</p>
<p>For each distribution statistical software will generally provide four functions: the density, the cumulative distribution, the quantile, and a function which returns random numbers in frequencies that match the distribution. If the software does not provide a random number generating function for the distribution, the quantile function can be composed with the built-in random number generator that most languages have as long as it returns uniformly distributed floats from the interval [0, 1].</p>
<table class="wiki-content-table"><tr><td rowspan="1" colspan="1">density<br />
probability density<br />
probability mass</td><td rowspan="1" colspan="1">cumulative density<br />
cumulative distribution<br />
distribution</td><td rowspan="1" colspan="1">inverse cumulative density<br />
inverse cumulative distribution<br />
quantile<br />
percentile<br />
percent point</td><td rowspan="1" colspan="1">random variate</td></tr></table><p>Discrete distributions such as the binomial and the poisson do not have density functions in the normal sense. Instead they have probability mass functions which assign probabilities which sum up to one to the integers. In R warnings will be given if non integer values are provided to the mass functions <tt>dbinom</tt> and <tt>dpoiss</tt>.</p>
<p>The cumulative distribution function of a discrete distribution can still be defined on the reals. Such a function is constant except at the integers where it may have jump discontinuities.</p>
<p>Most well known distributions are in fact parametrized families of distributions. <a href="/distributions" shape="rect">This table</a> lists some of them with their parameters and properties.</p>
<p>The information entropy of a continuous distribution with density <em>f(x)</em> is defined as:</p>

<div class="math-inline" style="display; block;">
      $$\begin{align} -\int_\mathbb{R} f(x) \; \log(f(x)) \; dx \end{align}$$
    </div>
<p>In Bayesian analysis the distribution with the greatest entropy, subject to the known facts about the distribution, is called the maximum entropy probability distribution. It is considered the best distribution for modeling the current state of knowledge.</p>
<p><a name="binomial-note" shape="rect" id="binomial-note"></a></p>
<h2 id="toc263"><span><a href="#binomial" shape="rect">binomial</a></span></h2>
<p>The probability mass, cumulative distribution, quantile, and random number generating functions for the binomial distribution.</p>
<p>The binomial distribution is a discrete distribution. It models the number of successful trails when <em>n</em> is the number of trials and <em>p</em> is the chance of success for each trial. An example is the number of heads when flipping a coin 100 times. If the coin is fair then <em>p</em> is 0.50.</p>
<p><strong>numpy:</strong></p>
<p>Random numbers in a binomial distribution can also be generated with:</p>
<div class="code">
<pre xml:space="preserve">
<code>np.random.binomial(n, p)</code>
</pre></div>
<p><a name="poisson-note" shape="rect" id="poisson-note"></a></p>
<h2 id="toc264"><span><a href="#poisson" shape="rect">poisson</a></span></h2>
<p>The probability mass, cumulative distribution, quantile, and random number generating functions for the Poisson distribution.</p>
<p>The Poisson distribution is a discrete distribution. It is described by a parameter <em>lam</em> which is the mean value for the distribution. The Poisson distribution is used to model events which happen at a specified average rate and independently of each other. Under these circumstances the time between successive events will be described by an exponential distribution and the events are said to be described by a poisson process.</p>
<p><strong>numpy:</strong></p>
<p>Random numbers in a Poisson distribution can also be generated with:</p>
<div class="code">
<pre xml:space="preserve">
<code>np.random.poisson(lam, size=1)</code>
</pre></div>
<p><a name="normal-note" shape="rect" id="normal-note"></a></p>
<h2 id="toc265"><span><a href="#normal" shape="rect">normal</a></span></h2>
<p>The probability density, cumulative distribution, quantile, and random number generating functions for the normal distribution.</p>
<p>The parameters are the mean <span style="white-space: pre-wrap;">μ</span> and the standard deviation <span style="white-space: pre-wrap;">σ</span>. The standard normal distribution has <span style="white-space: pre-wrap;">μ</span> of 0 and <span style="white-space: pre-wrap;">σ</span> of 1.</p>
<p>The normal distribution is the maximum entropy distribution for a given mean and variance. According to the central limit theorem, if {X<sub>1</sub>, …, X<sub>n</sub>} are any independent and identically distributed random variables with mean <span style="white-space: pre-wrap;">μ</span> and variance <span style="white-space: pre-wrap;">σ</span><sup>2</sup>, then S<sub>n</sub> := <span style="white-space: pre-wrap;">Σ</span> X<sub>i</sub> / n converges to a normal distribution with mean <span style="white-space: pre-wrap;">μ</span> and variance <span style="white-space: pre-wrap;">σ</span><sup>2</sup>/n.</p>
<p><strong>numpy:</strong></p>
<p>Random numbers in a normal distribution can also be generated with:</p>
<div class="code">
<pre xml:space="preserve">
<code>np.random.randn()</code>
</pre></div>
<p><a name="gamma-note" shape="rect" id="gamma-note"></a></p>
<h2 id="toc266"><span><a href="#gamma" shape="rect">gamma</a></span></h2>
<p>The probability density, cumulative distribution, quantile, and random number generating functions for the gamma distribution.</p>
<p>The parameter <em>k</em> is called the shape parameter and <span style="white-space: pre-wrap;">θ</span> is called the scale parameter. The rate of the distribution is <span style="white-space: pre-wrap;">β</span> = 1/<span style="white-space: pre-wrap;">θ</span>.</p>
<p>If X<sub>i</sub> are <em>n</em> independent random variables with <span style="white-space: pre-wrap;">Γ</span>(k<sub>i</sub>, <span style="white-space: pre-wrap;">θ</span>) distribution, then <span style="white-space: pre-wrap;">Σ</span> X<sub>i</sub> has distribution <span style="white-space: pre-wrap;">Γ</span>(<span style="white-space: pre-wrap;">Σ</span> k<sub>i</sub>, <span style="white-space: pre-wrap;">θ</span>).</p>
<p>If X has <span style="white-space: pre-wrap;">Γ</span>(k, <span style="white-space: pre-wrap;">θ</span>) distribution, then <span style="white-space: pre-wrap;">α</span>X has <span style="white-space: pre-wrap;">Γ</span>(k, <span style="white-space: pre-wrap;">α</span><span style="white-space: pre-wrap;">θ</span>) distribution.</p>
<p><a name="exponential-note" shape="rect" id="exponential-note"></a></p>
<h2 id="toc267"><span><a href="#exponential" shape="rect">exponential</a></span></h2>
<p>The probability density, cumulative distribution, quantile, and random number generating functions for the exponential distribution.</p>
<p><a name="chi-squared-note" shape="rect" id="chi-squared-note"></a></p>
<h2 id="toc268"><span><a href="#chi-squared" shape="rect">chi-squared</a></span></h2>
<p>The probability density, cumulative distribution, quantile, and random number generating functions for the chi-squared distribution.</p>
<p><a name="beta-note" shape="rect" id="beta-note"></a></p>
<h2 id="toc269"><span><a href="#beta" shape="rect">beta</a></span></h2>
<p>The probability density, cumulative distribution, quantile, and random number generating functions for the beta distribution.</p>
<p><a name="uniform-note" shape="rect" id="uniform-note"></a></p>
<h2 id="toc270"><span><a href="#uniform" shape="rect">uniform</a></span></h2>
<p>The probability density, cumulative distribution, quantile, and random number generating functions for the uniform distribution.</p>
<p>The uniform distribution is described by the parameters <em>a</em> and <em>b</em> which delimit the interval on which the density function is nonzero.</p>
<p>The uniform distribution the is maximum entropy probability distribution with support <em>[a, b]</em>.</p>
<p>Consider the uniform distribution on <em>[0, b]</em>. Suppose that we take <em>k</em> samples from it, and <em>m</em> is the largest of the samples. The minimum variance unbiased estimator for <em>b</em> is</p>

<div class="math-inline" style="display; block;">
      $$\begin{align} \frac{k+1}{k}m \end{align}$$
    </div>
<p><strong>octave, r, numpy:</strong></p>
<p><em>a</em> and <em>b</em> are optional parameters and default to 0 and 1 respectively.</p>
<p><a name="students-t-note" shape="rect" id="students-t-note"></a></p>
<h2 id="toc271"><span><a href="#students-t" shape="rect">Student's t</a></span></h2>
<p>The probability density, cumulative distribution, quantile, and random number generating functions for Student's t distribution.</p>
<p><a name="snedecors-f-note" shape="rect" id="snedecors-f-note"></a></p>
<h2 id="toc272"><span><a href="#snedecors-f" shape="rect">Snedecor's F</a></span></h2>
<p>The probability density, cumulative distribution, quantile, and random number generating functions for Snedecor's F distribution.</p>
<p><a name="empirical-density-func-note" shape="rect" id="empirical-density-func-note"></a></p>
<h2 id="toc273"><span><a href="#empirical-density-func" shape="rect">empirical density function</a></span></h2>
<p>How to construct a density function from a sample.</p>
<p><a name="empirical-cumulative-distribution-note" shape="rect" id="empirical-cumulative-distribution-note"></a></p>
<h2 id="toc274"><span><a href="#empirical-cumulative-distribution" shape="rect">empirical cumulative distribution</a></span></h2>
<p><a name="empirical-quantile-func-note" shape="rect" id="empirical-quantile-func-note"></a></p>
<h2 id="toc275"><span><a href="#empirical-quantile-func" shape="rect">empirical quantile function</a></span></h2>
<p><a name="linear-models-note" shape="rect" id="linear-models-note"></a></p>
<h1 id="toc276"><span><a href="#linear-models" shape="rect">Linear Models</a></span></h1>
<p><a name="simple-linear-regression-note" shape="rect" id="simple-linear-regression-note"></a></p>
<h2 id="toc277"><span><a href="#simple-linear-regression" shape="rect">simple linear regression</a></span></h2>
<p>How to get the slope <em>a</em> and intercept <em>b</em> for a line which best approximates the data. How to get the residuals.</p>
<p>If there are more than two data points, then the system is overdetermined and in general there is no solution for the slope and the intercept. Linear regression looks for line that fits the points as best as possible. The least squares solution is the line that minimizes the sum of the square of the distances of the points from the line.</p>
<p>The residuals are the difference between the actual values of <em>y</em> and the calculated values using <em>ax + b</em>. The norm of the residuals can be used as a measure of the goodness of fit.</p>
<p><a name="linear-regression-no-intercept-note" shape="rect" id="linear-regression-no-intercept-note"></a></p>
<h2 id="toc278"><span><a href="#linear-regression-no-intercept" shape="rect">no intercept</a></span></h2>
<p><a name="multiple-linear-regression-note" shape="rect" id="multiple-linear-regression-note"></a></p>
<h2 id="toc279"><span><a href="#multiple-linear-regression" shape="rect">multiple linear regression</a></span></h2>
<p><a name="polynomial-regression-note" shape="rect" id="polynomial-regression-note"></a></p>
<h2 id="toc280"><span><a href="#polynomial-regression" shape="rect">polynomial regression</a></span></h2>
<p><a name="logistic-regression-note" shape="rect" id="logistic-regression-note"></a></p>
<h2 id="toc281"><span><a href="#logistic-regression" shape="rect">logistic regression</a></span></h2>
<p><a name="polynomial-interpolation-note" shape="rect" id="polynomial-interpolation-note"></a></p>
<h1 id="toc282"><span><a href="#polynomial-interpolation" shape="rect">Polynomial Interpolation</a></span></h1>
<p><a name="statistical-tests-note" shape="rect" id="statistical-tests-note"></a></p>
<h1 id="toc283"><span><a href="#statistical-tests" shape="rect">Statistical Tests</a></span></h1>
<p>A selection of statistical tests. For each test the null hypothesis of the test is stated in the left column.</p>
<p>In a null hypothesis test one considers the <em>p-value</em>, which is the chance of getting data which is as or more extreme than the observed data if the null hypothesis is true. The null hypothesis is usually a supposition that the data is drawn from a distribution with certain parameters.</p>
<p>The extremeness of the data is determined by comparing the expected value of a parameter according to the null hypothesis to the estimated value from the data. Usually the parameter is a mean or variance. In a <em>one-tailed test</em> the p-value is the chance the difference is greater than the observed amount; in a <em>two-tailed test</em> the p-value is the chance the absolute value of the difference is greater than the observed amount.</p>
<p>Octave and MATLAB have different names for the statistical test functions. The sheet shows the Octave functions; the corresponding MATLAB functions are:</p>
<table class="wiki-content-table"><tr><th rowspan="1" colspan="1">octave</th><th rowspan="1" colspan="1">matlab</th></tr><tr><td rowspan="1" colspan="1">wilcoxon_test</td><td rowspan="1" colspan="1">ranksum</td></tr><tr><td rowspan="1" colspan="1">kruskal_wallis_test</td><td rowspan="1" colspan="1">kruskalwallis</td></tr><tr><td rowspan="1" colspan="1">kolmogorov_smirnov_test</td><td rowspan="1" colspan="1">kstest</td></tr><tr><td rowspan="1" colspan="1">kolmogorov_smirnov_test_2</td><td rowspan="1" colspan="1">kstest2</td></tr><tr><td rowspan="1" colspan="1">t_test</td><td rowspan="1" colspan="1">ttest</td></tr><tr><td rowspan="1" colspan="1">t_test_2</td><td rowspan="1" colspan="1">ttest2</td></tr></table><p><a name="wilcoxon-note" shape="rect" id="wilcoxon-note"></a></p>
<h2 id="toc284"><span><a href="#wilcoxon" shape="rect">wilcoxon signed-rank test</a></span></h2>
<p><strong>matlab</strong></p>
<p><tt>wilcoxon_test()</tt> is an Octave function. The MATLAB function is <tt>ranksum()</tt>.</p>
<p><a name="kruskal-note" shape="rect" id="kruskal-note"></a></p>
<h2 id="toc285"><span><a href="#kruskal" shape="rect">kruskal-wallis rank sum test</a></span></h2>
<p><a name="kolmogorov-smirnov-test-note" shape="rect" id="kolmogorov-smirnov-test-note"></a></p>
<h2 id="toc286"><span><a href="#kolmogorov-smirnov-test" shape="rect">kolmogorov-smirnov test</a></span></h2>
<p>Test whether two samples are drawn from the same distribution.</p>
<p><strong>matlab:</strong></p>
<p><tt>kolmogorov_smirnov_test_2()</tt> and <tt>kolmogorov_smirnov_test()</tt> are Octave functions. The corresponding MATLAB functions are <tt>kstest2()</tt> and <tt>kstest()</tt>.</p>
<p><tt>kolmogorov_smirnov_test()</tt> is a one sample test; it tests whether a sample is drawn from one of the standard continuous distributions. A one sample KS test gives a repeatable p-value; generating a sample and using a two sample KS test does not.</p>
<div class="code">
<pre xml:space="preserve">
<code>x = randn(100, 1)

% null hypothesis is true:
kolmogorov_smirnov_test(x, "norm", 0, 1)

% alternative hypothesis is true:
kolmogorov_smirnov_test(x, "unif", -0.5, 0.5)</code>
</pre></div>
<p><strong>r:</strong></p>
<p><a name="one-sample-t-test-note" shape="rect" id="one-sample-t-test-note"></a></p>
<h2 id="toc287"><span><a href="#one-sample-t-test" shape="rect">one-sample t-test</a></span></h2>
<p><a name="independent-two-sample-t-test-note" shape="rect" id="independent-two-sample-t-test-note"></a></p>
<h2 id="toc288"><span><a href="#independent-two-sample-t-test" shape="rect">independent two-sample t-test</a></span></h2>
<p>Test whether two normal variables have same mean.</p>
<p><strong>r:</strong></p>
<p>If the normal variables are known to have the same variance, the variance can be pooled to estimate standard error:</p>
<div class="code">
<pre xml:space="preserve">
<code>t.test(x, y, var.equal=T)</code>
</pre></div>
<p>If the variance cannot be pooled, then Welch's t-test is used. This uses a lower (often non-integral) degrees-of-freedom value, which in turn results in a higher p-value.</p>
<p><a name="one-sample-binomial-test-note" shape="rect" id="one-sample-binomial-test-note"></a></p>
<h2 id="toc289"><span><a href="#one-sample-binomial-test" shape="rect">one-sample binomial test</a></span></h2>
<p><a name="two-sample-binomial-test-note" shape="rect" id="two-sample-binomial-test-note"></a></p>
<h2 id="toc290"><span><a href="#two-sample-binomial-test" shape="rect">two-sample binomial test</a></span></h2>
<p><a name="chi-squared-test-note" shape="rect" id="chi-squared-test-note"></a></p>
<h2 id="toc291"><span><a href="#chi-squared-test" shape="rect">chi-squared test</a></span></h2>
<p><a name="poisson-test-note" shape="rect" id="poisson-test-note"></a></p>
<h2 id="toc292"><span><a href="#poisson-test" shape="rect">poisson test</a></span></h2>
<p><a name="f-test-note" shape="rect" id="f-test-note"></a></p>
<h2 id="toc293"><span><a href="#f-test" shape="rect">F test</a></span></h2>
<p><a name="pearson-product-moment-test-note" shape="rect" id="pearson-product-moment-test-note"></a></p>
<h2 id="toc294"><span><a href="#pearson-product-moment-test" shape="rect">pearson product moment test</a></span></h2>
<p><a name="shapiro-wilk-test-note" shape="rect" id="shapiro-wilk-test-note"></a></p>
<h2 id="toc295"><span><a href="#shapiro-wilk-test" shape="rect">shapiro-wilk test</a></span></h2>
<p><a name="bartletts-test-note" shape="rect" id="bartletts-test-note"></a></p>
<h2 id="toc296"><span><a href="#bartletts-test" shape="rect">bartlett's test</a></span></h2>
<p>A test whether variables are drawn from normal distributions with the same variance.</p>
<p><a name="levene-test-note" shape="rect" id="levene-test-note"></a></p>
<h2 id="toc297"><span><a href="#levene-test" shape="rect">levene's test</a></span></h2>
<p>A test whether variables are drawn from distributions with the same variance.</p>
<p><a name="one-way-anova-note" shape="rect" id="one-way-anova-note"></a></p>
<h2 id="toc298"><span><a href="#one-way-anova" shape="rect">one-way anova</a></span></h2>
<p><a name="time-series-analysis-note" shape="rect" id="time-series-analysis-note"></a></p>
<h1 id="toc299"><span><a href="#time-series-analysis" shape="rect">Time Series Analysis</a></span></h1>
<p><a name="univariate-chart-note" shape="rect" id="univariate-chart-note"></a></p>
<h1 id="toc300"><span><a href="#univariate-charts" shape="rect">Univariate Charts</a></span></h1>
<p><a name="bar-chart-note" shape="rect" id="bar-chart-note"></a></p>
<h2 id="toc301"><span><a href="#bar-chart" shape="rect">vertical bar chart</a></span></h2>
<p>A chart in which numerical values are represented by horizontal bars. The bars are aligned at the bottom.</p>
<p><strong>r:</strong></p>
<p>How to produce a bar chart using ggplot2:</p>
<div class="code">
<pre xml:space="preserve">
<code>cnts = c(7,3,8,5,5)
names = c("a","b","c","d","e")
df = data.frame(names, cnts)
qplot(names, data=df, geom="bar", weight=cnts)</code>
</pre></div>
<p><a name="horizontal-bar-chart-note" shape="rect" id="horizontal-bar-chart-note"></a></p>
<h2 id="toc302"><span><a href="#horizontal-bar-chart" shape="rect">horizontal bar chart</a></span></h2>
<p>A bar chart with horizontal bars which are aligned on the left.</p>
<p><a name="pie-chart-note" shape="rect" id="pie-chart-note"></a></p>
<h2 id="toc303"><span><a href="#pie-chart" shape="rect">pie chart</a></span></h2>
<p>A pie chart displays values using the areas of circular sectors or equivalently the lengths of the arcs of those sectors.</p>
<p>A pie chart implies that the values are percentages of a whole.</p>
<p><a name="dot-plot-note" shape="rect" id="dot-plot-note"></a></p>
<h2 id="toc304"><span><a href="#dot-plot" shape="rect">dot plot</a></span></h2>
<p>A chart which displays small, integral values with stacks of dots.</p>
<p><a name="stem-plot-note" shape="rect" id="stem-plot-note"></a></p>
<h2 id="toc305"><span><a href="#stem-plot" shape="rect">stem plot</a></span></h2>
<p>Also called a stem-and-leaf plot.</p>
<p>A stem plot is a concise way of storing a small set of numbers which makes their distribution visually evident.</p>
<p>The original set of numbers can be recovered with some loss of accuracy by appending the number on the left with each of the digits on the right. In the example below the original data set contained -43, -42, -41, -39, -38, -35, …, 35, 44, 46, 50, 58.</p>
<div class="code">
<pre xml:space="preserve">
<code>&gt; stem(20*rnorm(100))

  The decimal point is 1 digit(s) to the right of the |

  -4 | 321
  -2 | 98544054310
  -0 | 8864333111009998776444332222110
   0 | 0001122333333466667778899122334555666789
   2 | 00023669025
   4 | 4608</code>
</pre></div>
<p><a name="histogram-note" shape="rect" id="histogram-note"></a></p>
<h2 id="toc306"><span><a href="#histogram" shape="rect">histogram</a></span></h2>
<p>A histogram is a bar chart where each bar represents a range of values that the data points can fall in. The data is tabulated to find out how often data points fall in each of the bins and in the final chart the length of the bars corresponds to the frequency.</p>
<p>A common method for choosing the number of bins using the number of data points is Sturges' formula:</p>

<div class="math-inline" style="display; block;">
      $$\begin{align} \lceil \log_2{x} + 1 \rceil \end{align}$$
    </div>
<p><strong>r:</strong></p>
<p>How to make a histogram with the <tt>ggplot2</tt> library:</p>
<div class="code">
<pre xml:space="preserve">
<code>qplot(rnorm(50), geom="histogram", binwidth=binwidth)
binwidth = (max(x)-min(x))/10
qplot(rnorm(50), geom="histogram", binwidth=binwidth)</code>
</pre></div>
<p><a name="box-plot-note" shape="rect" id="box-plot-note"></a></p>
<h2 id="toc307"><span><a href="#box-plot" shape="rect">box plot</a></span></h2>
<p>Also called a box-and-whisker plot.</p>
<p>The box shows the locations of the 1st quartile, median, and 3rd quartile. These are the same as the 25th percentile, 50th percentile, and 75th percentile.</p>
<p>The whiskers are sometimes used to show the maximum and minimum values of the data set. Outliers are sometimes shown explicitly with dots, in which case all remaining data points occur inside the whiskers.</p>
<p><strong>r:</strong></p>
<p>How to create a box plot with <tt>ggplot2</tt>:</p>
<div class="code">
<pre xml:space="preserve">
<code>qplot(x="rnorm", y=rnorm(50), geom="boxplot")

qplot(x=c("rnorm", "rexp", "runif"), y=c(rnorm(50), rexp(50), runif(50)), geom="boxplot")</code>
</pre></div>
<p><a name="chart-title-note" shape="rect" id="chart-title-note"></a></p>
<h2 id="toc308"><span><a href="#chart-title" shape="rect">chart title</a></span></h2>
<p>How to set the chart title.</p>
<p><strong>r:</strong></p>
<p>The <tt>qplot</tt> commands supports the <tt>main</tt> options for setting the title:</p>
<div class="code">
<pre xml:space="preserve">
<code>qplot(x="rnorm", y=rnorm(50), geom="boxplot", main="boxplot example")</code>
</pre></div>
<p><a name="bivariate-chart-note" shape="rect" id="bivariate-chart-note"></a></p>
<h1 id="toc309"><span><a href="#bivariate-charts" shape="rect">Bivariate Charts</a></span></h1>
<p><a name="stacked-bar-chart-note" shape="rect" id="stacked-bar-chart-note"></a></p>
<h2 id="toc310"><span><a href="#stacked-bar-chart" shape="rect">stacked bar chart</a></span></h2>
<p>Two or more data sets with a common set of labels can be charted with a stacked bar chart. This makes the sum of the data sets for each label readily apparent.</p>
<p><a name="grouped-bar-chart-note" shape="rect" id="grouped-bar-chart-note"></a></p>
<h2 id="toc311"><span><a href="#grouped-bar-chart" shape="rect">grouped bar chart</a></span></h2>
<p>Optionally data sets with a common set of labels can be charted with a grouped bar chart which clusters the bars for each label. The grouped bar chart makes it easier to perform comparisons between labels for each data set.</p>
<p><a name="scatter-plot-note" shape="rect" id="scatter-plot-note"></a></p>
<h2 id="toc312"><span><a href="#scatter-plot" shape="rect">scatter plot</a></span></h2>
<p>A scatter plot can be used to determine if two variables are correlated.</p>
<p><strong>r:</strong></p>
<p>How to make a scatter plot with <tt>ggplot</tt>:</p>
<div class="code">
<pre xml:space="preserve">
<code>x = rnorm(50)
y = rnorm(50)
p = ggplot(data.frame(x, y), aes(x, y))
p = p + layer(geom="point")
p</code>
</pre></div>
<p><a name="hexbin-note" shape="rect" id="hexbin-note"></a></p>
<h2 id="toc313"><span><a href="#hexbin" shape="rect">hexagonal binning</a></span></h2>
<p>A hexagonal binning is the two-dimensional analog of a histogram. The number of data points in each hexagon is tabulated, and then color or grayscale is used to show the frequency.</p>
<p>A hexagonal binning is superior to a scatter-plot when the number of data points is high because most scatter-plot software doesn't indicate when points are occur on top of each other.</p>
<p><a name="linear-regression-line-note" shape="rect" id="linear-regression-line-note"></a></p>
<h2 id="toc314"><span><a href="#linear-regression-line" shape="rect">linear regression line</a></span></h2>
<p>How to plot a line determined by linear regression on top of a scatter plot.</p>
<p><a name="polygonal-plot-note" shape="rect" id="polygonal-plot-note"></a></p>
<h2 id="toc315"><span><a href="#polygonal-plot" shape="rect">polygonal line plot</a></span></h2>
<p>How to connect the dots of a data set with a polygonal line.</p>
<p><a name="cubic-spline-note" shape="rect" id="cubic-spline-note"></a></p>
<h2 id="toc316"><span><a href="#cubic-spline" shape="rect">cubic spline</a></span></h2>
<p>How to connect the dots of a data set with a line which has a continuous 2nd derivative.</p>
<p><a name="function-plot-note" shape="rect" id="function-plot-note"></a></p>
<h2 id="toc317"><span><a href="#function-plot" shape="rect">function plot</a></span></h2>
<p>How to plot a function.</p>
<p><a name="qq-plot-note" shape="rect" id="qq-plot-note"></a></p>
<h2 id="toc318"><span><a href="#qq-plot" shape="rect">quantile-quantile plot</a></span></h2>
<p>Also called a Q-Q plot.</p>
<p>A quantile-quantile plot is a scatter plot created from two data sets. Each point depicts the quantile of the first data set with its x position and the corresponding quantile of the second data set with its y position.</p>
<p>If the data sets are drawn from the same distribution then most of the points should be close to the line y = x. If the data sets are drawn from distributions which have a linear relation then the Q-Q plot should also be close to linear.</p>
<p><a name="axis-labels-note" shape="rect" id="axis-labels-note"></a></p>
<h2 id="toc319"><span><a href="#axis-labels" shape="rect">axis labels</a></span></h2>
<p>How to label the x and y axes.</p>
<p><strong>r:</strong></p>
<p>How to label the axes with ggplot2:</p>
<div class="code">
<pre xml:space="preserve">
<code>x = rnorm(20)
y = x^2

p = ggplot(data.frame(x, y), aes(x, y))
p + layer(geom="point") + xlab('x') + ylab('x squared')</code>
</pre></div>
<p><a name="axis-limits-note" shape="rect" id="axis-limits-note"></a></p>
<h2 id="toc320"><span><a href="#axis-limits" shape="rect">axis limits</a></span></h2>
<p>How to manually set the range of values displayed by an axis.</p>
<p><a name="logarithmic-y-axis-note" shape="rect" id="logarithmic-y-axis-note"></a></p>
<h2 id="toc321"><span><a href="#logarithmic-y-axis" shape="rect">logarithmic y-axis</a></span></h2>
<p><a name="multivariate-chart-note" shape="rect" id="multivariate-chart-note"></a></p>
<h1 id="toc322"><span><a href="#multivariate-charts" shape="rect">Multivariate Charts</a></span></h1>
<p><a name="additional-line-note" shape="rect" id="additional-line-note"></a></p>
<h2 id="toc323"><span><a href="#additional-line" shape="rect">additional line set</a></span></h2>
<p><a name="legend-note" shape="rect" id="legend-note"></a></p>
<h2 id="toc324"><span><a href="#legend" shape="rect">legend</a></span></h2>
<p>How to put a legend on a chart.</p>
<p><strong>r:</strong></p>
<p>These strings can be used as the first argument to control the legend position:</p>
<ul><li>"bottomright"</li><li>"bottom"</li><li>"bottomleft"</li><li>"left"</li><li>"topleft"</li><li>"top"</li><li>"topright"</li><li>"right"</li><li>"center"</li></ul><p>The named parameter <tt>lwd</tt> is the line width. It is roughly the width in pixels, though the exact interpretation is device specific.</p>
<p>The named parameter <tt>lty</tt> specifies the line type. The value can be either an integer or a string:</p>
<table class="wiki-content-table"><tr><th rowspan="1" colspan="1">number</th><th rowspan="1" colspan="1">string</th></tr><tr><td rowspan="1" colspan="1">0</td><td rowspan="1" colspan="1">'blank'</td></tr><tr><td rowspan="1" colspan="1">1</td><td rowspan="1" colspan="1">'solid'</td></tr><tr><td rowspan="1" colspan="1">2</td><td rowspan="1" colspan="1">'dashed'</td></tr><tr><td rowspan="1" colspan="1">3</td><td rowspan="1" colspan="1">'dotted'</td></tr><tr><td rowspan="1" colspan="1">4</td><td rowspan="1" colspan="1">'dotdash'</td></tr><tr><td rowspan="1" colspan="1">5</td><td rowspan="1" colspan="1">'longdash'</td></tr><tr><td rowspan="1" colspan="1">6</td><td rowspan="1" colspan="1">'twodash'</td></tr></table><p><a name="additional-point-note" shape="rect" id="additional-point-note"></a></p>
<h2 id="toc325"><span><a href="#additional-point" shape="rect">additional point set</a></span></h2>
<p><a name="area-chart-note" shape="rect" id="area-chart-note"></a></p>
<h2 id="toc326"><span><a href="#area-chart" shape="rect">stacked area chart</a></span></h2>
<p><a name="overlapping-area-chart-note" shape="rect" id="overlapping-area-chart-note"></a></p>
<h2 id="toc327"><span><a href="#overlapping-area-chart" shape="rect">overlapping area chart</a></span></h2>
<p><a name="3d-scatter-plot-note" shape="rect" id="3d-scatter-plot-note"></a></p>
<h2 id="toc328"><span><a href="#3d-scatter-plot" shape="rect">3d scatter plot</a></span></h2>
<p><a name="bubble-chart-note" shape="rect" id="bubble-chart-note"></a></p>
<h2 id="toc329"><span><a href="#bubble-chart" shape="rect">bubble chart</a></span></h2>
<p><a name="scatter-plot-matrix-note" shape="rect" id="scatter-plot-matrix-note"></a></p>
<h2 id="toc330"><span><a href="#scatter-plot-matrix" shape="rect">scatter plot matrix</a></span></h2>
<p><a name="contour-plot-note" shape="rect" id="contour-plot-note"></a></p>
<h2 id="toc331"><span><a href="#contour-plot" shape="rect">contour plot</a></span></h2>
<p><a name="matlab" shape="rect" id="matlab"></a></p>
<h1 id="toc332"><span><a href="#top" shape="rect">MATLAB</a></span></h1>
<p><a href="http://www.gnu.org/software/octave/doc/interpreter/" shape="rect">Octave Manual</a><br /><a href="http://www.mathworks.com/help/techdoc/" shape="rect">MATLAB Documentation</a><br /><a href="http://en.wikibooks.org/wiki/MATLAB_Programming/Differences_between_Octave_and_MATLAB" shape="rect">Differences between Octave and MATLAB</a><br /><a href="http://octave.sourceforge.net/packages.php" shape="rect">Octave-Forge Packages</a></p>
<p>The basic data type of MATLAB is a matrix of floats. There is no distinction between a scalar and a 1x1 matrix, and functions that work on scalars typically work on matrices as well by performing the scalar function on each entry in the matrix and returning the results in a matrix with the same dimensions. Operators such as the logical operators ('&amp;' '|' '!'), relational operators ('==', '!=', '&lt;', '&gt;'), and arithmetic operators ('+', '-') all work this way. However the multiplication '*' and division '/' operators perform matrix multiplication and matrix division, respectively. The <tt>.*</tt> and <tt>./</tt> operators are available if entry-wise multiplication or division is desired.</p>
<p>Floats are by default double precision; single precision can be specified with the <em>single</em> constructor. MATLAB has convenient matrix literal notation: commas or spaces can be used to separate row entries, and semicolons or newlines can be used to separate rows.</p>
<p>Arrays and vectors are implemented as single-row (1xn) matrices. As a result an <em>n</em>-element vector must be transposed before it can be multiplied on the right of a <em>mxn</em> matrix.</p>
<p>Numeric literals that lack a decimal point such as <em>17</em> and <em>-34</em> create floats, in contrast to most other programming languages. To create an integer, an integer constructor which specifies the size such as <em>int8</em> and <em>uint16</em> must be used. Matrices of integers are supported, but the entries in a given matrix must all have the same numeric type.</p>
<p>Strings are implemented as single-row (1xn) matrices of characters, and as a result matrices cannot contain strings. If a string is put in matrix literal, each character in the string becomes an entry in the resulting matrix. This is consistent with how matrices are treated if they are nested inside another matrix. The following literals all yield the same string or 1xn matrix of characters:</p>
<div class="code">
<pre xml:space="preserve">
<code>'foo'
[ 'f' 'o' 'o' ]
[ 'foo' ]
[ [ 'f' 'o' 'o' ] ]</code>
</pre></div>
<p><em>true</em> and <em>false</em> are functions which return matrices of ones and zeros. The ones and zeros have type <em>logical</em> instead of <em>double</em>, which is created by the literals 1 and 0. Other than having a different class, the 0 and 1 of type <em>logical</em> behave the same as the 0 and 1 of type <em>double</em>.</p>
<p>MATLAB has a tuple type (in MATLAB terminology, a cell array) which can be used to hold multiple strings. It can also hold values with different types.</p>
<p>Octave is a free, open source application for floating point and matrix computations which can interface with numerical routines implemented in C or Fortran. Octave implements the core MATLAB language, and as a result MATLAB scripts will usually run under Octave. Octave scripts are less likely to run under MATLAB because of extensions which Octave is made to the core language.. Octave's plotting functions use gnuplot.</p>
<p><a name="r" shape="rect" id="r"></a></p>
<h1 id="toc333"><span><a href="#top" shape="rect">R</a></span></h1>
<p><a href="http://cran.r-project.org/doc/manuals/R-intro.html" shape="rect">An Introduction to R</a><br /><a href="http://adv-r.had.co.nz/" shape="rect">Advanced R Programming</a><br /><a href="http://cran.r-project.org/" shape="rect">The Comprehensive R Archive Network</a></p>
<p>The basic data types of R are vectors of floats, vectors of strings, and vectors of booleans. There is no distinction between a scalar and a vector with one entry in it. Functions and operators which accept a scalar argument will typically accept a vector argument, returning a vector of the same size with the scalar operation performed on each the entries of the original vector.</p>
<p>The scalars in a vector must all be of the same type, but R also provides a <em>list</em> data type which can be used as a tuple (entries accessed by index), record (entries accessed by name), or even as a dictionary.</p>
<p>In addition R provides a <em>data frame</em> type which is a list (in R terminology) of vectors all of the same length. Data frames are equivalent to the data sets of other statistical analysis packages.</p>
<p><a name="numpy" shape="rect" id="numpy"></a></p>
<h1 id="toc334"><span><a href="#top" shape="rect">NumPy</a></span></h1>
<p><a href="http://docs.scipy.org/doc/" shape="rect">NumPy and SciPy Documentation</a><br /><a href="http://matplotlib.sourceforge.net/" shape="rect">matplotlib intro</a><br /><a href="http://www.scipy.org/NumPy_for_Matlab_Users" shape="rect">NumPy for Matlab Users</a><br /><a href="http://pandas.pydata.org/pandas-docs/stable/" shape="rect">Pandas Documentation</a><br /><a href="http://pandas.pydata.org/pandas-docs/dev/genindex.html" shape="rect">Pandas Method/Attribute Index</a></p>
<p>NumPy is a Python library which provides a data type called <tt>array</tt>. It differs from the Python <tt>list</tt> data type in the following ways:</p>
<ul><li>N-dimensional. Although the <tt>list</tt> type can be nested to hold higher dimension data, the <tt>array</tt> can hold higher dimension data in a space efficient manner without using indirection.</li><li>homogeneous. The elements of an <tt>array</tt> are restricted to be of a specified type. The NumPy library introduces new primitive types not available in vanilla Python. However, the element type of an array can be <tt>object</tt> which permits storing anything in the array.</li></ul><p>In the reference sheet the <a href="#array" shape="rect">array section</a> covers the vanilla Python <tt>list</tt> and the <a href="#multidimensional-array" shape="rect">multidimensional array section</a> covers the NumPy <tt>array</tt>.</p>
<p><em>List the NumPy primitive types</em></p>
<p>SciPy, Matplotlib, and Pandas are libraries which depend on Numpy.</p>

                    </div>
        </div>
      </div>
      <div id="license-area" class="license-area">
        content of this page licensed under
        <a rel="license" href="http://creativecommons.org/licenses/by-sa/3.0/">
        creative commons attribution-sharealike 3.0</a>
      </div>
    </div>
  </div>
</div>

<script type="text/javascript">

  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-17129977-2']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();

</script>

</body>
</html>
