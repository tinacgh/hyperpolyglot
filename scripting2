<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="content-type" content="text/html;charset=UTF-8"/>
<link rel="icon" type="image/gif" href="/favicon.gif"/>
<link rel="apple-touch-icon" sizes="120x120" href="touch-icon-iphone-retina.png" />
<link rel="apple-touch-icon" sizes="152x152" href="touch-icon-ipad-retina.png" />
<title>Interpreted Languages: JavaScript, PHP, Python, Ruby (Sheet Two) - Hyperpolyglot</title>
<style type="text/css" id="internal-style">
@import url(hyperpolyglot.css);
</style>
<meta http-equiv="content-type" content="text/html;charset=UTF-8"/>
<meta http-equiv="content-language" content="en"/>
</head>
<body>
<div id="container-wrap-wrap">
  <div id="container-wrap">
    <div id="container">
      <div id="header">
        <h1><a href="/"><span>Hyperpolyglot</span></a></h1>
      </div>
      <div id="content-wrap">
        <div id="main-content">
<div id="page-title">
                            Interpreted Languages: JavaScript, PHP, Python, Ruby (Sheet Two)
                        </div>
<div id="page-content">
                        

<p><a name="top" id="top"></a><em>a side-by-side reference sheet</em></p>
<p><strong><a href="/scripting">sheet one</a>:</strong> <a href="/scripting#grammar-invocation">grammar and invocation</a> | <a href="/scripting#var-expr">variables and expressions</a> | <a href="/scripting#arithmetic-logic">arithmetic and logic</a> | <a href="/scripting#strings">strings</a> | <a href="/scripting#regexes">regexes</a> | <a href="/scripting#dates-time">dates and time</a> | <a href="/scripting#arrays">arrays</a> | <a href="/scripting#dictionaries">dictionaries</a> | <a href="/scripting#functions">functions</a> | <a href="/scripting#execution-control">execution control</a> | <a href="/scripting#exceptions">exceptions</a> | <a href="/scripting#concurrency">concurrency</a></p>
<p><strong>sheet two:</strong> <a href="#file-handles">file handles</a> | <a href="#files">files</a> | <a href="#file-fmt">file formats</a> | <a href="#directories">directories</a> | <a href="#processes-environment">processes and environment</a> | <a href="#option-parsing">option parsing</a> | <a href="#libraries-namespaces">libraries and namespaces</a> | <a href="#objects">objects</a> | <a href="#polymorphism">polymorphism</a> | <a href="#reflection">reflection</a> | <a href="#net-web">net and web</a> | <a href="#unit-tests">unit tests</a> | <a href="#debugging-profiling">debugging and profiling</a> | <a href="#java-interop">java interop</a></p>
<table class="wiki-content-table"><tr><th colspan="5"><a name="file-handles" id="file-handles"></a><a href="#file-handles-noate">file handles</a></th>
</tr><tr><th></th>
<th>node</th>
<th>php</th>
<th>python</th>
<th>ruby</th>
</tr><tr><td><a name="std-file-handles" id="std-file-handles"></a><a href="#std-file-handle-note">standard file handles</a></td>
<td>process.stdin<br />
process.stdout<br />
process.stderr</td>
<td><span style="color: gray"><em>only set by CLI; not set when reading script from stdin:</em></span><br /><span style="color: teal">STDIN STDOUT STDERR</span></td>
<td>sys.stdin sys.stdout sys.stderr</td>
<td><span style="color: peru">$stdin $stdout $stderr</span></td>
</tr><tr><td><a name="read-line-stdin" id="read-line-stdin"></a><a href="#read-line-stdin-note">read line from stdin</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td></td>
<td>$<span style="color: peru">line</span> = fgets(<span style="color: teal">STDIN</span>);</td>
<td><span style="color: peru">line</span> = sys.stdin.readline()</td>
<td>line = gets</td>
</tr><tr><td><a name="eof" id="eof"></a><a href="#eof-note">end-of-file behavior</a></td>
<td></td>
<td><span style="color: gray"><em>returns string without newline or</em> FALSE</span></td>
<td><span style="color: gray"><em>returns string without newline or</em> ''</span></td>
<td><span style="color: gray"><em>returns non-empty string without newline or raises</em> EOFError</span></td>
</tr><tr><td><a name="chomp" id="chomp"></a><a href="#chomp-note">chomp</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td></td>
<td>chop($<span style="color: peru">line</span>);</td>
<td><span style="color: peru">line</span> = line.rstrip(<span style="color: maroon">'\r\n'</span>)</td>
<td>line.chomp!</td>
</tr><tr><td><a name="write-line-stdout" id="write-line-stdout"></a><a href="#write-line-stdout-note">write line to stdout</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td>console.log("Hello, World");</td>
<td><span style="color: purple">echo</span> <span style="color: maroon">"Hello, World!\n"</span>;</td>
<td><span style="color: purple">print</span>(<span style="color: maroon">'Hello, World!'</span>)</td>
<td>puts <span style="color: maroon">"Hello, World!"</span></td>
</tr><tr><td><a name="printf" id="printf"></a><a href="#printf-note">write formatted string to stdout</a></td>
<td></td>
<td>printf(<span style="color: maroon">"%.2f\n"</span>, <span style="color: teal">M_PI</span>);</td>
<td><span style="color: purple">import</span> math<br /><br /><span style="color: purple">print</span>(<span style="color: maroon">'%.2f'</span> % math.pi)</td>
<td>printf(<span style="color: maroon">"%.2f\n"</span>, <span style="color: green">Math</span>::<span style="color: green">PI</span>)</td>
</tr><tr><td><a name="open-file" id="open-file"></a><a href="#open-file-note">open file for reading</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td></td>
<td>$<span style="color: peru">f</span> = fopen(<span style="color: maroon">"/etc/hosts"</span>, <span style="color: maroon">"r"</span>);</td>
<td><span style="color: peru">f</span> = <span style="color: purple">open</span>(<span style="color: maroon">'/etc/hosts'</span>)</td>
<td>f = <span style="color: green">File</span>.open(<span style="color: maroon">"/etc/hosts"</span>)</td>
</tr><tr><td><a name="open-file-write" id="open-file-write"></a><a href="#open-file-write-note">open file for writing</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td>var f = fs.openSync("/tmp/test", "w");</td>
<td>$<span style="color: peru">f</span> = fopen(<span style="color: maroon">"/tmp/test"</span>, <span style="color: maroon">"w"</span>);</td>
<td><span style="color: peru">f</span> = <span style="color: purple">open</span>(<span style="color: maroon">'/tmp/test'</span>, <span style="color: maroon">'w'</span>)</td>
<td>f = <span style="color: green">File</span>.open(<span style="color: maroon">"/tmp/test"</span>, <span style="color: maroon">"w"</span>)</td>
</tr><tr><td><a name="file-encoding" id="file-encoding"></a><a href="#file-encoding-note">set file handle encoding</a></td>
<td></td>
<td></td>
<td><span style="color: purple">import</span> codecs<br /><br /><span style="color: peru">fin</span> = codecs.<span style="color: purple">open</span>(<span style="color: maroon">'/tmp/foo'</span>,<br /><span style="white-space: pre-wrap;">  </span>encoding=<span style="color: maroon">'utf-8'</span>)<br /><br /><span style="color: peru">fout</span> = codecs.<span style="color: purple">open</span>(<span style="color: maroon">'/tmp/bar'</span>, <span style="color: maroon">'w'</span>,<br /><span style="white-space: pre-wrap;">  </span>encoding=<span style="color: maroon">'utf-8'</span>)</td>
<td>fin = <span style="color: green">File</span>.open(<span style="color: maroon">"/tmp/foo"</span>, <span style="color: maroon">"r:utf-8"</span>)<br /><br />
fout = <span style="color: green">File</span>.open(<span style="color: maroon">"/tmp/bar"</span>, <span style="color: maroon">"w:utf-8"</span>)</td>
</tr><tr><td><a name="open-file-append" id="open-file-append"></a><a href="#open-file-append-note">open file for appending</a></td>
<td></td>
<td>$<span style="color: peru">f</span> = fopen(<span style="color: maroon">"/tmp/test"</span>, <span style="color: maroon">"a"</span>);</td>
<td><span style="color: peru">f</span> = <span style="color: purple">open</span>(<span style="color: maroon">'/tmp/err.log'</span>, <span style="color: maroon">'a'</span>)</td>
<td>f = <span style="color: green">File</span>.open(<span style="color: maroon">"/tmp/err.log"</span>, <span style="color: maroon">"a"</span>)</td>
</tr><tr><td><a name="close-file" id="close-file"></a><a href="#close-file-note">close file</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td></td>
<td>fclose($<span style="color: peru">f</span>);</td>
<td>f.close()</td>
<td>f.close</td>
</tr><tr><td><a name="close-file-implicitly" id="close-file-implicitly"></a><a href="#close-file-implicitly-note">close file implicitly</a></td>
<td></td>
<td><span style="color: gray"><em>none</em></span></td>
<td><span style="color: purple">with open</span>(<span style="color: maroon">'/tmp/test'</span>, <span style="color: maroon">'w'</span>) <span style="color: purple">as</span> f:<br /><span style="white-space: pre-wrap;">  </span>f.write(<span style="color: maroon">'lorem ipsum\n'</span>)</td>
<td><span style="color: green">File</span>.open(<span style="color: maroon">"/tmp/test"</span>, <span style="color: maroon">"w"</span>) <span style="color: purple">do</span> |f|<br /><span style="white-space: pre-wrap;">  </span>f.puts(<span style="color: maroon">"lorem ipsum"</span>)<br />
end</td>
</tr><tr><td><a name="io-err" id="io-err"></a><a href="#io-err-note">i/o error</a></td>
<td></td>
<td><span style="color: gray"><em>return false value and write warning to stderr</em></span></td>
<td><span style="color: gray"><em>raise</em> IOError <em>exception</em></span></td>
<td><span style="color: gray"><em>raise</em> IOError <em>or subclass of</em> SystemCallError <em>exception</em></span></td>
</tr><tr><td><a name="encoding-err" id="encoding-err"></a><a href="#encoding-err-note">encoding error</a></td>
<td></td>
<td></td>
<td><span style="color: gray"><em>raise</em> UnicodeDecodeError <em>on read; raise</em> UnicodeEncodeError <em>on write</em></span></td>
<td></td>
</tr><tr><td><a name="read-line" id="read-line"></a><a href="#read-line-note">read line</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td></td>
<td>$<span style="color: peru">line</span> = fgets($<span style="color: peru">f</span>);</td>
<td>f.readline()</td>
<td>f.gets</td>
</tr><tr><td><a name="file-iterate" id="file-iterate"></a><a href="#file-iterate-note">iterate over file by line</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td></td>
<td><span style="color: purple">while</span> (!feof($<span style="color: peru">f</span>)) {<br /><span style="white-space: pre-wrap;">  </span>$<span style="color: peru">line</span> = fgets($<span style="color: peru">f</span>);<br /><span style="white-space: pre-wrap;">  </span><span style="color: purple">echo</span> $<span style="color: peru">line</span>;<br />
}</td>
<td><span style="color: purple">for</span> line <span style="color: purple">in</span> f:<br /><span style="white-space: pre-wrap;">  </span><span style="color: purple">print</span>(line)</td>
<td>f.each <span style="color: purple">do</span> |line|<br /><span style="white-space: pre-wrap;">  </span>print(line)<br /><span style="color: purple">end</span></td>
</tr><tr><td><a name="read-file-array" id="read-file-array"></a><a href="#read-file-array-note">read file into array of strings</a></td>
<td></td>
<td>$<span style="color: peru">a</span> = file(<span style="color: maroon">"/etc/hosts"</span>);</td>
<td><span style="color: peru">a</span> = f.readlines()</td>
<td>a = f.lines.to_a</td>
</tr><tr><td><a name="read-file-str" id="read-file-str"></a><a href="#read-file-str-note">read file into string</a></td>
<td>var fs = require('fs');<br /><br />
var s = fs.readFileSync('/etc/hosts', 'utf8');</td>
<td>$<span style="color: peru">s</span> = file_get_contents(<br /><span style="white-space: pre-wrap;">  </span><span style="color: maroon">"/etc/hosts"</span>);</td>
<td><span style="color: peru">s</span> = f.read()</td>
<td>s = f.read</td>
</tr><tr><td><a name="write-str" id="write-str"></a><a href="#write-str-note">write string</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td></td>
<td>fwrite($<span style="color: peru">f</span>, <span style="color: maroon">"lorem ipsum"</span>);</td>
<td>f.write(<span style="color: maroon">'lorem ipsum'</span>)</td>
<td>f.write(<span style="color: maroon">"lorem ipsum"</span>)</td>
</tr><tr><td><a name="write-line" id="write-line"></a><a href="#write-line-note">write line</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td></td>
<td>fwrite($<span style="color: peru">f</span>, <span style="color: maroon">"lorem ipsum"</span>);</td>
<td>f.write(<span style="color: maroon">'lorem ipsum\n'</span>)</td>
<td>f.puts(<span style="color: maroon">"lorem ipsum"</span>)</td>
</tr><tr><td><a name="flush" id="flush"></a><a href="#flush-note">flush file handle</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td></td>
<td><span style="color: gray"><em>CLI output isn't buffered</em></span><br />
fflush($<span style="color: peru">f</span>);</td>
<td>f.flush()</td>
<td>f.flush</td>
</tr><tr><td><a name="eof-test" id="eof-test"></a><a href="#eof-test-note">end-of-file test</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td></td>
<td>feof($<span style="color: peru">f</span>)</td>
<td><span style="color: gray"><em>none</em></span></td>
<td>f.eof?</td>
</tr><tr><td><a name="seek" id="seek"></a><a href="#seek-note">get and set file handle position</a></td>
<td></td>
<td>ftell($<span style="color: peru">f</span>)<br />
fseek($<span style="color: peru">f</span>, 0);</td>
<td>f.tell()<br />
f.seek(0)</td>
<td>f.tell<br />
f.seek(0)<br /><br />
f.pos<br />
f.pos = 0</td>
</tr><tr><td><a name="tmp-file" id="tmp-file"></a><a href="#tmp-file-note">open temporary file</a></td>
<td></td>
<td>$<span style="color: peru">f</span> = tmpfile();<br /><br />
fwrite($<span style="color: peru">f</span>, <span style="color: maroon">"lorem ipsum\n"</span>);<br /><br /><span style="color: gray"># no way to get file name</span><br /><br />
fclose($<span style="color: peru">f</span>);<br /><br /><span style="color: gray"><em>file is removed when file handle is closed</em></span></td>
<td><span style="color: purple">import</span> tempfile<br /><br /><span style="color: peru">f</span> = tempfile.NamedTemporaryFile()<br /><br />
f.write(<span style="color: maroon">'lorem ipsum\n'</span>)<br /><br /><span style="color: purple">print</span>(<span style="color: maroon">"tmp file: %s"</span> % f.name)<br /><br />
f.close()<br /><br /><span style="color: gray"><em>file is removed when file handle is closed</em></span></td>
<td>require <span style="color: maroon">'tempfile'</span><br /><br />
f = <span style="color: green">Tempfile</span>.new(<span style="color: maroon">''</span>)<br /><br />
f.puts <span style="color: maroon">"lorem ipsum"</span><br /><br />
puts <span style="color: maroon">"tmp file: #{f.path}"</span><br /><br />
f.close<br /><br /><span style="color: gray"><em>file is removed when file handle is garbage-collected or interpreter exits</em></span></td>
</tr><tr><td><a name="stringio" id="stringio"></a><a href="#stringio-note">in memory file</a></td>
<td></td>
<td>$<span style="color: peru">meg</span> = 1024 * 1024;<br />
$<span style="color: peru">mem</span> = <span style="color: maroon">"php:<span style="white-space: pre-wrap;">//</span>temp/maxmemory:$meg"</span>;<br />
$<span style="color: peru">f</span> = fopen($<span style="color: peru">mem</span>, <span style="color: maroon">"r+"</span>);<br />
fputs($<span style="color: peru">f</span>, <span style="color: maroon">"lorem ipsum"</span>);<br />
rewind($<span style="color: peru">f</span>);<br />
$<span style="color: peru">s</span> = fread($<span style="color: peru">f</span>, $<span style="color: peru">meg</span>);</td>
<td><span style="color: purple">from</span> StringIO <span style="color: purple">import</span> StringIO<br /><br /><span style="color: peru">f</span> = StringIO()<br />
f.write(<span style="color: maroon">'lorem ipsum\n'</span>)<br /><span style="color: peru">s</span> = f.getvalue()<br /><br /><span style="color: gray"><em>Python 3 moved</em> StringIO <em>to the</em> io <em>module</em></span></td>
<td>require <span style="color: maroon">'stringio'</span><br /><br />
f = <span style="color: green">StringIO</span>.new<br />
f.puts(<span style="color: maroon">"lorem ipsum"</span>)<br />
f.rewind<br />
s = f.read</td>
</tr><tr><th colspan="5"><a name="files" id="files"></a><a href="#files-note">files</a></th>
</tr><tr><th></th>
<th>node</th>
<th>php</th>
<th>python</th>
<th>ruby</th>
</tr><tr><td><a name="file-test" id="file-test"></a><a href="#file-test-note">file exists test, file regular test</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td>var fs = require('fs');<br /><br />
var qry = fs.existsSync('/etc/hosts');<br /><br />
var stat = fs.statSync('/etc/hosts');<br />
var qry2 = stat.isFile();</td>
<td>file_exists(<span style="color: maroon">"/etc/hosts"</span>)<br />
is_file(<span style="color: maroon">"/etc/hosts"</span>)</td>
<td>os.path.exists(<span style="color: maroon">'/etc/hosts'</span>)<br />
os.path.isfile(<span style="color: maroon">'/etc/hosts'</span>)</td>
<td><span style="color: green">File</span>.exists?(<span style="color: maroon">"/etc/hosts"</span>)<br /><span style="color: green">File</span>.file?(<span style="color: maroon">"/etc/hosts"</span>)</td>
</tr><tr><td><a name="file-size" id="file-size"></a><a href="#file-size-note">file size</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td>var fs = require('fs');<br /><br />
var stat = fs.statSync('/etc/hosts');<br />
var sz = stat.size;</td>
<td>filesize(<span style="color: maroon">"/etc/hosts"</span>)</td>
<td>os.path.getsize(<span style="color: maroon">'/etc/hosts'</span>)</td>
<td><span style="color: green">File</span>.size(<span style="color: maroon">"/etc/hosts"</span>)</td>
</tr><tr><td><a name="readable-writable-executable" id="readable-writable-executable"></a><a href="#readable-writable-executable-note">is file readable, writable, executable</a></td>
<td></td>
<td>is_readable(<span style="color: maroon">"/etc/hosts"</span>)<br />
is_writable(<span style="color: maroon">"/etc/hosts"</span>)<br />
is_executable(<span style="color: maroon">"/etc/hosts"</span>)</td>
<td>os.access(<span style="color: maroon">'/etc/hosts'</span>, os.R_OK)<br />
os.access(<span style="color: maroon">'/etc/hosts'</span>, os.W_OK)<br />
os.access(<span style="color: maroon">'/etc/hosts'</span>, os.X_OK)</td>
<td><span style="color: green">File</span>.readable?(<span style="color: maroon">"/etc/hosts"</span>)<br /><span style="color: green">File</span>.writable?(<span style="color: maroon">"/etc/hosts"</span>)<br /><span style="color: green">File</span>.executable?(<span style="color: maroon">"/etc/hosts"</span>)</td>
</tr><tr><td><a name="chmod" id="chmod"></a><a href="#chmod-note">set file permissions</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td>var fs = require('fs');<br /><br />
fs.chmodSync('/tmp/foo',<br /><span style="white-space: pre-wrap;">  </span>parseInt('755', 8));</td>
<td>chmod(<span style="color: maroon">"/tmp/foo"</span>, 0755);</td>
<td>os.chmod(<span style="color: maroon">'/tmp/foo'</span>, 0755)</td>
<td><span style="color: green">File</span>.chmod(0755, <span style="color: maroon">"/tmp/foo"</span>)</td>
</tr><tr><td><a name="last-modification-time" id="last-modification-time"></a><a href="#last-modification-time-note">last modification time</a></td>
<td>var fs = require('fs');<br /><br />
var stat = fs.statSync('/etc/hosts');<br />
var dt = stat.mtime;</td>
<td><span style="color: gray"># unix epoch:</span><br />
$<span style="color: peru">t</span> = stat(<span style="color: maroon">'/etc/passwd'</span>)[<span style="color: maroon">'mtime'</span>];<br /><br /><span style="color: gray"># DateTime object:</span><br />
$<span style="color: peru">t2</span> = <span style="color: purple">new</span> <span style="color: green">DateTime</span>(<span style="color: maroon">'UTC'</span>);<br />
$<span style="color: peru">t2</span>-&gt;setTimestamp($<span style="color: peru">t</span>);</td>
<td><span style="color: purple">from</span> datetime <span style="color: purple">import</span> datetime <span style="color: purple">as</span> dt<br /><br /><span style="color: gray"># unix epoch:</span><br /><span style="color: peru">t</span> = os.stat(<span style="color: maroon">'/etc/passwd'</span>).st_mtime<br /><br /><span style="color: gray"># datetime object:</span><br /><span style="color: peru">t2</span> = dt.fromtimestamp(t)</td>
<td><span style="color: gray"># Time object:</span><br />
t2 = <span style="color: green">File</span>.stat(<span style="color: maroon">'/etc/passwd'</span>).mtime<br /><br /><span style="color: gray"># unix epoch:</span><br />
t = t2.to_i</td>
</tr><tr><td><a name="file-cp-rm-mv" id="file-cp-rm-mv"></a><a href="#file-cp-rm-mv-note">copy file, remove file, rename file</a></td>
<td><span style="color: gray"># npm install fs-extra</span><br />
var fs = require('fs-extra');<br /><br />
fs.copySync('/tmp/foo', '/tmp/bar');<br />
fs.unlinkSync('/tmp/foo');<br />
fs.renameSync('/tmp/bar', '/tmp/foo');</td>
<td>copy(<span style="color: maroon">"/tmp/foo"</span>, <span style="color: maroon">"/tmp/bar"</span>);<br />
unlink(<span style="color: maroon">"/tmp/foo"</span>);<br />
rename(<span style="color: maroon">"/tmp/bar"</span>, <span style="color: maroon">"/tmp/foo"</span>);</td>
<td><span style="color: purple">import</span> shutil<br /><br />
shutil.copy(<span style="color: maroon">'/tmp/foo'</span>, <span style="color: maroon">'/tmp/bar'</span>)<br />
os.remove(<span style="color: maroon">'/tmp/foo'</span>)<br />
shutil.move(<span style="color: maroon">'/tmp/bar'</span>, <span style="color: maroon">'/tmp/foo'</span>)</td>
<td>require <span style="color: maroon">'fileutils'</span><br /><br /><span style="color: green">FileUtils</span>.cp(<span style="color: maroon">"/tmp/foo"</span>, <span style="color: maroon">"/tmp/bar"</span>)<br /><span style="color: green">FileUtils</span>.rm(<span style="color: maroon">"/tmp/foo"</span>)<br /><span style="color: green">FileUtils</span>.mv(<span style="color: maroon">"/tmp/bar"</span>, <span style="color: maroon">"/tmp/foo"</span>)</td>
</tr><tr><td><a name="symlink" id="symlink"></a><a href="#symlink-note">create symlink, symlink test, readlink</a></td>
<td>var fs = require('fs');<br /><br />
fs.symlinkSync('/etc/hosts',<br /><span style="white-space: pre-wrap;">  </span>'/tmp/hosts');<br />
var stat = fs.statSync('/tmp/hosts');<br />
stat.isSymbolicLink();<br />
var path = fs.readlinkSync(<br /><span style="white-space: pre-wrap;">  </span>'/tmp/hosts');</td>
<td>symlink(<span style="color: maroon">"/etc/hosts"</span>, <span style="color: maroon">"/tmp/hosts"</span>);<br />
is_link(<span style="color: maroon">"/etc/hosts"</span>)<br />
readlink(<span style="color: maroon">"/tmp/hosts"</span>)</td>
<td>os.symlink(<span style="color: maroon">'/etc/hosts'</span>,<br /><span style="white-space: pre-wrap;">  </span><span style="color: maroon">'/tmp/hosts'</span>)<br />
os.path.islink(<span style="color: maroon">'/tmp/hosts'</span>)<br />
os.path.realpath(<span style="color: maroon">'/tmp/hosts'</span>)</td>
<td><span style="color: green">File</span>.symlink(<span style="color: maroon">"/etc/hosts"</span>,<br /><span style="white-space: pre-wrap;">  </span><span style="color: maroon">"/tmp/hosts"</span>)<br /><span style="color: green">File</span>.symlink?(<span style="color: maroon">"/etc/hosts"</span>)<br /><span style="color: green">File</span>.realpath(<span style="color: maroon">"/tmp/hosts"</span>)</td>
</tr><tr><td><a name="unused-file-name" id="unused-file-name"></a><a href="#unused-file-name-note">generate unused file name</a></td>
<td></td>
<td>$<span style="color: peru">path</span> = tempnam(<span style="color: maroon">"/tmp"</span>, <span style="color: maroon">"foo"</span>);<br />
$<span style="color: peru">f</span> = fopen($<span style="color: peru">path</span>, <span style="color: maroon">"w"</span>);</td>
<td><span style="color: purple">import</span> tempfile<br /><br />
f, path = tempfile.mkstemp(<br /><span style="white-space: pre-wrap;">  </span>prefix=<span style="color: maroon">'foo'</span>,<br /><span style="white-space: pre-wrap;">  </span>dir=<span style="color: maroon">'/tmp'</span>)</td>
<td></td>
</tr><tr><th colspan="5"><a name="file-fmt" id="file-fmt"></a><a href="#file-fmt-note">file formats</a></th>
</tr><tr><th></th>
<th>node</th>
<th>php</th>
<th>python</th>
<th>ruby</th>
</tr><tr><td><a name="parse-csv" id="parse-csv"></a><a href="#parse-csv-note">parse csv</a></td>
<td>var fs = require('fs');<br /><span style="color: gray"># npm install csv</span><br />
var csv = require('csv');<br /><br />
var s = fs.readFileSync('no-header.csv');<br />
var a;<br />
csv().from.string(s).to.array(function(d) { a = d });</td>
<td>$<span style="color: peru">f</span> = fopen(<span style="color: maroon">"no-header.csv"</span>, <span style="color: maroon">"r"</span>);<br /><span style="color: purple">while</span> (($<span style="color: peru">row</span> = fgetcsv($<span style="color: peru">f</span>)) != <span style="color: teal">FALSE</span>) {<br /><span style="white-space: pre-wrap;">  </span><span style="color: purple">echo</span> implode(<span style="color: maroon">"\t"</span>, $<span style="color: peru">row</span>) . <span style="color: maroon">"\n"</span>;<br />
}</td>
<td><span style="color: purple">import</span> csv<br /><br /><span style="color: purple">with open</span>(<span style="color: maroon">'foo.csv'</span>) <span style="color: purple">as</span> f:<br /><span style="white-space: pre-wrap;">  </span><span style="color: peru">cr</span> = csv.reader(f)<br /><span style="white-space: pre-wrap;">  </span><span style="color: purple">for</span> row <span style="color: purple">in</span> cr:<br /><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span><span style="color: purple">print</span>(<span style="color: maroon">'\t'</span>.join(row))</td>
<td>require <span style="color: maroon">'csv'</span><br /><br /><span style="color: green">CSV</span>.foreach(<span style="color: maroon">"foo.csv"</span>) <span style="color: purple">do</span> |row|<br /><span style="white-space: pre-wrap;">  </span>puts row.join(<span style="color: maroon">"\t"</span>)<br /><span style="color: purple">end</span></td>
</tr><tr><td><a name="generate-csv" id="generate-csv"></a><a href="#generate-csv-note">generate csv</a></td>
<td><span style="color: gray"># npm install csv</span><br />
var csv = require('csv');<br /><br />
var a = [['one', 'une', 'uno'],<br />
['two', 'deux', 'dos']];<br /><br />
var s;<br />
csv().from.array(a).to.string(function (o) { s = o; });</td>
<td></td>
<td><span style="color: purple">import</span> csv<br /><br /><span style="color: purple">with open</span>(<span style="color: maroon">'foo.csv'</span>, <span style="color: maroon">'w'</span>) <span style="color: purple">as</span> f:<br /><span style="white-space: pre-wrap;">  </span><span style="color: peru">cw</span> = csv.writer(f)<br /><span style="white-space: pre-wrap;">  </span>cw.writerow([<span style="color: maroon">'one'</span>, <span style="color: maroon">'une'</span>, <span style="color: maroon">'uno'</span>])<br /><span style="white-space: pre-wrap;">  </span>cw.writerow([<span style="color: maroon">'two'</span>, <span style="color: maroon">'deux'</span>, <span style="color: maroon">'dos'</span>])</td>
<td>require <span style="color: maroon">'csv'</span><br /><br /><span style="color: green">CSV</span>.open(<span style="color: maroon">"foo.csv"</span>, <span style="color: maroon">"w"</span>) <span style="color: purple">do</span> |csv|<br /><span style="white-space: pre-wrap;">  </span>csv <span style="white-space: pre-wrap;">&lt;&lt;</span> [<span style="color: maroon">"one"</span>, <span style="color: maroon">"une"</span>, <span style="color: maroon">"uno"</span>]<br /><span style="white-space: pre-wrap;">  </span>csv <span style="white-space: pre-wrap;">&lt;&lt;</span> [<span style="color: maroon">"two"</span>, <span style="color: maroon">"deux"</span>, <span style="color: maroon">"dos"</span>]<br /><span style="color: purple">end</span></td>
</tr><tr><td><a name="json" id="json"></a><a href="#json-note">json generate/parse</a></td>
<td>var d1 = {'t': 1, 'f': 0};<br />
var s = JSON.stringify(d1);<br />
var d2 = JSON.parse(s);</td>
<td>$<span style="color: #cd853f">a</span> = array(<span style="color: maroon">"t"</span> =&gt; 1, <span style="color: maroon">"f"</span> =&gt; 0);<br />
$<span style="color: #cd853f">s</span> = json_encode($<span style="color: #cd853f">a</span>);<br />
$<span style="color: #cd853f">d</span> = json_decode($<span style="color: #cd853f">s</span>, <span style="color: teal">TRUE</span>);</td>
<td><span style="color: purple">import</span> json<br /><br /><span style="color: #cd853f">s</span> = json.dumps({<span style="color: maroon">'t'</span>: 1, <span style="color: maroon">'f'</span>: 0})<br /><span style="color: #cd853f">d</span> = json.loads(s)</td>
<td>require <span style="color: maroon">'json'</span><br /><br />
s = {<span style="color: maroon">'t'</span> =&gt; 1,<span style="color: maroon">'f'</span> =&gt; 0}.to_json<br />
d = <span style="color: green">JSON</span>.parse(s)</td>
</tr><tr><td><a name="generate-xml" id="generate-xml"></a><a href="#generate-xml-note">generate xml</a></td>
<td><span style="color: gray"># npm install xmlbuilder</span><br />
var builder = require('xmlbuilder');<br /><br />
var xml = builder.create('a').ele('b', {id: 123}, 'foo').end();</td>
<td>$<span style="color: #cd853f">xml</span> = <span style="color: maroon">"&lt;a&gt;&lt;/a&gt;"</span>;<br />
$<span style="color: #cd853f">sxe</span> = <span style="color: purple">new</span> <span style="color: green">SimpleXMLElement</span>($<span style="color: #cd853f">xml</span>);<br />
$b = $<span style="color: #cd853f">sxe</span>-&gt;addChild(<span style="color: maroon">"b"</span>, <span style="color: maroon">"foo"</span>);<br />
$b-&gt;addAttribute("id", "123");<br /><br /><span style="color: gray"># &lt;a&gt;&lt;b id="123"&gt;foo&lt;/b&gt;&lt;/a&gt;:</span><br /><span style="color: purple">echo</span> $<span style="color: #cd853f">sxe</span>-&gt;asXML();</td>
<td><span style="color: purple">import</span> xml.etree.ElementTree <span style="color: purple">as</span> ET<br /><br /><span style="color: peru">builder</span> = ET.TreeBuilder()<br />
builder.start(<span style="color: maroon">'a'</span>, {})<br />
builder.start(<span style="color: maroon">'b'</span>, {'id': '123'})<br />
builder.data(<span style="color: maroon">'foo'</span>)<br />
builder.end(<span style="color: maroon">'b'</span>)<br />
builder.end(<span style="color: maroon">'a'</span>)<br /><span style="color: peru">et</span> = builder.close()<br /><br /><span style="color: gray"># &lt;a&gt;&lt;b id="123"&gt;foo&lt;/b&gt;&lt;/a&gt;:</span><br />
print(ET.tostring(et))</td>
<td><span style="color: gray"># gem install builder</span><br />
require <span style="color: maroon">'builder'</span><br /><br />
builder = <span style="color: green">Builder</span>::<span style="color: green">XmlMarkup</span>.new<br />
xml = builder.a <span style="color: purple">do</span> |child|<br /><span style="white-space: pre-wrap;">  </span>child.b(<span style="color: maroon">"foo"</span>, :id=&gt;"123")<br /><span style="color: purple">end</span><br /><br /><span style="color: gray"># &lt;a&gt;&lt;b id="123"&gt;foo&lt;/b&gt;&lt;/a&gt;:</span><br /><span style="color: purple">puts</span> xml</td>
</tr><tr><td><a name="parse-xml" id="parse-xml"></a><a href="#parse-xml-note">parse xml</a><br /><span style="color: gray"><em>all nodes matching xpath query; first node matching xpath query</em></span></td>
<td><span style="color: gray"># npm install xmldom xpath</span><br />
var dom = require('xmldom').DOMParser;<br />
var xpath = require('xpath');<br /><br />
var xml = '&lt;a&gt;&lt;b&gt;&lt;c ref="3"&gt;foo&lt;/c&gt;&lt;/b&gt;&lt;/a&gt;';<br />
var doc = new dom().parseFromString(xml);<br />
var nodes = xpath.select('/a/b/c', doc);<br />
nodes.length;<br />
nodes[0].firstChild.data;</td>
<td>$<span style="color: #cd853f">xml</span> = <span style="color: maroon">"&lt;a&gt;&lt;b&gt;&lt;c ref='3'&gt;foo&lt;/c&gt;&lt;/b&gt;&lt;/a&gt;"</span>;<br /><br /><span style="color: gray"># returns NULL and emits warning if not<br />
# well-formed:</span><br />
$<span style="color: #cd853f">doc</span> = simplexml_load_string($<span style="color: #cd853f">xml</span>);<br /><br />
$<span style="color: #cd853f">nodes</span> = $<span style="color: #cd853f">doc</span>-&gt;xpath(<span style="color: maroon">"/a/b/c"</span>);<br /><span style="color: purple">echo</span> count($<span style="color: peru">nodes</span>);<br /><span style="color: purple">echo</span> $<span style="color: #cd853f">nodes</span>[0];<br /><br />
$<span style="color: peru">node</span> = $<span style="color: peru">nodes</span>[0];<br /><span style="color: purple">echo</span> $<span style="color: peru">node</span>;<br /><span style="color: purple">echo</span> $<span style="color: peru">node</span>[<span style="color: maroon">"ref"</span>];</td>
<td><span style="color: purple">from</span> xml.etree <span style="color: purple">import</span> ElementTree<br /><br /><span style="color: #cd853f">xml</span> = <span style="color: maroon">'&lt;a&gt;&lt;b&gt;&lt;c ref="3"&gt;foo&lt;/c&gt;&lt;/b&gt;&lt;/a&gt;'</span><br /><br /><span style="color: gray"># raises xml.etree.ElementTree.ParseError<br />
# if not well-formed:</span><br /><span style="color: #cd853f">doc</span> = ElementTree.fromstring(xml)<br /><br /><span style="color: peru">nodes</span> = doc.findall(<span style="color: maroon">'b/c'</span>)<br /><span style="color: purple">print</span>(len(nodes))<br /><span style="color: purple">print</span>(nodes[0].text)<br /><br /><span style="color: #cd853f">node</span> = doc.find(<span style="color: maroon">'b/c'</span>)<br /><span style="color: purple">print</span>(node.text)<br /><span style="color: purple">print</span>(node.attrib[<span style="color: maroon">'ref'</span>])</td>
<td>require <span style="color: maroon">'rexml/document'</span><br />
include <span style="color: green">REXML</span><br /><br />
xml = <span style="color: maroon">"&lt;a&gt;&lt;b&gt;&lt;c ref='3'&gt;foo&lt;/c&gt;&lt;/b&gt;&lt;/a&gt;"</span><br /><br /><span style="color: gray"># raises REXML::ParseException if<br />
# not well-formed:</span><br />
doc = <span style="color: green">Document</span>.new(xml)<br /><br />
nodes = <span style="color: green">XPath</span>.match(doc,<span style="color: maroon">"/a/b/c"</span>)<br />
puts nodes.size<br />
puts nodes[0].text<br /><br />
node = <span style="color: green">XPath</span>.first(doc,<span style="color: maroon">"/a/b/c"</span>)<br />
puts node.text<br />
puts node.attributes[<span style="color: maroon">"ref"</span>]</td>
</tr><tr><td><a name="parse-html" id="parse-html"></a><a href="#parse-html-note">parse html</a></td>
<td></td>
<td>$<span style="color: peru">html</span> = file_get_contents(<span style="color: maroon">"foo.html"</span>);<br />
$<span style="color: peru">doc</span> = <span style="color: purple">new</span> <span style="color: green">DOMDocument</span>;<br />
$<span style="color: peru">doc</span>-&gt;loadHTML($<span style="color: peru">html</span>);<br />
$<span style="color: peru">xpath</span> = <span style="color: purple">new</span> <span style="color: green">DOMXPath</span>($<span style="color: peru">doc</span>);<br /><br />
$<span style="color: peru">nodes</span> = $<span style="color: peru">xpath</span>-&gt;query(<span style="color: maroon">"<span style="white-space: pre-wrap;">//</span>a/@href"</span>);<br /><span style="color: purple">foreach</span>($<span style="color: peru">nodes</span> <span style="color: purple">as</span> $<span style="color: peru">href</span>) {<br /><span style="white-space: pre-wrap;">  </span><span style="color: purple">echo</span> $<span style="color: peru">href</span>-&gt;<span style="color: peru">nodeValue</span>;<br />
}</td>
<td><span style="color: gray"># pip install beautifulsoup4</span><br /><span style="color: purple">import</span> bs4<br /><br /><span style="color: peru">html</span> = <span style="color: purple">open</span>(<span style="color: maroon">'foo.html'</span>).read()<br /><span style="color: peru">doc</span> = bs4.BeautifulSoup(html)<br /><br /><span style="color: purple">for</span> link <span style="color: purple">in</span> doc.find_all(<span style="color: maroon">'a'</span>):<br /><span style="white-space: pre-wrap;">  </span>print(link.get(<span style="color: maroon">'href'</span>))</td>
<td><span style="color: gray"># gem install nokogiri</span><br />
require <span style="color: maroon">'nokogiri'</span><br /><br />
html = <span style="color: green">File</span>.open(<span style="color: maroon">"foo.html"</span>).read<br />
doc = <span style="color: green">Nokogiri</span>::<span style="color: green">HTML</span>(html)<br />
doc = doc.xpath(<span style="color: maroon">"<span style="white-space: pre-wrap;">//</span>a"</span>).each <span style="color: purple">do</span> |link|<br /><span style="white-space: pre-wrap;">  </span>puts link[<span style="color: maroon">"href"</span>]<br /><span style="color: purple">end</span></td>
</tr><tr><th colspan="5"><a name="directories" id="directories"></a><a href="#directories-note">directories</a></th>
</tr><tr><th></th>
<th>node</th>
<th>php</th>
<th>python</th>
<th>ruby</th>
</tr><tr><td><a name="working-dir" id="working-dir"></a><a href="#working-dir-note">working directory</a></td>
<td>var old_dir = process.cwd();<br /><br />
process.chdir("/tmp");</td>
<td>$<span style="color: peru">old_dir</span> = getcwd();<br /><br />
chdir(<span style="color: maroon">"/tmp"</span>);</td>
<td><span style="color: peru">old_dir</span> = os.path.abspath(<span style="color: maroon">'.'</span>)<br /><br />
os.chdir(<span style="color: maroon">'/tmp'</span>)</td>
<td>old_dir = <span style="color: green">Dir</span>.pwd<br /><br /><span style="color: green">Dir</span>.chdir(<span style="color: maroon">"/tmp"</span>)</td>
</tr><tr><td><a name="build-pathname" id="build-pathname"></a><a href="#build-pathname-note">build pathname</a></td>
<td></td>
<td><span style="color: maroon">"/etc"</span> . <span style="color: teal">DIRECTORY_SEPARATOR</span> . <span style="color: maroon">"hosts"</span></td>
<td>os.path.join(<span style="color: maroon">'/etc'</span>, <span style="color: maroon">'hosts'</span>)</td>
<td><span style="color: green">File</span>.join(<span style="color: maroon">"/etc"</span>, <span style="color: maroon">"hosts"</span>)</td>
</tr><tr><td><a name="dirname-basename" id="dirname-basename"></a><a href="#dirname-basename-note">dirname and basename</a></td>
<td></td>
<td>dirname(<span style="color: maroon">"/etc/hosts"</span>)<br />
basename(<span style="color: maroon">"/etc/hosts"</span>)</td>
<td>os.path.dirname(<span style="color: maroon">'/etc/hosts'</span>)<br />
os.path.basename(<span style="color: maroon">'/etc/hosts'</span>)</td>
<td><span style="color: green">File</span>.dirname(<span style="color: maroon">"/etc/hosts"</span>)<br /><span style="color: green">File</span>.basename(<span style="color: maroon">"/etc/hosts"</span>)</td>
</tr><tr><td><a name="absolute-pathname" id="absolute-pathname"></a><a href="#absolute-pathname-note">absolute pathname</a><br /><span style="color: gray"><em>and tilde expansion</em></span></td>
<td></td>
<td><span style="color: gray"># file must exist; symbolic links are<br />
# resolved:</span><br />
realpath(<span style="color: maroon">"foo"</span>)<br />
realpath(<span style="color: maroon">"/foo"</span>)<br />
realpath(<span style="color: maroon">"../foo"</span>)<br />
realpath(<span style="color: maroon">"./foo"</span>)<br /><span style="color: gray"># no function for tilde expansion</span></td>
<td><span style="color: gray"># symbolic links are not resolved:</span><br />
os.path.abspath(<span style="color: maroon">'foo'</span>)<br />
os.path.abspath(<span style="color: maroon">'/foo'</span>)<br />
os.path.abspath(<span style="color: maroon">'../foo'</span>)<br />
os.path.abspath(<span style="color: maroon">'./foo'</span>)<br />
os.path.expanduser(<span style="color: maroon">'~/foo'</span>)</td>
<td><span style="color: gray"># symbolic links are not resolved:</span><br /><span style="color: green">File</span>.expand_path(<span style="color: maroon">"foo"</span>)<br /><span style="color: green">File</span>.expand_path(<span style="color: maroon">"/foo"</span>)<br /><span style="color: green">File</span>.expand_path(<span style="color: maroon">"../foo"</span>)<br /><span style="color: green">File</span>.expand_path(<span style="color: maroon">"./foo"</span>)<br /><span style="color: green">File</span>.expand_path(<span style="color: maroon">"~/foo"</span>)</td>
</tr><tr><td><a name="dir-iterate" id="dir-iterate"></a><a href="#dir-iterate-note">iterate over directory by file</a></td>
<td></td>
<td>if ($<span style="color: peru">dir</span> = opendir(<span style="color: maroon">"/etc"</span>)) {<br /><span style="white-space: pre-wrap;">  </span><span style="color: purple">while</span> ($<span style="color: peru">file</span> = readdir($<span style="color: peru">dir</span>)) {<br /><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span><span style="color: purple">echo</span> <span style="color: maroon">"$file\n"</span>;<br /><span style="white-space: pre-wrap;">  </span>}<br /><span style="white-space: pre-wrap;">  </span>closedir($<span style="color: peru">dir</span>);<br />
}</td>
<td><span style="color: purple">for</span> filename <span style="color: purple">in</span> os.listdir(<span style="color: maroon">'/etc'</span>):<br /><span style="white-space: pre-wrap;">  </span><span style="color: purple">print</span>(filename)</td>
<td><span style="color: green">Dir</span>.open(<span style="color: maroon">"/etc"</span>).each <span style="color: purple">do</span> |file|<br /><span style="white-space: pre-wrap;">  </span>puts file<br /><span style="color: purple">end</span></td>
</tr><tr><td><a name="glob" id="glob"></a><a href="#glob-note">glob paths</a></td>
<td></td>
<td><span style="color: purple">foreach</span> (glob(<span style="color: maroon">"/etc/*"</span>) <span style="color: purple">as</span> $<span style="color: peru">file</span>) {<br /><span style="white-space: pre-wrap;">  </span><span style="color: purple">echo</span> <span style="color: maroon">"$file\n"</span>;<br />
}</td>
<td><span style="color: purple">import</span> glob<br /><br /><span style="color: purple">for</span> path <span style="color: purple">in</span> glob.glob(<span style="color: maroon">'/etc/*'</span>):<br /><span style="white-space: pre-wrap;">  </span><span style="color: purple">print</span>(path)</td>
<td><span style="color: green">Dir</span>.glob(<span style="color: maroon">"/etc/*"</span>).each <span style="color: purple">do</span> |path|<br /><span style="white-space: pre-wrap;">  </span>puts path<br /><span style="color: purple">end</span></td>
</tr><tr><td><a name="mkdir" id="mkdir"></a><a href="#mkdir-note">make directory</a></td>
<td></td>
<td>mkdir(<span style="color: maroon">"/tmp/foo/bar"</span>, 0755, <span style="color: teal">TRUE</span>);</td>
<td><span style="color: peru">dirname</span> = <span style="color: maroon">'/tmp/foo/bar'</span><br /><span style="color: purple">if not</span> os.path.isdir(dirname):<br /><span style="white-space: pre-wrap;">  </span>os.makedirs(dirname)</td>
<td>require <span style="color: maroon">'fileutils'</span><br /><br /><span style="color: green">FileUtils</span>.mkdir_p(<span style="color: maroon">"/tmp/foo/bar"</span>)</td>
</tr><tr><td><a name="recursive-cp" id="recursive-cp"></a><a href="#recursive-cp-note">recursive copy</a></td>
<td></td>
<td><span style="color: gray"><em>none</em></span></td>
<td><span style="color: purple">import</span> shutil<br /><br />
shutil.copytree(<span style="color: maroon">'/tmp/foodir'</span>,<br /><span style="white-space: pre-wrap;">  </span><span style="color: maroon">'/tmp/bardir'</span>)</td>
<td>require <span style="color: maroon">'fileutils'</span><br /><br /><span style="color: green">FileUtils</span>.cp_r(<span style="color: maroon">"/tmp/foodir"</span>,<br /><span style="white-space: pre-wrap;">  </span>"/tmp/bardir")</td>
</tr><tr><td><a name="rmdir" id="rmdir"></a><a href="#rmdir-note">remove empty directory</a></td>
<td></td>
<td>rmdir(<span style="color: maroon">"/tmp/foodir"</span>);</td>
<td>os.rmdir(<span style="color: maroon">'/tmp/foodir'</span>)</td>
<td><span style="color: green">File</span>.rmdir(<span style="color: maroon">"/tmp/foodir"</span>)</td>
</tr><tr><td><a name="rm-rf" id="rm-rf"></a><a href="#rm-rf-note">remove directory and contents</a></td>
<td></td>
<td><span style="color: gray"><em>none</em></span></td>
<td><span style="color: purple">import</span> shutil<br /><br />
shutil.rmtree(<span style="color: maroon">'/tmp/foodir'</span>)</td>
<td>require <span style="color: maroon">'fileutils'</span><br /><br /><span style="color: green">FileUtils</span>.rm_rf(<span style="color: maroon">"/tmp/foodir"</span>)</td>
</tr><tr><td><a name="dir-test" id="dir-test"></a><a href="#dir-test-note">directory test</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td></td>
<td>is_dir(<span style="color: maroon">"/tmp"</span>)</td>
<td>os.path.isdir(<span style="color: maroon">'/tmp'</span>)</td>
<td><span style="color: green">File</span>.directory?(<span style="color: maroon">"/tmp"</span>)</td>
</tr><tr><td><a name="unused-dir" id="unused-dir"></a><a href="#unused-dir-note">generate unused directory</a></td>
<td></td>
<td></td>
<td><span style="color: purple">import</span> tempfile<br /><br /><span style="color: peru">path</span> = tempfile.mkdtemp(dir=<span style="color: maroon">'/tmp'</span>,<br /><span style="white-space: pre-wrap;">  </span>prefix=<span style="color: maroon">'foo'</span>)</td>
<td>require <span style="color: maroon">'tmpdir'</span><br /><br />
path = <span style="color: green">Dir</span>.mktmpdir(<span style="color: maroon">"/tmp/foo"</span>)</td>
</tr><tr><td><a name="system-tmp-dir" id="system-tmp-dir"></a><a href="#system-tmp-dir-note">system temporary file directory</a></td>
<td></td>
<td>sys_get_temp_dir()</td>
<td><span style="color: purple">import</span> tempfile<br /><br />
tempfile.gettempdir()</td>
<td>require <span style="color: maroon">'tmpdir'</span><br /><br /><span style="color: green">Dir</span>.tmpdir</td>
</tr><tr><th colspan="5"><a name="processes-environment" id="processes-environment"></a><a href="#processes-environment-note">processes and environment</a></th>
</tr><tr><th></th>
<th>node</th>
<th>php</th>
<th>python</th>
<th>ruby</th>
</tr><tr><td><a name="cmd-line-arg" id="cmd-line-arg"></a><a href="#cmd-line-arg-note">command line arguments</a><br /><span style="color: gray"><em>and script name</em></span></td>
<td>process.argv.slice(2)<br />
process.argv[1]<br /><span style="color: gray"><span style="white-space: pre-wrap;">//</span> process.argv[0] contains "node"</span></td>
<td>$<span style="color: peru">argv</span><br />
$<span style="color: teal">_SERVER</span>[<span style="color: maroon">"SCRIPT_NAME"</span>]</td>
<td>sys.argv[1:]<br />
sys.argv[0]</td>
<td><span style="color: green">ARGV</span><br /><span style="color: peru">$0</span></td>
</tr><tr><td><a name="env-var" id="env-var"></a><a href="#env-var-note">get and set environment variable</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td>process.env["HOME"]<br /><br />
process.env["PATH"] = "/bin";</td>
<td>getenv(<span style="color: maroon">"HOME"</span>)<br /><br />
putenv(<span style="color: maroon">"PATH=/bin"</span>);</td>
<td>os.getenv(<span style="color: maroon">'HOME'</span>)<br /><br />
os.environ[<span style="color: maroon">'PATH'</span>] = <span style="color: maroon">'/bin'</span></td>
<td><span style="color: green">ENV</span>[<span style="color: maroon">"HOME"</span>]<br /><br /><span style="color: green">ENV</span>[<span style="color: maroon">"PATH"</span>] = <span style="color: maroon">"/bin"</span></td>
</tr><tr><td><a name="pid" id="pid"></a><a href="#pid-note">get pid, parent pid</a></td>
<td>process.pid<br /><span style="color: gray"><em>none</em></span></td>
<td>posix_getpid()<br />
posix_getppid()</td>
<td>os.getpid()<br />
os.getppid()</td>
<td><span style="color: green">Process</span>.pid<br /><span style="color: green">Process</span>.ppid</td>
</tr><tr><td><a name="user-id-name" id="user-id-name"></a><a href="#user-id-name-note">get user id and name</a></td>
<td></td>
<td>$<span style="color: peru">uid</span> = posix_getuid();<br />
$<span style="color: peru">uinfo</span> = posix_getpwuid($<span style="color: peru">uid</span>);<br />
$<span style="color: peru">username</span> = $<span style="color: peru">uinfo</span>[<span style="color: maroon">"name"</span>];</td>
<td><span style="color: purple">import</span> getpass<br /><br />
os.getuid()<br />
getpass.getuser()</td>
<td>require <span style="color: maroon">'etc'</span><br /><br /><span style="color: green">Process</span>.uid<br /><span style="color: green">Etc</span>.getpwuid(<span style="color: green">Process</span>.uid)[<span style="color: maroon">"name"</span>]</td>
</tr><tr><td><a name="exit" id="exit"></a><a href="#exit-note">exit</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td>process.exit(0);</td>
<td><span style="color: purple">exit</span>(0);</td>
<td>sys.exit(0)</td>
<td>exit(0)</td>
</tr><tr><td><a name="signal-handler" id="signal-handler"></a><a href="#signal-handler-note">set signal handler</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td></td>
<td></td>
<td><span style="color: purple">import</span> signal<br /><br /><span style="color: purple">def</span> <span style="color: #0000cd">handler</span>(signo, frame):<br /><span style="white-space: pre-wrap;">  </span><span style="color: purple">print</span>(<span style="color: maroon">'exiting<span style="white-space: pre-wrap;">...</span>'</span>)<br /><span style="white-space: pre-wrap;">  </span><span style="color: purple">sys.exit</span>(1)<br /><br />
signal.signal(signal.SIGINT, handler)</td>
<td><span style="color: green">Signal</span>.trap(<span style="color: maroon">"INT"</span>,<br /><span style="white-space: pre-wrap;">  </span>lambda <span style="color: purple">do</span> |signo|<br /><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span>puts <span style="color: maroon">"exiting<span style="white-space: pre-wrap;">...</span>"</span><br /><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span>exit 1<br /><span style="white-space: pre-wrap;">  </span><span style="color: purple">end</span><br />
)</td>
</tr><tr><td><a name="executable-test" id="executable-test"></a><a href="#executable-test-note">executable test</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td></td>
<td>is_executable(<span style="color: maroon">"/bin/ls"</span>)</td>
<td>os.access(<span style="color: maroon">'/bin/ls'</span>, os.X_OK)</td>
<td><span style="color: green">File</span>.executable?(<span style="color: maroon">"/bin/ls"</span>)</td>
</tr><tr><td><a name="external-cmd" id="external-cmd"></a><a href="#external-cmd-note">external command</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td></td>
<td>system(<span style="color: maroon">"ls -l /tmp"</span>, $<span style="color: peru">retval</span>);<br /><span style="color: purple">if</span> ($<span style="color: peru">retval</span>) {<br /><span style="white-space: pre-wrap;">  </span><span style="color: purple">throw</span> <span style="color: purple">new</span> <span style="color: green">Exception</span>(<span style="color: maroon">"ls failed"</span>);<br />
}</td>
<td><span style="color: purple">if</span> os.system(<span style="color: maroon">'ls -l /tmp'</span>):<br /><span style="white-space: pre-wrap;">  </span><span style="color: purple">raise</span> <span style="color: green">Exception</span>(<span style="color: maroon">'ls failed'</span>)</td>
<td><span style="color: purple">unless</span> system(<span style="color: maroon">"ls -l /tmp"</span>)<br /><span style="white-space: pre-wrap;">  </span><span style="color: purple">raise</span> <span style="color: maroon">"ls failed"</span><br /><span style="color: purple">end</span></td>
</tr><tr><td><a name="escaped-external-cmd" id="escaped-external-cmd"></a><a href="#escaped-external-cmd-note">escaped external command</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td></td>
<td>$<span style="color: peru">path</span> = chop(fgets(<span style="color: teal">STDIN</span>));<br />
$<span style="color: peru">safe</span> = escapeshellarg($<span style="color: peru">path</span>);<br />
system("ls -l " . $<span style="color: peru">safe</span>, $<span style="color: peru">retval</span>);<br /><span style="color: purple">if</span> ($<span style="color: peru">retval</span>) {<br /><span style="white-space: pre-wrap;">  </span><span style="color: purple">throw</span> <span style="color: purple">new</span> <span style="color: green">Exception</span>(<span style="color: maroon">"ls failed"</span>);<br />
}</td>
<td><span style="color: purple">import</span> subprocess<br /><br /><span style="color: peru">cmd</span> = [<span style="color: maroon">'ls'</span>, <span style="color: maroon">'-l'</span>, <span style="color: maroon">'/tmp'</span>]<br /><span style="color: purple">if</span> subprocess.call(cmd):<br /><span style="white-space: pre-wrap;">  </span><span style="color: purple">raise</span> <span style="color: green">Exception</span>(<span style="color: maroon">'ls failed'</span>)</td>
<td>path = gets<br />
path.chomp!<br /><span style="color: purple">unless</span> system(<span style="color: maroon">"ls"</span>, <span style="color: maroon">"-l"</span>, path)<br /><span style="white-space: pre-wrap;">  </span><span style="color: purple">raise</span> <span style="color: maroon">"ls failed"</span><br /><span style="color: purple">end</span></td>
</tr><tr><td><a name="backticks" id="backticks"></a><a href="#backticks-note">backticks</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td></td>
<td>$<span style="color: peru">files</span> = <span style="color: maroon"><span style="white-space: pre-wrap;">`</span>ls -l /tmp<span style="white-space: pre-wrap;">`</span></span>;</td>
<td><span style="color: purple">import</span> subprocess<br /><br /><span style="color: peru">cmd</span> = [<span style="color: maroon">'ls'</span>, <span style="color: maroon">'-l'</span>, <span style="color: maroon">'/tmp'</span>]<br /><span style="color: peru">files</span> = subprocess.check_output(cmd)</td>
<td>files = <span style="color: maroon"><span style="white-space: pre-wrap;">`</span>ls -l /tmp<span style="white-space: pre-wrap;">`</span></span><br /><span style="color: purple">unless</span> <span style="color: peru">$?</span>.success?<br /><span style="white-space: pre-wrap;">  </span><span style="color: purple">raise</span> <span style="color: maroon">"ls failed"</span><br /><span style="color: purple">end</span><br /><br />
files = %x(ls)<br /><span style="color: purple">unless</span> <span style="color: peru">$?</span>.success?<br /><span style="white-space: pre-wrap;">  </span><span style="color: purple">raise</span> <span style="color: maroon">"ls failed"</span><br /><span style="color: purple">end</span></td>
</tr><tr><th colspan="5"><a name="option-parsing" id="option-parsing"></a><a href="#option-parsing-note">option parsing</a></th>
</tr><tr><th></th>
<th>node</th>
<th>php</th>
<th>python</th>
<th>ruby</th>
</tr><tr><td><a name="cmd-line-options" id="cmd-line-options"></a><a href="#cmd-line-options-note">command line options</a><br /><span style="color: gray"><em>boolean option, option with argument, usage</em></span></td>
<td></td>
<td>$<span style="color: peru">usage</span> = <span style="color: maroon">"usage: "</span> .<br /><span style="white-space: pre-wrap;">  </span>$<span style="color: teal">_SERVER</span>[<span style="color: maroon">"SCRIPT_NAME"</span>] .<br /><span style="white-space: pre-wrap;">  </span><span style="color: maroon">" [-f FILE] [-v] [ARG <span style="white-space: pre-wrap;">...</span>]\n"</span>;<br /><br />
$<span style="color: peru">opts</span> = getopt(<span style="color: maroon">"f:hv"</span>,<br /><span style="white-space: pre-wrap;">  </span>array(<span style="color: maroon">"file:"</span>, <span style="color: maroon">"help"</span>, <span style="color: maroon">"verbose"</span>));<br /><br /><span style="color: purple">if</span> (array_key_exists(<span style="color: maroon">"h"</span>, $<span style="color: peru">opts</span>) <span style="white-space: pre-wrap;">||</span><br /><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span>array_key_exists(<span style="color: maroon">"help"</span>, $<span style="color: peru">opts</span>)) {<br /><span style="white-space: pre-wrap;">  </span><span style="color: purple">echo</span> $<span style="color: peru">usage</span>;<br /><span style="white-space: pre-wrap;">  </span><span style="color: purple">exit</span>(0);<br />
}<br /><br />
$<span style="color: peru">file</span> = $<span style="color: peru">opts</span>[<span style="color: maroon">"f"</span>] ? $<span style="color: peru">opts</span>[<span style="color: maroon">"f"</span>] :<br /><span style="white-space: pre-wrap;">  </span>$<span style="color: peru">opts</span>[<span style="color: maroon">"file"</span>];<br /><br /><span style="color: purple">if</span> (array_key_exists(<span style="color: maroon">"v"</span>, $<span style="color: peru">opts</span>) <span style="white-space: pre-wrap;">||</span><br /><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span>array_key_exists(<span style="color: maroon">"verbose"</span>, $<span style="color: peru">opts</span>)) {<br /><span style="white-space: pre-wrap;">  </span>$<span style="color: peru">verbose</span> = <span style="color: teal">TRUE</span>;<br />
}<br /><br /><span style="color: gray"># Processing stops at first positional<br />
# argument.<br />
#<br />
# Unrecognized options are ignored.<br />
# An option declared to have an argument<br />
# is ignored if the argument is not<br />
# provided on the command line.<br />
#<br />
# getopt() does not modify $argv or<br />
# provide means to identify positional<br />
# arguments.</span></td>
<td><span style="color: purple">import</span> argparse<br /><br /><span style="color: peru">parser</span> = argparse.ArgumentParser()<br />
parser.add_argument(<span style="color: maroon">'positional_args'</span>,<br /><span style="white-space: pre-wrap;">  </span>nargs=<span style="color: maroon">'*'</span>,<br /><span style="white-space: pre-wrap;">  </span>metavar=<span style="color: maroon">'ARG'</span>)<br />
parser.add_argument(<span style="color: maroon">'<span style="white-space: pre-wrap;">--</span>file'</span>, <span style="color: maroon">'-f'</span>,<br /><span style="white-space: pre-wrap;">  </span>dest=<span style="color: maroon">'file'</span>)<br />
parser.add_argument(<span style="color: maroon">'<span style="white-space: pre-wrap;">--</span>verbose'</span>, <span style="color: maroon">'-v'</span>,<br /><span style="white-space: pre-wrap;">  </span>dest=<span style="color: maroon">'verbose'</span>,<br /><span style="white-space: pre-wrap;">  </span>action=<span style="color: maroon">'store_true'</span>)<br /><br /><span style="color: peru">args</span> = parser.parse_args()<br /><br /><span style="color: peru">the_file</span> = args.file<br /><span style="color: peru">verbose</span> = args.verbose<br /><br /><span style="color: gray"># The flags -h and <span style="white-space: pre-wrap;">--</span>help and the<br />
# usage message are generated<br />
# automatically.<br />
#<br />
# Positional arguments are in<br />
# args.positional_args<br />
#<br />
# Options can follow positional arguments.</span></td>
<td>require <span style="color: maroon">'optparse'</span><br /><br />
options = {}<br /><span style="color: green">OptionParser</span>.new do |opts|<br /><span style="white-space: pre-wrap;">  </span>opts.banner =<br /><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span><span style="color: maroon">"usage: #{$0} [OPTIONS] [ARG <span style="white-space: pre-wrap;">...</span>]"</span><br /><br /><span style="white-space: pre-wrap;">  </span>opts.on(<span style="color: maroon">"-f"</span>, <span style="color: maroon">"<span style="white-space: pre-wrap;">--</span>file FILE"</span>) <span style="color: purple">do</span> |arg|<br /><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span>options[<span style="color: teal">:file</span>] = arg<br /><span style="white-space: pre-wrap;">  </span>end<br /><br /><span style="white-space: pre-wrap;">  </span>opts.on(<span style="color: maroon">"-v"</span>, <span style="color: maroon">"<span style="white-space: pre-wrap;">--</span>verbose"</span>) <span style="color: purple">do</span> |arg|<br /><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span>options[<span style="color: teal">:verbose</span>] = arg<br /><span style="white-space: pre-wrap;">  </span><span style="color: purple">end</span><br /><span style="color: purple">end</span>.parse!<br /><br />
file = options[<span style="color: teal">:file</span>]<br />
verbose = options[<span style="color: teal">:verbose</span>]<br /><br /><span style="color: gray"># The flags -h and <span style="white-space: pre-wrap;">--</span>help and the<br />
# usage message are generated<br />
# automatically.<br />
#<br />
# After calling OptionParser.parse! only<br />
# positional arguments are in ARGV.<br />
#<br />
# Options can follow positional args.</span></td>
</tr><tr><th colspan="5"><a name="libraries-namespaces" id="libraries-namespaces"></a><a href="#libraries-namespaces-note">libraries and namespaces</a></th>
</tr><tr><th></th>
<th>node</th>
<th>php</th>
<th>python</th>
<th>ruby</th>
</tr><tr><td><a name="load-lib" id="load-lib"></a><a href="#load-lib-note">load library</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td></td>
<td><span style="color: purple">require_once</span>(<span style="color: maroon">"foo.php"</span>);</td>
<td><span style="color: gray"># searches sys.path for foo.pyc or foo.py:</span><br /><span style="color: purple">import</span> foo</td>
<td>require <span style="color: maroon">'foo.rb'</span><br /><br /><span style="color: gray"># searches $LOAD_PATH for foo.rb, foo.so,<br />
# foo.o, foo.dll:</span><br />
require <span style="color: maroon">'foo'</span></td>
</tr><tr><td><a name="load-lib-subdir" id="load-lib-subdir"></a><a href="#load-lib-subdir-note">load library in subdirectory</a></td>
<td></td>
<td><span style="color: purple">require_once</span>(<span style="color: maroon">'foo/bar.php'</span>);</td>
<td><span style="color: gray"># foo must contain <span style="white-space: pre-wrap;">__init__</span>.py file</span><br /><span style="color: purple">import</span> foo.bar</td>
<td>require <span style="color: maroon">'foo/bar.rb'</span><br /><br />
require <span style="color: maroon">'foo/bar'</span></td>
</tr><tr><td><a name="hot-patch" id="hot-patch"></a><a href="#hot-patch-note">hot patch</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td></td>
<td><span style="color: purple">require</span>(<span style="color: maroon">"foo.php"</span>);</td>
<td><span style="color: purple">reload</span>(foo)</td>
<td>load <span style="color: maroon">'foo.rb'</span></td>
</tr><tr><td><a name="load-err" id="load-err"></a><a href="#load-err-note">load error</a></td>
<td></td>
<td><span style="color: gray">require <em>and</em> require_once <em>raise fatal error if library not found;</em> include <em>and</em> include_once emit warnings</span></td>
<td><span style="color: gray"><em>raises</em> ImportError <em>if library not found; exceptions generated when parsing library propagate to client</em></span></td>
<td><span style="color: gray"><em>raises</em> LoadError <em>if library not found; exceptions generated when parsing library propagate to client</em></span></td>
</tr><tr><td><a name="main-in-lib" id="main-in-lib"></a><a href="#main-in-lib-note">main routine in library</a></td>
<td></td>
<td><span style="color: gray"><em>none</em></span></td>
<td><span style="color: purple">if <span style="white-space: pre-wrap;">__name__</span></span> == <span style="color: maroon">'<span style="white-space: pre-wrap;">__main__</span>'</span>:<br /><span style="white-space: pre-wrap;">  </span><span style="color: gray"><em>code</em></span></td>
<td><span style="color: purple">if</span> <span style="color: peru">$0</span> == <span style="white-space: pre-wrap;">__FILE__</span><br /><span style="white-space: pre-wrap;">  </span><span style="color: gray"><em>code</em></span><br /><span style="color: purple">end</span></td>
</tr><tr><td><a name="lib-path" id="lib-path"></a><a href="#lib-path-note">library path</a></td>
<td></td>
<td>$<span style="color: peru">libpath</span> = ini_get(<span style="color: maroon">"include_path"</span>);<br /><br />
ini_set(<span style="color: maroon">"include_path"</span>,<br /><span style="white-space: pre-wrap;">  </span>$<span style="color: peru">libpath</span> . <span style="color: maroon">":/some/path"</span>);</td>
<td>sys.path<br /><br />
sys.path.append(<span style="color: maroon">'/some/path'</span>)</td>
<td><span style="color: gray"># $: is synonym for $LOAD_PATH:</span><br /><span style="color: peru">$LOAD_PATH<br /><br />
$LOAD_PATH</span> <span style="white-space: pre-wrap;">&lt;&lt;</span> <span style="color: maroon">"/some/path"</span></td>
</tr><tr><td><a name="lib-path-env" id="lib-path-env"></a><a href="#lib-path-env-note">library path environment variable</a></td>
<td></td>
<td><span style="color: gray"><em>none</em></span></td>
<td>$ PYTHONPATH=~/lib python foo.py</td>
<td>$ RUBYLIB=~/lib ruby foo.rb</td>
</tr><tr><td><a name="lib-path-cmd-line" id="lib-path-cmd-line"></a><a href="#lib-path-cmd-line-note">library path command line option</a></td>
<td></td>
<td><span style="color: gray"><em>none</em></span></td>
<td><span style="color: gray"><em>none</em></span></td>
<td>$ ruby -I ~/lib foo.rb</td>
</tr><tr><td><a name="simple-global-identifiers" id="simple-global-identifiers"></a><a href="#simple-global-identifiers-note">simple global identifiers</a></td>
<td></td>
<td><span style="color: gray"><em>variables defined outside of functions or with</em> global <em>keyword</em></span></td>
<td><span style="color: gray"><em>built-in functions</em></span></td>
<td><span style="color: gray"><em>variables which start with</em> $</span></td>
</tr><tr><td><a name="multiple-label-identifiers" id="multiple-label-identifiers"></a><a href="#multiple-label-identifiers-note">multiple label identifiers</a></td>
<td></td>
<td><span style="color: gray"><em>classes, interfaces, functions, and constants</em></span></td>
<td><span style="color: gray"><em>modules</em></span></td>
<td><span style="color: gray"><em>constants, classes, and modules</em></span></td>
</tr><tr><td><a name="label-separator" id="label-separator"></a><a href="#label-separator-note">label separator</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td></td>
<td>\Foo\Bar\baz();</td>
<td>foo.bar.baz()</td>
<td><span style="color: green">Foo</span>::<span style="color: green">Bar</span>.baz</td>
</tr><tr><td><a name="root-namespace" id="root-namespace"></a><a href="#root-namespace-note">root namespace definition</a></td>
<td></td>
<td>\foo</td>
<td><span style="color: gray"><em>none</em></span></td>
<td><span style="color: gray"># outside of class or module; only<br />
# constants in root namespace:</span><br />
FOO = 3<br /><br /><span style="color: gray"># inside class or module:</span><br />
::FOO = 3</td>
</tr><tr><td><a name="namespace-decl" id="namespace-decl"></a><a href="#namespace-decl-note">namespace declaration</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td></td>
<td>namespace Foo;</td>
<td><span style="color: gray"><em>put declarations in</em> foo.py</span></td>
<td><span style="color: purple">class</span> <span style="color: green">Foo</span><br /><span style="white-space: pre-wrap;">  </span><span style="color: gray"># class definition</span><br /><span style="color: purple">end</span><br /><br /><span style="color: purple">module</span> <span style="color: green">Foo</span><br /><span style="white-space: pre-wrap;">  </span><span style="color: gray"># module definition</span><br /><span style="color: purple">end</span></td>
</tr><tr><td><a name="child-namespace-decl" id="child-namespace-decl"></a><a href="#child-namespace-decl-note">child namespace declaration</a></td>
<td></td>
<td>namespace Foo\Bar;</td>
<td><span style="color: gray">foo <em>must be in</em> sys.path:</span><br />
$ mkdir foo<br />
$ touch foo/<span style="white-space: pre-wrap;">__init__</span>.py<br />
$ touch foo/bar.py</td>
<td><span style="color: purple">module</span> <span style="color: green">Foo</span>::<span style="color: green">Bar</span><br /><span style="white-space: pre-wrap;">  </span><span style="color: gray"># module definitions</span><br /><span style="color: purple">end</span><br /><br /><span style="color: purple">module</span> <span style="color: green">Foo</span><br /><span style="white-space: pre-wrap;">  </span><span style="color: purple">module</span> <span style="color: green">Bar</span><br /><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span><span style="color: gray"># module definitions</span><br /><span style="white-space: pre-wrap;">  </span><span style="color: purple">end</span><br /><span style="color: purple">end</span><br /><br /><span style="color: gray"># classes can nest inside classes or<br />
# modules; modules can nest in classes</span></td>
</tr><tr><td><a name="namespace-alias" id="namespace-alias"></a><a href="#namespace-alias-note">namespace alias</a></td>
<td></td>
<td>use Foo as Fu;</td>
<td><span style="color: purple">import</span> foo <span style="color: purple">as</span> fu</td>
<td>Fu = Foo.dup<br /><br />
include Fu</td>
</tr><tr><td><a name="import-all-namespace" id="import-all-namespace"></a><a href="#import-all-namespace-note">unqualified import of namespace</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td></td>
<td><span style="color: gray"><em>none, but a long module name can be shortened</em></span></td>
<td><span style="color: purple">from</span> foo <span style="color: purple">import</span> *</td>
<td><span style="color: gray"># inside class or module:</span><br /><span style="color: purple">include</span> <span style="color: green">Foo</span></td>
</tr><tr><td>unqualified import of all subnamespaces</td>
<td></td>
<td></td>
<td><span style="color: gray"># subnamespaces in list <span style="white-space: pre-wrap;">__all__</span> of<br />
# <span style="white-space: pre-wrap;">foo/__init__.py</span> are imported</span><br /><span style="color: purple">from</span> foo <span style="color: purple">import</span> *</td>
<td></td>
</tr><tr><td><a name="import-def" id="import-def"></a><a href="#import-def-note">unqualified import of definitions</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td></td>
<td><span style="color: gray"><em>only class names can be imported</em></span></td>
<td><span style="color: purple">from</span> foo <span style="color: purple">import</span> bar, baz</td>
<td><span style="color: gray"><em>none</em></span></td>
</tr><tr><td><a name="pkg-management" id="pkg-management"></a><a href="#pkg-management-note">list installed packages, install a package</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td></td>
<td>$ pear list<br />
$ pear install Math_BigInteger</td>
<td>$ pip freeze<br />
$ pip install jinja2</td>
<td>$ gem list<br />
$ gem install rails</td>
</tr><tr><td><a name="pkg-spec" id="pkg-spec"></a><a href="#pkg-spec-note">package specification format</a></td>
<td></td>
<td></td>
<td><span style="color: gray"><em>in</em> setup.py:</span><br /><br /><span style="color: gray">#!/usr/bin/env python</span><br /><br /><span style="color: purple">from</span> distutils.core <span style="color: purple">import</span> setup<br /><br />
setup(<br /><span style="white-space: pre-wrap;">  </span>name=<span style="color: maroon">'foo'</span>,<br /><span style="white-space: pre-wrap;">  </span>author=<span style="color: maroon">'Joe Foo'</span>,<br /><span style="white-space: pre-wrap;">  </span>version=<span style="color: maroon">'1.0'</span>,<br /><span style="white-space: pre-wrap;">  </span>description=<span style="color: maroon">'a package'</span>,<br /><span style="white-space: pre-wrap;">  </span>py_modules=[<span style="color: maroon">'foo'</span>])</td>
<td><span style="color: gray"><em>in</em> foo.gemspec:</span><br /><br />
spec = <span style="color: green">Gem</span>::<span style="color: green">Specification</span>.new do |s|<br /><span style="white-space: pre-wrap;">  </span>s.name = <span style="color: maroon">"foo"</span><br /><span style="white-space: pre-wrap;">  </span>s.authors = <span style="color: maroon">"Joe Foo"</span><br /><span style="white-space: pre-wrap;">  </span>s.version = <span style="color: maroon">"1.0"</span><br /><span style="white-space: pre-wrap;">  </span>s.summary = <span style="color: maroon">"a gem"</span><br /><span style="white-space: pre-wrap;">  </span>s.files = Dir[<span style="color: maroon">"lib/*.rb"</span>]<br />
end</td>
</tr><tr><th colspan="5"><a name="objects" id="objects"></a><a href="#objects-note">objects</a></th>
</tr><tr><th></th>
<th>javascript</th>
<th>php</th>
<th>python</th>
<th>ruby</th>
</tr><tr><td><a name="def-class" id="def-class"></a><a href="#def-class-note">define class</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td></td>
<td><span style="color: purple">class</span> <span style="color: green">Int</span><br />
{<br /><span style="white-space: pre-wrap;">  </span><span style="color: purple">public</span> $<span style="color: peru">value</span>;<br /><span style="white-space: pre-wrap;">  </span><span style="color: purple">function</span> <span style="color: mediumblue">__construct</span>($<span style="color: peru">int</span>=0)<br /><span style="white-space: pre-wrap;">  </span>{<br /><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span>$<span style="color: teal">this</span>-&gt;<span style="color: peru">value</span> = $<span style="color: peru">int</span>;<br /><span style="white-space: pre-wrap;">  </span>}<br />
}</td>
<td><span style="color: purple">class</span> <span style="color: green">Int</span>(<span style="color: darkslateblue">object</span>):<br /><span style="white-space: pre-wrap;">  </span><span style="color: purple">def</span> <span style="color: #0000cd"><span style="white-space: pre-wrap;">__init__</span></span>(<span style="color: purple">self</span>, v=0):<br /><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span><span style="color: purple">self</span>.value = v</td>
<td><span style="color: purple">class</span> <span style="color: green">Int</span><br /><span style="white-space: pre-wrap;">  </span>attr_accessor <span style="color: teal">:value</span><br /><span style="white-space: pre-wrap;">  </span><span style="color: purple">def</span> initialize(i=0)<br /><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span><span style="color: peru">@value</span> = i<br /><span style="white-space: pre-wrap;">  </span><span style="color: purple">end</span><br /><span style="color: purple">end</span></td>
</tr><tr><td><a name="create-obj" id="create-obj"></a><a href="#create-obj-note">create object</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td></td>
<td>$<span style="color: peru">i</span> = <span style="color: purple">new</span> <span style="color: green">Int</span>();<br />
$<span style="color: peru">i2</span> = <span style="color: purple">new</span> <span style="color: green">Int</span>(7);</td>
<td><span style="color: peru">i</span> = Int()<br /><span style="color: peru">i2</span> = Int(7)</td>
<td>i = <span style="color: green">Int</span>.new<br />
i2 = <span style="color: green">Int</span>.new(7)</td>
</tr><tr><td><a name="instance-var" id="instance-var"></a><a href="#instance-var-note">instance variable visibility</a></td>
<td></td>
<td><span style="color: gray"><em>visibility must be declared</em></span></td>
<td><span style="color: gray"><em>public; attributes starting with underscore private by convention</em></span></td>
<td><span style="color: gray"><em>private by default; use</em> attr_reader, attr_writer, attr_accessor <em>to make public</em></span></td>
</tr><tr><td><a name="getter-setter" id="getter-setter"></a><a href="#getter-setter-note">get and set instance variable</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td></td>
<td>$<span style="color: peru">v</span> = $<span style="color: peru">i</span>-&gt;<span style="color: peru">value</span>;<br />
$<span style="color: peru">i</span>-&gt;<span style="color: peru">value</span> = $<span style="color: peru">v</span> + 1;</td>
<td><span style="color: peru">v</span> = i.value<br />
i.value = v + 1</td>
<td>v = i.value<br />
i.value = v + 1</td>
</tr><tr><td><a name="def-method" id="def-method"></a><a href="#def-method-note">define method</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td></td>
<td><span style="color: purple">function</span> <span style="color: #0000cd">plus</span>($<span style="color: peru">i</span>)<br />
{<br /><span style="white-space: pre-wrap;">  </span><span style="color: purple">return</span> $<span style="color: teal">this</span>-&gt;<span style="color: peru">value</span> + $<span style="color: peru">i</span>;<br />
}</td>
<td><span style="color: purple">def</span> <span style="color: #0000cd">plus</span>(<span style="color: purple">self</span>,v):<br /><span style="white-space: pre-wrap;">  </span><span style="color: purple">return self</span>.value + v</td>
<td><span style="color: purple">def</span> <span style="color: #0000cd">plus</span>(i)<br /><span style="white-space: pre-wrap;">  </span>value + i<br /><span style="color: purple">end</span></td>
</tr><tr><td><a name="invoke-method" id="invoke-method"></a><a href="#invoke-method-note">invoke method</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td></td>
<td>$<span style="color: peru">i</span>-&gt;plus(7)</td>
<td>i.plus(7)</td>
<td>i.plus(7)</td>
</tr><tr><td><a name="def-class-method" id="def-class-method"></a><a href="#def-class-method-note">define class method</a></td>
<td></td>
<td></td>
<td><span style="color: green">@classmethod</span><br /><span style="color: purple">def</span> <span style="color: mediumblue">get_instances</span>(cls):<br /><span style="white-space: pre-wrap;">  </span><span style="color: purple">return</span> Counter.instances</td>
<td></td>
</tr><tr><td><a name="invoke-class-method" id="invoke-class-method"></a><a href="#invoke-class-method-note">invoke class method</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td></td>
<td><span style="color: green">Counter</span>::getInstances()</td>
<td>Counter.get_instances</td>
<td><span style="color: green">Counter</span>.instances</td>
</tr><tr><td>define class variable</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr><tr><td>get and set class variable</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr><tr><td><a name="method-missing" id="method-missing"></a><a href="#method-missing-note">handle undefined method invocation</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td></td>
<td><span style="color: purple">function</span> <span style="color: #0000cd"><span style="white-space: pre-wrap;">__</span>call</span>($<span style="color: peru">name</span>, $<span style="color: peru">args</span>)<br />
{<br /><span style="white-space: pre-wrap;">  </span>$<span style="color: peru">argc</span> = count($<span style="color: peru">args</span>);<br /><span style="white-space: pre-wrap;">  </span>echo <span style="color: maroon">"no def: $name "</span> .<br /><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span><span style="color: maroon">"arity: $argc\n"</span>;<br />
}</td>
<td><span style="color: purple">def</span> <span style="color: #0000cd"><span style="white-space: pre-wrap;">__getattr__</span></span>(<span style="color: purple">self</span>, name):<br /><span style="white-space: pre-wrap;">  </span>s = <span style="color: maroon">'no def: '</span> + name + <span style="color: maroon">' arity: %d'</span><br /><br /><span style="white-space: pre-wrap;">  </span><span style="color: purple">return lambda</span> *a: <span style="color: purple">print</span>(s % <span style="color: purple">len</span>(a))</td>
<td><span style="color: purple">def</span> <span style="color: #0000cd">method_missing</span>(name, *a)<br /><span style="white-space: pre-wrap;">  </span>puts <span style="color: maroon">"no def:</span> <span style="color: peru">#{name}</span><span style="color: maroon">"</span> +<br /><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span><span style="color: maroon">" arity:</span> <span style="color: peru">#{a.size}</span><span style="color: maroon">"</span><br /><span style="color: purple">end</span></td>
</tr><tr><td><a name="method-alias" id="method-alias"></a><a href="#method-alias-note">alias method</a></td>
<td></td>
<td></td>
<td></td>
<td><span style="color: purple">class</span> <span style="color: green">Point</span><br /><br /><span style="white-space: pre-wrap;">  </span>attr_reader <span style="color: teal">:x</span>, <span style="color: teal">:y</span>, <span style="color: teal">:color</span><br /><br /><span style="white-space: pre-wrap;">  </span><span style="color: purple">alias_method</span> <span style="color: teal">:colour</span>, <span style="color: teal">:color</span><br /><br /><span style="white-space: pre-wrap;">  </span><span style="color: purple">def</span> <span style="color: mediumblue">initialize</span>(x, y, color=<span style="color: teal">:black</span>)<br /><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span><span style="color: peru">@x</span>, <span style="color: peru">@y</span> = x, y<br /><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span><span style="color: peru">@color</span> = color<br /><span style="white-space: pre-wrap;">  </span><span style="color: purple">end</span><br /><span style="color: purple">end</span></td>
</tr><tr><td><a name="destructor" id="destructor"></a><a href="#destructor-note">destructor</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td></td>
<td><span style="color: purple">function</span> <span style="color: #0000cd"><span style="white-space: pre-wrap;">__</span>destruct</span>()<br />
{<br /><span style="white-space: pre-wrap;">  </span><span style="color: purple">echo</span> <span style="color: maroon">"bye, $this-&gt;value\n"</span>;<br />
}</td>
<td><span style="color: purple">def</span> <span style="color: #0000cd"><span style="white-space: pre-wrap;">__del__</span></span>(<span style="color: purple">self</span>):<br /><span style="white-space: pre-wrap;">  </span><span style="color: purple">print</span>(<span style="color: maroon">'bye, %d'</span> % <span style="color: purple">self</span>.value)</td>
<td>val = i.value<br /><span style="color: green">ObjectSpace</span>.define_finalizer(int) {<br /><span style="white-space: pre-wrap;">  </span>puts <span style="color: maroon">"bye, #{val}"</span><br />
}</td>
</tr><tr><th colspan="5"><a name="polymorphism" id="polymorphism"></a><a href="#polymorphism-note">polymorphism</a></th>
</tr><tr><th></th>
<th>javascript</th>
<th>php</th>
<th>python</th>
<th>ruby</th>
</tr><tr><td><a name="inheritance" id="inheritance"></a><a href="#inheritance-note">subclass</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td></td>
<td><span style="color: purple">class</span> <span style="color: green">Counter</span> <span style="color: purple">extends</span> <span style="color: green">Int</span><br />
{<br /><span style="white-space: pre-wrap;">  </span><span style="color: purple">private static</span> $<span style="color: peru">instances</span> = 0;<br /><span style="white-space: pre-wrap;">  </span><span style="color: purple">function</span> <span style="color: #0000cd"><span style="white-space: pre-wrap;">__</span>construct</span>($<span style="color: peru">int</span>=0)<br /><span style="white-space: pre-wrap;">  </span>{<br /><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span><span style="color: green">Counter</span>::$<span style="color: peru">instances</span> += 1;<br /><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span><span style="color: teal">parent</span>::<span style="white-space: pre-wrap;">__</span>construct($<span style="color: peru">int</span>);<br /><span style="white-space: pre-wrap;">  </span>}<br /><span style="white-space: pre-wrap;">  </span><span style="color: purple">function</span> <span style="color: #0000cd">incr</span>()<br /><span style="white-space: pre-wrap;">  </span>{<br /><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span>$<span style="color: teal">this</span>-&gt;<span style="color: peru">value</span>++;<br /><span style="white-space: pre-wrap;">  </span>}<br /><span style="white-space: pre-wrap;">  </span><span style="color: purple">static function</span> <span style="color: #0000cd">getInstances</span>()<br /><span style="white-space: pre-wrap;">  </span>{<br /><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span><span style="color: purple">return</span> $<span style="color: peru">instances</span>;<br /><span style="white-space: pre-wrap;">  </span>}<br />
}</td>
<td><span style="color: purple">class</span> <span style="color: green">Counter</span>(Int):<br /><br /><span style="white-space: pre-wrap;">  </span>instances = 0<br /><br /><span style="white-space: pre-wrap;">  </span><span style="color: purple">def</span> <span style="color: #0000cd"><span style="white-space: pre-wrap;">__init__</span></span>(<span style="color: purple">self</span>, v=0):<br /><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span>Counter.instances += 1<br /><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span>Int.<span style="white-space: pre-wrap;">__init__</span>(<span style="color: purple">self</span>, v)<br /><br /><span style="white-space: pre-wrap;">  </span><span style="color: purple">def</span> <span style="color: #0000cd">incr</span>(<span style="color: purple">self</span>):<br /><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span><span style="color: purple">self</span>.value += 1</td>
<td><span style="color: purple">class</span> <span style="color: green">Counter</span> &lt; <span style="color: green">Int</span><br /><br /><span style="white-space: pre-wrap;">  </span><span style="color: peru">@@instances</span> = 0<br /><br /><span style="white-space: pre-wrap;">  </span><span style="color: purple">def</span> initialize<br /><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span><span style="color: peru">@@instances</span> += 1<br /><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span><span style="color: purple">super</span><br /><span style="white-space: pre-wrap;">  </span><span style="color: purple">end</span><br /><br /><span style="white-space: pre-wrap;">  </span><span style="color: purple">def</span> incr<br /><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span><span style="color: peru">self</span>.value += 1<br /><span style="white-space: pre-wrap;">  </span><span style="color: purple">end</span><br /><br /><span style="white-space: pre-wrap;">  </span><span style="color: purple">def</span> <span style="color: peru">self</span>.instances<br /><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span><span style="color: peru">@@instances</span><br /><span style="white-space: pre-wrap;">  </span><span style="color: purple">end</span><br /><span style="color: purple">end</span></td>
</tr><tr><td>mixin</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr><tr><td><a name="op-overload" id="op-overload"></a><a href="#op-overload-note">overload operator</a></td>
<td></td>
<td></td>
<td></td>
<td><span style="color: purple">class</span> <span style="color: green">Fixnum</span><br /><span style="white-space: pre-wrap;">  </span><span style="color: purple">def</span> <span style="color: mediumblue">/</span>(n)<br /><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span><span style="color: peru">self</span>.fdiv(n)<br /><span style="white-space: pre-wrap;">  </span><span style="color: purple">end</span><br /><span style="color: purple">end</span></td>
</tr><tr><th colspan="5"><a name="reflection" id="reflection"></a><a href="#reflection-note">reflection</a></th>
</tr><tr><th></th>
<th>javascript</th>
<th>php</th>
<th>python</th>
<th>ruby</th>
</tr><tr><td><a name="object-id" id="object-id"></a><a href="#object-id-note">object id</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td><span style="color: gray"><em>none</em></span></td>
<td></td>
<td>id(o)</td>
<td>o.object_id</td>
</tr><tr><td><a name="inspect-type" id="inspect-type"></a><a href="#inspect-type-note">inspect type</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td>typeof([]) === 'object'</td>
<td>gettype(array()) == <span style="color: maroon">"array"</span><br /><br /><span style="color: gray"><em>returns</em> object <em>for objects</em></span></td>
<td><span style="color: purple">type</span>([]) == <span style="color: purple">list</span></td>
<td>[].class == <span style="color: green">Array</span></td>
</tr><tr><td><a name="types" id="types"></a><a href="#types-note">basic types</a></td>
<td>number<br />
string<br />
boolean<br />
undefined<br />
function<br />
object<br /><br /><span style="color: gray"># these evaluate as 'object':</span><br />
typeof(null)<br />
typeof([])<br />
typeof({})</td>
<td>NULL<br />
boolean<br />
integer<br />
double<br />
string<br />
array<br />
object<br />
resource<br />
unknown type</td>
<td>NoneType<br />
bool<br />
int<br />
long<br />
float<br />
str<br />
SRE_Pattern<br />
datetime<br />
list<br />
array<br />
dict<br />
object<br />
file</td>
<td>NilClass<br />
TrueClass<br />
FalseClass<br />
Fixnum<br />
Bignum<br />
Float<br />
String<br />
Regexp<br />
Time<br />
Array<br />
Hash<br />
Object<br />
File</td>
</tr><tr><td><a name="inspect-class" id="inspect-class"></a><a href="#inspect-class-note">inspect class</a></td>
<td><span style="color: gray"><span style="white-space: pre-wrap;">//</span> returns prototype object:</span><br />
Object.getPrototypeOf(o)</td>
<td><span style="color: gray"><em>returns</em> FALSE <em>if not an object:</em></span><br />
get_class($<span style="color: peru">o</span>) == <span style="color: maroon">"Foo"</span></td>
<td>o.<span style="white-space: pre-wrap;">__class__</span> == Foo<br />
isinstance(o, Foo)</td>
<td>o.class == <span style="color: green">Foo</span><br />
o.instance_of?(<span style="color: green">Foo</span>)</td>
</tr><tr><td><a name="inspect-class-hierarchy" id="inspect-class-hierarchy"></a><a href="#inspect-class-hierarchy-note">inspect class hierarchy</a></td>
<td>var pa = Object.getPrototypeOf(o)<br /><span style="color: gray"><span style="white-space: pre-wrap;">//</span>prototype's of prototype object:</span><br />
var grandpa = Object.getPrototypeOf(pa)</td>
<td>get_parent_class($<span style="color: peru">o</span>)</td>
<td>o.<span style="white-space: pre-wrap;">__class__</span>.<span style="white-space: pre-wrap;">__bases__</span></td>
<td>o.class.superclass<br />
o.class.included_modules</td>
</tr><tr><td><a name="has-method" id="has-method"></a><a href="#has-method-note">has method?</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td>o.reverse &amp;&amp; typeof(o.reverse) === 'function'</td>
<td>method_exists($<span style="color: peru">o</span>, <span style="color: maroon">"reverse"</span>)</td>
<td><span style="color: purple">hasattr</span>(o, <span style="color: maroon">'reverse'</span>)</td>
<td>o.respond_to?(<span style="color: maroon">"reverse"</span>)</td>
</tr><tr><td><a name="msg-passing" id="msg-passing"></a><a href="#msg-passing-note">message passing</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td><span style="color: gray"><em>not a standard feature</em></span></td>
<td><span style="color: purple">for</span> ($<span style="color: peru">i</span> = 1; $<span style="color: peru">i</span> &lt;= 10; $<span style="color: peru">i</span>++) {<br /><span style="white-space: pre-wrap;">  </span>call_user_func(array($<span style="color: peru">o</span>,<br /><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span><span style="color: maroon">"phone$i"</span>), <span style="color: teal">NULL</span>);<br />
}</td>
<td><span style="color: purple">for</span> i <span style="color: purple">in range</span>(1,10):<br /><span style="white-space: pre-wrap;">  </span><span style="color: purple">getattr</span>(o, <span style="color: maroon">'phone'</span>+<span style="color: purple">str</span>(i))(<span style="color: teal">None</span>)</td>
<td>(1..9).each <span style="color: purple">do</span> |i|<br /><span style="white-space: pre-wrap;">  </span>o.send(<span style="color: maroon">"phone#{i}="</span>, <span style="color: peru">nil</span>)<br /><span style="color: purple">end</span></td>
</tr><tr><td><a name="eval" id="eval"></a><a href="#eval-note">eval</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td>eval('1 + 1')</td>
<td><span style="color: gray">eval <em>evaluates to argument of</em> return <em>statement or</em> NULL:</span><br /><span style="color: purple">while</span> ($<span style="color: peru">line</span> = fgets(<span style="color: teal">STDIN</span>)) {<br /><span style="white-space: pre-wrap;">  </span><span style="color: purple">echo</span> eval($<span style="color: peru">line</span>) . <span style="color: maroon">"\n"</span>;<br />
}</td>
<td><span style="color: gray"><em>argument of</em> eval <em>must be an expression:</em></span><br /><span style="color: purple">while True</span>:<br /><span style="white-space: pre-wrap;">  </span><span style="color: purple">print</span>(<span style="color: purple">eval</span>(sys.stdin.readline()))</td>
<td>loop <span style="color: purple">do</span><br /><span style="white-space: pre-wrap;">  </span>puts eval(gets)<br /><span style="color: purple">end</span></td>
</tr><tr><td><a name="list-obj-methods" id="list-obj-methods"></a><a href="#list-obj-methods-note">list object methods</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td></td>
<td>get_class_methods($<span style="color: peru">o</span>)</td>
<td>[m <span style="color: purple">for</span> m <span style="color: purple">in dir</span>(o)<br /><span style="white-space: pre-wrap;">  </span><span style="color: purple">if callable</span>(<span style="color: purple">getattr</span>(o,m))]</td>
<td>o.methods</td>
</tr><tr><td><a name="list-obj-attr" id="list-obj-attr"></a><a href="#list-obj-attr-note">list object attributes</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td></td>
<td>get_object_vars($<span style="color: peru">o</span>)</td>
<td><span style="color: purple">dir</span>(o)</td>
<td>o.instance_variables</td>
</tr><tr><td><a name="list-loaded-lib" id="list-loaded-lib"></a><a href="#list-loaded-lib-note">list loaded libraries</a></td>
<td></td>
<td></td>
<td></td>
<td><span style="color: gray"># relative to directory in lib path:</span><br />
$LOADED_FEATURES<br />
$"</td>
</tr><tr><td><a name="list-loaded-namespaces" id="list-loaded-namespaces"></a><a href="#list-loaded-namespaces-note">list loaded namespaces</a></td>
<td></td>
<td></td>
<td>dir()</td>
<td>Class.constants.select do |c|<br /><span style="white-space: pre-wrap;">  </span>Module.const_get(c).class == Class<br />
end</td>
</tr><tr><td><a name="inspect-namespace" id="inspect-namespace"></a><a href="#inpsect-namespace-note">inspect namespace</a></td>
<td></td>
<td></td>
<td>import urlparse<br /><br />
dir(urlparse)</td>
<td>require 'uri'<br /><br />
URI.constants<br />
URI.methods<br />
URI.class_variables</td>
</tr><tr><td><a name="pretty-print" id="pretty-print"></a><a href="#pretty-print-note">pretty print</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td></td>
<td>$<span style="color: peru">d</span> = array(<span style="color: maroon">"lorem"</span>=&gt;1,<br /><span style="white-space: pre-wrap;">  </span><span style="color: maroon">"ipsum"</span>=&gt;array(2,3));<br /><br />
print_r($<span style="color: peru">d</span>);</td>
<td><span style="color: purple">import</span> pprint<br /><br /><span style="color: peru">d</span> = {<span style="color: maroon">'lorem'</span>:1, <span style="color: maroon">'ipsum'</span>:[2,3]}<br /><br />
pprint.PrettyPrinter().pprint(d)</td>
<td>require <span style="color: maroon">'pp'</span><br /><br />
d = {<span style="color: maroon">"lorem"</span>=&gt;1, <span style="color: maroon">"ipsum"</span>=&gt;[2,3]}<br /><br />
pp d</td>
</tr><tr><td><a name="src-line-file" id="src-line-file"></a><a href="#src-line-file-note">source line number and file name</a></td>
<td></td>
<td><span style="color: teal"><span style="white-space: pre-wrap;">__LINE__</span><br /><span style="white-space: pre-wrap;">__FILE__</span></span></td>
<td><span style="color: purple">import</span> inspect<br /><br /><span style="color: peru">cf</span> = inspect.currentframe()<br />
cf.f_lineno<br />
cf.f_code.co_filename</td>
<td><span style="white-space: pre-wrap;">__LINE__</span><br /><span style="white-space: pre-wrap;">__FILE__</span></td>
</tr><tr><td><a name="cmd-line-doc" id="cmd-line-doc"></a><a href="#cmd-line-doc-note">command line documentation</a></td>
<td></td>
<td><span style="color: gray"><em>none</em></span></td>
<td>$ pydoc math<br />
$ pydoc math.atan2</td>
<td>$ ri -c<br />
$ ri Math<br />
$ ri Math.atan2</td>
</tr><tr><th colspan="5"><a name="net-web" id="net-web"></a><a href="#net-web-note">net and web</a></th>
</tr><tr><th></th>
<th>javascript</th>
<th>php</th>
<th>python</th>
<th>ruby</th>
</tr><tr><td><a name="hostname-ip" id="hostname-ip"></a><a href="#hostname-ip-note">get local hostname, dns lookup, reverse dns lookup</a></td>
<td></td>
<td>$<span style="color: peru">host</span> = gethostname();<br />
$<span style="color: peru">ip</span> = gethostbyname($<span style="color: peru">host</span>);<br />
$<span style="color: peru">host2</span> = gethostbyaddr($<span style="color: peru">ip</span>);</td>
<td><span style="color: purple">import</span> socket<br /><br /><span style="color: peru">host</span> = socket.gethostname()<br /><span style="color: peru">ip</span> = socket.gethostbyname(host)<br /><span style="color: peru">host2</span> = socket.gethostbyaddr(ip)[0]</td>
<td>require <span style="color: maroon">'socket'</span><br /><br />
hostname = <span style="color: green">Socket</span>.gethostname<br /><br />
ip = <span style="color: green">Socket</span>.getaddrinfo(<br /><span style="white-space: pre-wrap;">  </span><span style="color: green">Socket</span>.gethostname,<br /><span style="white-space: pre-wrap;">  </span><span style="color: maroon">"echo"</span>)[0][3]<br /><br />
host2 = <span style="color: green">Socket</span>.gethostbyaddr(ip)[0]</td>
</tr><tr><td><a name="http-get" id="http-get"></a><a href="#http-get-note">http get</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td></td>
<td>$<span style="color: #cd853f">url</span> = <span style="color: maroon">'<span style="white-space: pre-wrap;">http://www.google.com</span>'</span>;<br />
$<span style="color: peru">s</span> = file_get_contents($<span style="color: peru">url</span>);</td>
<td><span style="color: purple">import</span> httplib<br /><br /><span style="color: #cd853f">url</span> = <span style="color: maroon">'www.google.com'</span><br /><span style="color: #cd853f">conn</span> = httplib.HTTPConnection(url)<br />
conn.request(<span style="color: maroon">"GET"</span>, <span style="color: maroon">'/'</span>)<br />
resp = conn.getresponse()<br />
if resp.status == httplib.OK:<br /><span style="white-space: pre-wrap;">  </span><span style="color: peru">s</span> = resp.read()</td>
<td>require <span style="color: maroon">'net/http'</span><br /><br />
url = <span style="color: maroon">"www.google.com"</span><br />
r = <span style="color: green">Net</span>::<span style="color: green">HTTP</span>.start(url, 80) <span style="color: purple">do</span> |f|<br /><span style="white-space: pre-wrap;">  </span>f.get(<span style="color: maroon">"/"</span>)<br /><span style="color: purple">end</span><br /><span style="color: purple">if</span> r.code == <span style="color: maroon">"200"</span><br /><span style="white-space: pre-wrap;">  </span>s = r.body<br /><span style="color: purple">end</span></td>
</tr><tr><td><a name="http-post" id="http-post"></a><a href="#http-post-note">http post</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td></td>
<td></td>
<td><span style="color: purple">import</span> httplib<br /><span style="color: purple">import</span> urllib<br /><br /><span style="color: peru">url</span> = <span style="color: maroon">'www.acme.com'</span><br /><span style="color: peru">conn</span> = httplib.HTTPConnection(url)<br /><span style="color: peru">data</span> = urllib.urlencode({<br /><span style="white-space: pre-wrap;">  </span><span style="color: maroon">'item'</span>: <span style="color: maroon">'anvil'</span>,<br /><span style="white-space: pre-wrap;">  </span><span style="color: maroon">'qty'</span>: 1})<br />
conn.request(<span style="color: maroon">'POST'</span>, <span style="color: maroon">'/orders'</span>, data)<br />
resp = conn.getresponse()<br />
if resp.status == httplib.OK:<br /><span style="white-space: pre-wrap;">  </span><span style="color: peru">s</span> = resp.read()</td>
<td></td>
</tr><tr><td><a name="serve-pwd" id="serve-pwd"></a><a href="#serve-pwd-note">serve working directory</a></td>
<td></td>
<td>$ php -S localhost:8000</td>
<td>$ python -m SimpleHTTPServer 8000</td>
<td>$ ruby -rwebrick -e \<br />
'WEBrick::HTTPServer.new(:Port =&gt; 8000, '\<br />
':DocumentRoot =&gt; Dir.pwd).start'</td>
</tr><tr><td><a name="absolute-url" id="absolute-url"></a><a href="#absolute-url-note">absolute url</a><br /><span style="color: gray"><em>from base and relative url</em></span></td>
<td></td>
<td><span style="color: gray"><em>none</em></span></td>
<td><span style="color: purple">import</span> urlparse<br /><br />
urlparse.urljoin(<span style="color: maroon"><span style="white-space: pre-wrap;">'http://google.com'</span></span>,<br /><span style="white-space: pre-wrap;">  </span><span style="color: maroon">'analytics'</span>)</td>
<td>require <span style="color: maroon">'uri'</span><br /><br /><span style="color: green">URI</span>.join(<span style="color: maroon"><span style="white-space: pre-wrap;">"http://google.com"</span></span>, <span style="color: maroon">"analytics"</span>)</td>
</tr><tr><td><a name="parse-url" id="parse-url"></a><a href="#parse-url-note">parse url</a></td>
<td></td>
<td>$<span style="color: peru">url</span> = <span style="color: maroon"><span style="white-space: pre-wrap;">"http://google.com:80/foo?q=3#bar"</span></span>;<br />
$<span style="color: peru">up</span> = parse_url($<span style="color: peru">url</span>);<br /><br />
$<span style="color: peru">protocol</span> = $<span style="color: peru">up</span>[<span style="color: maroon">"scheme"</span>];<br />
$<span style="color: peru">hostname</span> = $<span style="color: peru">up</span>[<span style="color: maroon">"host"</span>];<br />
$<span style="color: peru">port</span> = $<span style="color: peru">up</span>[<span style="color: maroon">"port"</span>];<br />
$<span style="color: peru">path</span> = $<span style="color: peru">up</span>[<span style="color: maroon">"path"</span>];<br />
$<span style="color: peru">query_str</span> = $<span style="color: peru">up</span>[<span style="color: maroon">"query"</span>];<br />
$<span style="color: peru">fragment</span> = $<span style="color: peru">up</span>[<span style="color: maroon">"fragment"</span>];<br /><br /><span style="color: gray"># $params is associative array; if keys<br />
# are reused, later values overwrite<br />
# earlier values</span><br />
parse_str($<span style="color: peru">query_str</span>, $<span style="color: peru">params</span>);</td>
<td><span style="color: gray"># Python 3 location: urllib.parse</span><br /><span style="color: purple">import</span> urlparse<br /><br /><span style="color: peru">url</span> = <span style="color: maroon"><span style="white-space: pre-wrap;">'http://google.com:80/foo?q=3#bar'</span></span><br /><span style="color: peru">up</span> = urlparse.urlparse(url)<br /><br /><span style="color: peru">protocol</span> = up.scheme<br /><span style="color: peru">hostname</span> = up.hostname<br /><span style="color: peru">port</span> = up.port<br /><span style="color: peru">path</span> = up.path<br /><span style="color: peru">query_str</span> = up.query<br /><span style="color: peru">fragment</span> = up.fragment<br /><br /><span style="color: gray"># returns dict of lists:</span><br /><span style="color: peru">params</span> = urlparse.parse_qs(query_str)</td>
<td>require <span style="color: maroon">'uri'</span><br /><br />
url = <span style="color: maroon"><span style="white-space: pre-wrap;">"http://google.com:80/foo?q=3#bar"</span></span><br />
up = <span style="color: green">URI</span>(url)<br /><br />
protocol = up.scheme<br />
hostname = up.host<br />
port = up.port<br />
path = up.path<br />
query_str = up.query<br />
fragment = up.fragment<br /><br /><span style="color: gray"># Ruby 1.9; returns array of pairs:</span><br />
params = <span style="color: green">URI</span>.decode_www_form(query_str)</td>
</tr><tr><td><a name="url-encode" id="url-encode"></a><a href="#url-encode-note">url encode/decode</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td></td>
<td>urlencode(<span style="color: maroon">"lorem ipsum?"</span>)<br />
urldecode(<span style="color: maroon">"lorem+ipsum%3F"</span>)</td>
<td><span style="color: gray"># Python 3 location: urllib.parse</span><br /><span style="color: purple">import</span> urllib<br /><br />
urllib.quote_plus(<span style="color: maroon">"lorem ipsum?"</span>)<br />
urllib.unquote_plus(<span style="color: maroon">"lorem+ipsum%3F"</span>)</td>
<td>require <span style="color: maroon">'cgi'</span><br /><br /><span style="color: green">CGI</span>::escape(<span style="color: maroon">"lorem ipsum?"</span>)<br /><span style="color: green">CGI</span>::unescape(<span style="color: maroon">"lorem+ipsum%3F"</span>)</td>
</tr><tr><td><a name="base64" id="base64"></a><a href="#base64-note">base64 encode/decode</a></td>
<td></td>
<td>$<span style="color: peru">s</span> = file_get_contents(<span style="color: maroon">"foo.png"</span>);<br />
$<span style="color: peru">b64</span> = base64_encode($<span style="color: peru">s</span>);<br />
$<span style="color: peru">s2</span> = base64_decode($<span style="color: peru">b64</span>);</td>
<td><span style="color: purple">import</span> base64<br /><br /><span style="color: peru">s</span> = <span style="color: purple">open</span>(<span style="color: maroon">'foo.png'</span>).read()<br /><span style="color: peru">b64</span> = base64.b64encode(s)<br /><span style="color: peru">s2</span> = base64.b64decode(b64)</td>
<td>require <span style="color: maroon">'base64'</span><br /><br />
s = <span style="color: green">File</span>.open(<span style="color: maroon">"foo.png"</span>).read<br />
b64 = <span style="color: green">Base64</span>.encode64(s)<br />
s2 = <span style="color: green">Base64</span>.decode64(b64)</td>
</tr><tr><th colspan="5"><a name="unit-tests" id="unit-tests"></a><a href="#unit-tests-note">unit tests</a></th>
</tr><tr><th></th>
<th>node</th>
<th>php</th>
<th>python</th>
<th>ruby</th>
</tr><tr><td><a name="test-class" id="test-class"></a><a href="#test-class-note">test class</a></td>
<td><span style="color: gray"><span style="white-space: pre-wrap;">//</span> npm install -g nodeunit</span><br /><br />
exports.testFoo = function(test) {<br /><span style="white-space: pre-wrap;">  </span>test.ok(true, 'not true!.');<br /><span style="white-space: pre-wrap;">  </span>test.done();<br />
}</td>
<td><span style="color: gray"># pear install pear.phpunit.de/PHPUnit<br /><br />
&lt;?php</span><br /><span style="color: purple">Class</span> <span style="color: green">FooTest</span> <span style="color: purple">extends</span><br /><span style="white-space: pre-wrap;">  </span><span style="color: green">PHPUnit_Framework_TestCase</span><br />
{<br /><span style="white-space: pre-wrap;">  </span><span style="color: purple">public function</span> <span style="color: mediumblue">test_01</span>()<br /><span style="white-space: pre-wrap;">  </span>{<br /><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span>$<span style="color: teal">this</span>-&gt;assertTrue(<span style="color: teal">true</span>,<br /><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span><span style="color: maroon">"not true!"</span>);<br /><span style="white-space: pre-wrap;">  </span>}<br />
}<br /><span style="color: gray">?&gt;</span></td>
<td><span style="color: purple">import</span> unittest<br /><br /><span style="color: purple">class</span> <span style="color: green">TestFoo</span>(unittest.TestCase):<br /><span style="white-space: pre-wrap;">  </span><span style="color: purple">def</span> <span style="color: mediumblue">test_01</span>(<span style="color: purple">self</span>):<br /><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span><span style="color: purple">self</span>.assertTrue(<span style="color: purple">True</span>, <span style="color: maroon">'not True!'</span>)<br /><br /><span style="color: purple">if <span style="white-space: pre-wrap;">__name__</span></span> == <span style="color: maroon">'<span style="white-space: pre-wrap;">__main__</span>'</span>:<br /><span style="white-space: pre-wrap;">  </span>unittest.main()</td>
<td>require <span style="color: maroon">'test/unit'</span><br /><br /><span style="color: purple">class</span> <span style="color: green">TestFoo</span> &lt; <span style="color: green">Test</span>::<span style="color: green">Unit</span>::<span style="color: green">TestCase</span><br /><span style="white-space: pre-wrap;">  </span><span style="color: purple">def</span> <span style="color: mediumblue">test_01</span><br /><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span>assert(<span style="color: peru">true</span>, <span style="color: maroon">"not true!"</span>)<br /><span style="white-space: pre-wrap;">  </span><span style="color: purple">end</span><br /><span style="color: purple">end</span></td>
</tr><tr><td><a name="run-test" id="run-test"></a><a href="#run-test-note">run tests, run test method</a></td>
<td>$ nodeunit test_foo.js<br /><br />
$ nodeunit -t testFoo test_foo.js</td>
<td>$ phpunit test_foo.php<br /><br />
$ phpunit <span style="white-space: pre-wrap;">--</span>filter test_01 test_foo.php</td>
<td>$ python test_foo.py<br />
$ python test_foo.py TestFoo.test_01</td>
<td>$ ruby test_foo.rb<br />
$ ruby test_foo.rb -n test_01</td>
</tr><tr><td><a name="assert-equal" id="assert-equal"></a><a href="#assert-equal-note">equality assertion</a></td>
<td>var s = 'do re mi';<br />
test.equals(s, 'do re mi');</td>
<td>$<span style="color: peru">s</span> = <span style="color: maroon">"do re me"</span>;<br />
$<span style="color: teal">this</span>-&gt;assertEquals($<span style="color: peru">s</span>, <span style="color: maroon">"do re mi"</span>);<br /><br /><span style="color: gray"># also asserts args have same type:</span><br />
$<span style="color: teal">this</span>-&gt;assertSame($<span style="color: peru">s</span>, <span style="color: maroon">"do re mi"</span>);</td>
<td><span style="color: peru">s</span> = <span style="color: maroon">'do re me'</span><br /><span style="color: purple">self</span>.assertEqual(<span style="color: maroon">'do re me'</span>,<br /><span style="white-space: pre-wrap;">  </span>s,<br /><span style="white-space: pre-wrap;">  </span><span style="color: maroon">'s: {}'</span>.format(s))</td>
<td>s = <span style="color: maroon">"do re me"</span><br />
assert_equal(<span style="color: maroon">"do re me"</span>, s)</td>
</tr><tr><td><a name="assert-approx" id="assert-approx"></a><a href="#assert-approx-note">approximate assertion</a></td>
<td></td>
<td>$<span style="color: peru">x</span> = 10.0 * (1.0 / 3.0);<br />
$<span style="color: peru">y</span> = 10.0 / 3.0;<br /><br />
$<span style="color: teal">this</span>-&gt;assertEquals($<span style="color: peru">x</span>, $<span style="color: peru">y</span>,<br /><span style="white-space: pre-wrap;">  </span><span style="color: maroon">"not within delta"</span>,<br /><span style="white-space: pre-wrap;">  </span>pow(0.1, 6));</td>
<td><span style="color: peru">x</span> = 10.0 * (1.0 / 3.0)<br /><span style="color: peru">y</span> = 10.0 / 3.0<br /><br /><span style="color: gray"># default for delta is 0.1<span style="white-space: pre-wrap;">**</span>7</span><br /><span style="color: purple">self</span>.assertAlmostEqual(x, y, delta=0.1<span style="white-space: pre-wrap;">**</span>6)</td>
<td>x = 10.0 * (1.0 / 3.0)<br />
y = 10.0 / 3.0<br /><br /><span style="color: gray"># default for delta is 0.001</span><br />
assert_in_delta(x, y, 0.1**6)</td>
</tr><tr><td><a name="assert-regex" id="assert-regex"></a><a href="#assert-regex-note">regex assertion</a></td>
<td></td>
<td>$<span style="color: peru">s</span> = <span style="color: maroon">"lorem ipsum"</span>;<br />
$<span style="color: teal">this</span>-&gt;assertRegExp(<span style="color: maroon">"/lorem/"</span>, $<span style="color: peru">s</span>);</td>
<td><span style="color: peru">s</span> = <span style="color: maroon">'lorem ipsum'</span><br /><span style="color: gray"># uses re.search, not re.match:</span><br /><span style="color: purple">self</span>.assertRegexpMatches(s, <span style="color: maroon">'lorem'</span>)</td>
<td>s = <span style="color: maroon">"lorem ipsum"</span><br />
assert_match(<span style="color: maroon">/lorem/</span>, s)</td>
</tr><tr><td><a name="assert-exc" id="assert-exc"></a><a href="#assert-exc-note">exception assertion</a></td>
<td></td>
<td><span style="color: purple">class</span> <span style="color: green">Bam</span> <span style="color: purple">extends</span> <span style="color: green">Exception</span> {};<br /><br /><span style="color: purple">public function</span> <span style="color: mediumblue">test_exc</span> {<br /><span style="white-space: pre-wrap;">  </span>$<span style="color: teal">this</span>-&gt;SetExpectedException(<span style="color: maroon">"Bam"</span>);<br /><span style="white-space: pre-wrap;">  </span><span style="color: purple">throw new</span> <span style="color: green">Bam</span>(<span style="color: maroon">"bam!"</span>);<br />
}</td>
<td><span style="color: peru">a</span> = []<br /><span style="color: purple">with self</span>.assertRaises(<span style="color: green">IndexError</span>):<br /><span style="white-space: pre-wrap;">  </span>a[0]</td>
<td>assert_raises(<span style="color: green">ZeroDivisionError</span>) <span style="color: purple">do</span><br /><span style="white-space: pre-wrap;">  </span>1 / 0<br /><span style="color: purple">end</span></td>
</tr><tr><td><a name="mock-method" id="mock-method"></a><a href="#mock-method-note">mock method</a></td>
<td></td>
<td>$<span style="color: peru">mock</span> = $<span style="color: teal">this</span>-&gt;getMock(<span style="color: maroon">'Foo'</span>, [<span style="color: maroon">'foo'</span>]);<br />
$<span style="color: peru">mock</span>-&gt;expects($<span style="color: teal">this</span>-&gt;once())<br /><span style="white-space: pre-wrap;">  </span>-&gt;method(<span style="color: maroon">'foo'</span>)<br /><span style="white-space: pre-wrap;">  </span>-&gt;with(13)<br /><span style="white-space: pre-wrap;">  </span>-&gt;will($<span style="color: teal">this</span>-&gt;returnValue(7));<br /><br />
$<span style="color: peru">mock</span>-&gt;foo(13);</td>
<td><span style="color: gray"># pip install mock</span><br /><span style="color: purple">import</span> mock<br /><br /><span style="color: peru">foo</span> = Foo()<br />
foo.run = mock.MagicMock(return_value=7)<br /><br /><span style="color: pruple">self</span>.assertEqual(7, foo.run(13))<br />
foo.run.assert_called_once_with(13)</td>
<td><span style="color: gray"># gem install mocha</span><br />
require <span style="color: maroon">'mocha'</span><br /><br />
foo = mock()<br />
foo.expects(<span style="color: teal">:run</span>).returns(7).with(13).once<br /><br />
foo.run(13)</td>
</tr><tr><td><a name="test-setup" id="test-setup"></a><a href="#test-setup-note">setup</a></td>
<td>exports.setUp = function(callback) {<br /><span style="white-space: pre-wrap;">  </span>console.log('setting up<span style="white-space: pre-wrap;">...</span>');<br /><span style="white-space: pre-wrap;">  </span>callback();<br />
}</td>
<td><span style="color: purple">public function</span> <span style="color: mediumblue">setUp</span>()<br />
{<br /><span style="white-space: pre-wrap;">  </span><span style="color: purple">echo</span> <span style="color: maroon">"setting up\n"</span>;<br />
}</td>
<td><span style="color: gray"># in class TestFoo:</span><br /><span style="color: purple">def</span> <span style="color: mediumblue">setUp</span>(<span style="color: purple">self</span>):<br /><span style="white-space: pre-wrap;">  </span><span style="color: purple">print</span>(<span style="color: maroon">'setting up'</span>)</td>
<td><span style="color: gray"># in class TestFoo:</span><br /><span style="color: purple">def</span> <span style="color: mediumblue">setup</span><br /><span style="white-space: pre-wrap;">  </span>puts <span style="color: maroon">"setting up"</span><br /><span style="color: purple">end</span></td>
</tr><tr><td><a name="test-teardown" id="test-teardown"></a><a href="#test-teardown-note">teardown</a></td>
<td>exports.tearDown = function(callback) {<br /><span style="white-space: pre-wrap;">  </span>console.log('tearing down<span style="white-space: pre-wrap;">...</span>');<br /><span style="white-space: pre-wrap;">  </span>callback();<br />
}</td>
<td><span style="color: purple">public function</span> <span style="color: mediumblue">tearDown</span>()<br />
{<br /><span style="white-space: pre-wrap;">  </span><span style="color: purple">echo</span> <span style="color: maroon">"tearing down\n"</span>;<br />
}</td>
<td><span style="color: gray"># in class TestFoo:</span><br /><span style="color: purple">def</span> <span style="color: mediumblue">tearDown</span>(<span style="color: purple">self</span>):<br /><span style="white-space: pre-wrap;">  </span><span style="color: purple">print</span>(<span style="color: maroon">'tearing down'</span>)</td>
<td><span style="color: gray"># in class TestFoo:</span><br /><span style="color: purple">def</span> <span style="color: mediumblue">teardown</span><br /><span style="white-space: pre-wrap;">  </span>puts <span style="color: maroon">"tearing down"</span><br /><span style="color: purple">end</span></td>
</tr><tr><th colspan="5"><a name="debugging-profiling" id="debugging-profiling"></a><a href="#debugging-profiling-note">debugging and profiling</a></th>
</tr><tr><th></th>
<th>javascript</th>
<th>php</th>
<th>python</th>
<th>ruby</th>
</tr><tr><td><a name="check-syntax" id="check-syntax"></a><a href="#check-syntax-note">check syntax</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td></td>
<td>$ php -l foo.php</td>
<td><span style="color: purple">import</span> py_compile<br /><br /><span style="color: gray"># precompile to bytecode:</span><br />
py_compile.compile(<span style="color: maroon">'foo.py'</span>)</td>
<td>$ ruby -c foo.rb</td>
</tr><tr><td><a name="warnings-flag" id="warnings-flag"></a><a href="#warnings-flag-note">flags for stronger and strongest warnings</a></td>
<td></td>
<td><span style="color: gray"><em>none</em></span></td>
<td>$ python -t foo.py<br />
$ python -3t foo.py</td>
<td>$ ruby -w foo.rb<br />
$ ruby -W2 foo.rb</td>
</tr><tr><td><a name="lint" id="lint"></a><a href="#lint-note">lint</a></td>
<td></td>
<td></td>
<td>$ sudo pip install pylint<br />
$ pylint foo.py</td>
<td></td>
</tr><tr><td><a name="src-cleanup" id="src-cleanup"></a><a href="#src-cleanup-note">source cleanup</a></td>
<td></td>
<td></td>
<td>$ sudo pip install pep8<br />
$ pep8 foo.py</td>
<td></td>
</tr><tr><td><a name="debugger" id="debugger"></a><a href="#debugger-note">run debugger</a></td>
<td></td>
<td></td>
<td>$ python -m pdb foo.py</td>
<td>$ sudo gem install ruby-debug<br />
$ rdebug foo.rb</td>
</tr><tr><td><a name="debugger-cmds" id="debugger-cmds"></a><a href="#debugger-cmds-note">debugger commands</a></td>
<td></td>
<td></td>
<td>h l n s b c w u d p q</td>
<td>h l n s b c w u down p q</td>
</tr><tr><td><a name="benchmark" id="benchmark"></a><a href="#benchmark-note">benchmark code</a></td>
<td></td>
<td></td>
<td><span style="color: purple">import</span> timeit<br /><br />
timeit.timeit(<span style="color: maroon">'i += 1'</span>,<br /><span style="white-space: pre-wrap;">  </span><span style="color: maroon">'i = 0'</span>,<br /><span style="white-space: pre-wrap;">  </span><span style="color: peru">number</span>=1000000)</td>
<td>require <span style="color: maroon">'benchmark'</span><br /><br />
n = 1_000_000<br />
i = 0<br />
puts <span style="color: green">Benchmark</span>.measure <span style="color: purple">do</span><br /><span style="white-space: pre-wrap;">  </span>n.times { i += 1 }<br /><span style="color: purple">end</span></td>
</tr><tr><td><a name="profile" id="profile"></a><a href="#profile-note">profile code</a></td>
<td></td>
<td></td>
<td>$ python -m cProfile foo.py</td>
<td>$ sudo gem install ruby-prof<br />
$ ruby-prof foo.rb</td>
</tr><tr><th colspan="5"><a name="java-interop" id="java-interop"></a><a href="#java-interop-note">java interoperation</a></th>
</tr><tr><th></th>
<th>javascript</th>
<th>php</th>
<th>python</th>
<th>ruby</th>
</tr><tr><td><a name="java-version" id="java-version"></a><a href="#java-version-note">version</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td></td>
<td></td>
<td><span style="color: gray"><em>Jython 2.5<br />
compatible with Python 2.5 :(</em></span></td>
<td><span style="color: gray"><em>JRuby 1.7<br />
compatible with Ruby 1.9</em></span></td>
</tr><tr><td><a name="java-repl" id="java-repl"></a><a href="#java-repl-note">repl</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td></td>
<td></td>
<td>$ jython</td>
<td>$ jirb</td>
</tr><tr><td><a name="java-interpreter" id="java-interpreter"></a><a href="#java-interpreter-note">interpreter</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td></td>
<td></td>
<td>$ jython</td>
<td>$ jruby</td>
</tr><tr><td><a name="java-compiler" id="java-compiler"></a><a href="#java-compiler-note">compiler</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td></td>
<td></td>
<td><span style="color: gray"><em>none</em></span></td>
<td>$ jrubyc</td>
</tr><tr><td><a name="java-prologue" id="java-prologue"></a><a href="#java-prologue-note">prologue</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td></td>
<td></td>
<td><span style="color: purple">import</span> java</td>
<td><span style="color: gray"><em>none</em></span></td>
</tr><tr><td><a name="java-new" id="java-new"></a><a href="#java-new-note">new</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td></td>
<td></td>
<td><span style="color: #cd853f">rnd</span> = java.util.Random()</td>
<td>rnd = java.util.<span style="color: green">Random</span>.new</td>
</tr><tr><td><a name="java-method" id="java-method"></a><a href="#java-method-note">method</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td></td>
<td></td>
<td>rnd.nextFloat()</td>
<td>rnd.next_float</td>
</tr><tr><td><a name="java-import" id="java-import"></a><a href="#java-import-note">import</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td></td>
<td></td>
<td><span style="color: purple">from</span> java.util <span style="color: purple">import</span> Random<br /><br /><span style="color: #cd853f">rnd</span> = Random()</td>
<td>java_import java.util.<span style="color: green">Random</span><br />
rnd = <span style="color: green">Random</span>.new</td>
</tr><tr><td><a name="java-non-bundled" id="java-non-bundled"></a><a href="#java-non-bundled-note">non-bundled java libraries</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td></td>
<td></td>
<td><span style="color: purple">import</span> sys<br /><br />
sys.path.append(<span style="color: maroon">'path/to/mycode.jar'</span>)<br /><span style="color: purple">import</span> MyClass</td>
<td>require <span style="color: maroon">'path/to/mycode.jar'</span></td>
</tr><tr><td><a name="java-shadow" id="java-shadow"></a><a href="#java-shadow-note">shadowing avoidance</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td></td>
<td></td>
<td><span style="color: purple">import</span> java.io as javaio</td>
<td><span style="color: purple">module</span> <span style="color: green">JavaIO</span><br /><span style="white-space: pre-wrap;">  </span>include_package <span style="color: maroon">"java.io"</span><br /><span style="color: purple">end</span></td>
</tr><tr><td><a name="java-to-array" id="java-to-array"></a><a href="#java-to-array-note">convert native array to java array</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td></td>
<td></td>
<td><span style="color: purple">import</span> jarray<br /><br />
jarray.array([1, 2, 3], <span style="color: maroon">'i'</span>)</td>
<td>[1, 2, 3].to_java(<span style="color: green">Java</span>::int)</td>
</tr><tr><td><a name="java-subclassable" id="java-subclassable"></a><a href="#java-subclassable-note">are java classes subclassable?</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td></td>
<td></td>
<td><span style="color: gray"><em>yes</em></span></td>
<td><span style="color: gray"><em>yes</em></span></td>
</tr><tr><td><a name="java-open" id="java-open"></a><a href="#java-open-note">are java class open?</a><br /><span style="white-space: pre-wrap;"> </span></td>
<td></td>
<td></td>
<td><span style="color: gray"><em>no</em></span></td>
<td><span style="color: gray"><em>yes</em></span></td>
</tr><tr><th></th>
<th><span style="color: #efefef"><span style="white-space: pre-wrap;">____________________________________________</span></span></th>
<th><span style="color: #efefef"><span style="white-space: pre-wrap;">____________________________________________</span></span></th>
<th><span style="color: #efefef"><span style="white-space: pre-wrap;">____________________________________________</span></span></th>
<th><span style="color: #efefef"><span style="white-space: pre-wrap;">____________________________________________</span></span></th>
</tr></table><p><a name="file-handles-note" id="file-handles-note"></a></p>
<h1 id="toc0"><span><a href="#file-handles">File Handles</a></span></h1>
<p><a name="std-file-handle-note" id="std-file-handle-note"></a></p>
<h2 id="toc1"><span><a href="#std-file-handles">standard file handles</a></span></h2>
<p>The names for standard input, standard output, and standard error.</p>
<p><a name="read-line-stdin-note" id="read-line-stdin-note"></a></p>
<h2 id="toc2"><span><a href="#read-line-stdin">read line from stdin</a></span></h2>
<p>How to read a line from standard input.</p>
<p>The illustrated function read the standard input stream until a end-of-line marker is found or the end of the stream is encountered. Only in the former case will the returned string be terminated by an end-of-line marker.</p>
<p><strong>php:</strong></p>
<p><tt>fgets</tt> takes an optional second parameter to specify the maximum line length. If the length limit is encountered before a newline, the string returned will not be newline terminated.</p>
<p><strong>ruby:</strong></p>
<p><tt>gets</tt> takes an optional parameter to specify the maximum line length. If the length limit is encountered before a newline, the string returned will not be newline terminated.</p>
<p><a name="eof-note" id="eof-note"></a></p>
<h2 id="toc3"><span><a href="#eof">end-of-file behavior</a></span></h2>
<p>What happens when attempting to read a line and the seek point is after the last newline or at the end of the file.</p>
<p><a name="chomp-note" id="chomp-note"></a></p>
<h2 id="toc4"><span><a href="#chomp">chomp</a></span></h2>
<p>Remove a newline, carriage return, or carriage return newline pair from the end of a line if there is one.</p>
<p><strong>php:</strong></p>
<p><em>chop</em> removes all trailing whitespace. It is an alias for <em>rtrim</em>.</p>
<p><strong>python:</strong></p>
<p>Python strings are immutable. <em>rstrip</em> returns a modified copy of the string. <em>rstrip('\r\n')</em> is not identical to <em>chomp</em> because it removes all contiguous carriage returns and newlines at the end of the string.</p>
<p><strong>ruby:</strong></p>
<p><em>chomp!</em> modifies the string in place. <em>chomp</em> returns a modified copy.</p>
<p><a name="write-line-stdout-note" id="write-line-stdout-note"></a></p>
<h2 id="toc5"><span><a href="#write-line-stdout">write line to stdout</a></span></h2>
<p>How to write a line to standard out. The line will be terminated by an operating system appropriate end of line marker.</p>
<p><strong>python:</strong></p>
<p><em>print</em> appends a newline to the output. To suppress this behavior, put a trailing comma after the last argument. If given multiple arguments, <em>print</em> joins them with spaces.</p>
<p>In Python 2 <em>print</em> parses as a keyword and parentheses are not required:</p>
<div class="code">
<pre>
<code>print "Hello, World!"</code>
</pre></div>
<p><strong>ruby:</strong></p>
<p><em>puts</em> appends a newline to the output. <em>print</em> does not.</p>
<p><a name="printf-note" id="printf-note"></a></p>
<h2 id="toc6"><span><a href="#printf">write formatted string to stdout</a></span></h2>
<p>How to format variables and write them to standard out.</p>
<p>The function <tt>printf</tt> from the C standard library is a familiar example. It has a notation for format strings which uses percent signs %. Many other languages provide an implementation of <tt>printf</tt>.</p>
<p><a name="open-file-note" id="open-file-note"></a></p>
<h2 id="toc7"><span><a href="#open-file">open file for reading</a></span></h2>
<p>How to open a file for reading.</p>
<p><strong>ruby:</strong></p>
<p>When <em>File.open</em> is given a block, the file is closed when the block terminates.</p>
<p><a name="open-file-write-note" id="open-file-write-note"></a></p>
<h2 id="toc8"><span><a href="#open-file-write">open file for writing</a></span></h2>
<p>How to open a file for writing. If the file exists its contents will be overwritten.</p>
<p><a name="file-encoding-note" id="file-encoding-note"></a></p>
<h2 id="toc9"><span><a href="#file-encoding">set file handle encoding</a></span></h2>
<p>How to open a file and specify the character encoding.</p>
<p><strong>python:</strong></p>
<p>The encoding of a file handle can be changed after it is opened:</p>
<div class="code">
<pre>
<code>find.encoding = 'UTF-8'</code>
</pre></div>
<p>If the encoding is set to UTF-8, but the file contains byte sequences that are not a possible UTF-8 encoding, Python will raise a <tt>UnicodeDecodeError</tt>.</p>
<p><a name="open-file-append-note" id="open-file-append-note"></a></p>
<h2 id="toc10"><span><a href="#open-file-append">open file for appending</a></span></h2>
<p>How to open a file with the seek point at the end of the file. If the file exists its contents will be preserved.</p>
<p><a name="close-file-note" id="close-file-note"></a></p>
<h2 id="toc11"><span><a href="#close-file">close file</a></span></h2>
<p>How to close a file.</p>
<p><a name="close-file-implicitly-note" id="close-file-implicitly-note"></a></p>
<h2 id="toc12"><span><a href="#close-file-implicitly">close file implicitly</a></span></h2>
<p>How to have a file closed when a block is exited.</p>
<p><strong>python:</strong></p>
<p>File handles are closed when the variable holding them is garbage collected, but there is no guarantee when or if a variable will be garbage collected.</p>
<p><strong>ruby:</strong></p>
<p>File handles are closed when the variable holding them is garbage collected, but there is no guarantee when or if a variable will be garbage collected.</p>
<p><a name="io-err-note" id="io-err-note"></a></p>
<h2 id="toc13"><span><a href="#io-err">i/o error</a></span></h2>
<p>How I/O errors are treated.</p>
<p><a name="encoding-err-note" id="encoding-err-note"></a></p>
<h2 id="toc14"><span><a href="#encoding-err">encoding error</a></span></h2>
<p><a name="read-line-note" id="read-line-note"></a></p>
<h2 id="toc15"><span><a href="#read-line">read line</a></span></h2>
<p>How to read up to the next newline in a file.</p>
<p><a name="file-iterate-note" id="file-iterate-note"></a></p>
<h2 id="toc16"><span><a href="#file-iterate">iterate over file by line</a></span></h2>
<p>How to iterate over a file line by line.</p>
<p><a name="read-file-array-note" id="read-file-array-note"></a></p>
<h2 id="toc17"><span><a href="#read-file-array">read file into array of string</a></span></h2>
<p>How to put the lines of a file into an array of strings.</p>
<p><a name="read-file-str-note" id="read-file-str-note"></a></p>
<h2 id="toc18"><span><a href="#read-file-str">read file into string</a></span></h2>
<p>How to put the contents of a file into a single string.</p>
<p><a name="write-str-note" id="write-str-note"></a></p>
<h2 id="toc19"><span><a href="#write-str">write string</a></span></h2>
<p>How to write a string to a file handle.</p>
<p><a name="write-line-note" id="write-line-note"></a></p>
<h2 id="toc20"><span><a href="#write-line">write line</a></span></h2>
<p>How to write a line to a file handle. An operating system appropriate end-of-line marker is appended to the output.</p>
<p>**php:</p>
<p>Newlines in strings are translated to the operating system appropriate line terminator unless the file handle was opened with a mode string that contained 'b'.</p>
<p><strong>python:</strong></p>
<p>When file handles are opened with the mode strings 'r', 'w', or 'a', the file handle is in text mode. In text mode the operating system line terminator is translated to '\n' when reading and '\n' is translated back to the operating system line terminator when writing. The standard file handles sys.stdin, sys.stdout, and sys.stderr are opened in text mode.</p>
<p>When file handles are opened with the mode strings 'rb', 'rw', or 'ra', the file handle is in binary mode and line terminator translation is not performed. The operating system line terminator is available in <tt>os.linesep</tt>.</p>
<p><a name="flush-note" id="flush-note"></a></p>
<h2 id="toc21"><span><a href="#flush">flush file handle</a></span></h2>
<p>How to flush a file handle that has been written to.</p>
<p><a name="eof-test-note" id="eof-test-note"></a></p>
<h2 id="toc22"><span><a href="#eof-test">end-of-file test</a></span></h2>
<p>How to test whether the seek point of a file handle is at the end of the file.</p>
<p><a name="seek-note" id="seek-note"></a></p>
<h2 id="toc23"><span><a href="#seek">get and set file handle position</a></span></h2>
<p>How to get or set the file handle seek point.</p>
<p>The seek point is where the next read on the file handle will begin. The seek point is measured in bytes starting from zero.</p>
<p><a name="tmp-file-note" id="tmp-file-note"></a></p>
<h2 id="toc24"><span><a href="#tmp-file">open temporary file</a></span></h2>
<p>How to get a file handle to a file that will be removed automatically sometime between when the file handle is closed and the interpreter exits.</p>
<p>The file is guaranteed not to have existed before it was opened.</p>
<p>The file handle is opened for both reading and writing so that the information written to the file can be recovered by seeking to the beginning of the file and reading from the file handle.</p>
<p>On POSIX operating systems it is possible to unlink a file after opening it. The file is removed from the directory but continues to exist as long as the file handle is open. This guarantees that no other process will be able to read or modify the file contents.</p>
<p><strong>php:</strong></p>
<p>Here is how to create a temporary file with a name:</p>
<div class="code">
<pre>
<code>$path = tempnam(sys_get_temp_dir(), "");
$f = fopen($path, "w+");</code>
</pre></div>
<p><strong>python:</strong></p>
<p>To unlink a temporary file on open, used <tt>TemporaryFile</tt> instead of <tt>NamedTemporaryFile</tt>:</p>
<div class="code">
<pre>
<code>import tempfile

f = tempfile.TemporaryFile()</code>
</pre></div>
<p><a name="stringio-note" id="stringio-note"></a></p>
<h2 id="toc25"><span><a href="#stringio">in memory file</a></span></h2>
<p>How to create a file descriptor which writes to an in-memory buffer.</p>
<p><strong>python:</strong></p>
<p><tt>StringIO</tt> also supports the standard methods for reading input. To use them the client must first seek to the beginning of the in-memory file:</p>
<div class="code">
<pre>
<code>f = StringIO()
f.write('lorem ipsum\n')
f.seek(0)
r.read()</code>
</pre></div>
<p><a name="files-note" id="files-note"></a></p>
<h1 id="toc26"><span><a href="#files">Files</a></span></h1>
<p><a name="file-test-note" id="file-test-note"></a></p>
<h2 id="toc27"><span><a href="#file-test">file exists test, file regular test</a></span></h2>
<p>How to test whether a file exists; how to test whether a file is a regular file (i.e. not a directory, special device, or named pipe).</p>
<p><a name="file-size-note" id="file-size-note"></a></p>
<h2 id="toc28"><span><a href="#file-size">file size</a></span></h2>
<p>How to get the file size in bytes.</p>
<p><a name="readable-writable-executable-note" id="readable-writable-executable-note"></a></p>
<h2 id="toc29"><span><a href="#readable-writable-executable">is file readable, writable, executable</a></span></h2>
<p>How to test whether a file is readable, writable, or executable.</p>
<p><strong>python:</strong></p>
<p>The flags can be or'ed to test for multiple permissions:</p>
<div class="code">
<pre>
<code>os.access('/etc/hosts', os.R_OK | os.W_OK | os.X_OK)</code>
</pre></div>
<p><a name="chmod-note" id="chmod-note"></a></p>
<h2 id="toc30"><span><a href="#chmod">set file permissions</a></span></h2>
<p>How to set the permissions on the file.</p>
<p>For Perl, Python, and Ruby, the mode argument is in the same format as the one used with the Unix <tt>chmod</tt> command. It uses bitmasking to get the various permissions which is why it is normally an octal literal.</p>
<p>The mode argument should <em>not</em> be provided as a string such as "0755". Python and Ruby will raise an exception if a string is provided. Perl will convert "0755" to 755 and not 0755 which is equal to 493 in decimal.</p>
<p><a name="last-modification-time-note" id="last-modification-time-note"></a></p>
<h2 id="toc31"><span><a href="#last-modification-time">last modification time</a></span></h2>
<p>How to get the last modification time of a file.</p>
<p>For a regular file, the last modification time is the most recent time that the contents were altered.</p>
<p>For a directory, the last modification time is the most recent time that a file in the directory was added, removed, or renamed.</p>
<p><a name="file-cp-rm-mv-note" id="file-cp-rm-mv-note"></a></p>
<h2 id="toc32"><span><a href="#file-cp-rm-mv">copy file, remove file, rename file</a></span></h2>
<p>How to copy a file; how to remove a file; how to rename a file.</p>
<p><a name="symlink-note" id="symlink-note"></a></p>
<h2 id="toc33"><span><a href="#symlink">create symlink, symlink test, readlink</a></span></h2>
<p>How to create a symlink; how to test whether a file is a symlink; how to get the target of a symlink.</p>
<p><a name="unused-file-name-note" id="unused-file-name-note"></a></p>
<h2 id="toc34"><span><a href="#unused-file-name">generate unused file name</a></span></h2>
<p>How to generate an unused file name. The file is created to avoid a race condition with another process looking for an unused file name.</p>
<p>The file is not implicitly deleted.</p>
<p><a name="file-fmt-note" id="file-fmt-note"></a></p>
<h1 id="toc35"><span><a href="#file-fmt">File Formats</a></span></h1>
<p><a name="parse-csv-note" id="parse-csv-note"></a></p>
<h2 id="toc36"><span><a href="#parse-csv">parse csv</a></span></h2>
<p>How to parse a CSV file and iterate through the rows.</p>
<p><a name="generate-csv-note" id="generate-csv-note"></a></p>
<h2 id="toc37"><span><a href="#generate-csv">generate csv</a></span></h2>
<p>How to generate a CSV file from an array of tuples.</p>
<p><a name="json-note" id="json-note"></a></p>
<h2 id="toc38"><span><a href="#json">json generate/parse</a></span></h2>
<p>How to encode JSON data in a JSON string; how to decode such a string.</p>
<p><a href="http://json.org">JSON</a> data consists of objects, arrays, and JSON values. Objects are dictionaries in which the keys are strings and the values are JSON values. Arrays contain JSON values. JSON values can be objects, arrays, strings, numbers, true, false, or null.</p>
<p>A JSON string is JSON data encoded using the corresponding literal notation used by JavaScript source code.</p>
<p>JSON strings are sequences of Unicode characters. The following backslash escape sequences are supported:</p>
<p><span style="white-space: pre-wrap;">  </span><tt>\" \\ \/ \b \f \n \r \t \u</tt><span style="color: gray"><em>hhhh</em></span>.</p>
<p><a name="generate-xml-note" id="generate-xml-note"></a></p>
<h2 id="toc39"><span><a href="#generate-xml">generate xml</a></span></h2>
<p>How to build an XML document.</p>
<p>An XML document can be constructed by concatenating strings, but the techniques illustrated here guarantee the result to be well-formed XML.</p>
<p><a name="parse-xml-note" id="parse-xml-note"></a></p>
<h2 id="toc40"><span><a href="#parse-xml">parse xml</a></span></h2>
<p>How to parse XML and extract nodes using XPath.</p>
<p><strong>ruby:</strong></p>
<p>Another way of handling an XPath expression which matches multiple nodes:</p>
<div class="code">
<pre>
<code>XPath.each(doc,"/a/b/c") do |node|
  puts node.text
end</code>
</pre></div>
<p><a name="parse-html-note" id="parse-html-note"></a></p>
<h2 id="toc41"><span><a href="#parse-html">parse html</a></span></h2>
<p>How to parse an HTML document.</p>
<p><a name="directories-note" id="directories-note"></a></p>
<h1 id="toc42"><span><a href="#directories">Directories</a></span></h1>
<p><a name="working-dir-note" id="working-dir-note"></a></p>
<h2 id="toc43"><span><a href="#working-dir">working directory</a></span></h2>
<p>How to get and set the working directory.</p>
<p><a name="build-pathname-note" id="build-pathname-note"></a></p>
<h2 id="toc44"><span><a href="#build-pathname">build pathname</a></span></h2>
<p>How to construct a pathname without hard coding the system file separator.</p>
<p><a name="dirname-basename-note" id="dirname-basename-note"></a></p>
<h2 id="toc45"><span><a href="#dirname-basename">dirname and basename</a></span></h2>
<p>How to extract the directory portion of a pathname; how to extract the non-directory portion of a pathname.</p>
<p><a name="absolute-pathname-note" id="absolute-pathname-note"></a></p>
<h2 id="toc46"><span><a href="#absolute-pathname">absolute pathname</a></span></h2>
<p>How to get the get the absolute pathname for a pathname. If the pathname is relative the working directory will be appended.</p>
<p>In the examples provided, if <tt>/foo/bar</tt> is the working directory and <tt>..</tt> is the relative path, then the return value is <tt>foo</tt></p>
<p><a name="dir-iterate-note" id="dir-iterate-note"></a></p>
<h2 id="toc47"><span><a href="#dir-iterate">iterate over directory by file</a></span></h2>
<p>How to iterate through the files in a directory.</p>
<p>In PHP, Perl, and Ruby, the files representing the directory itself . and the parent directory .. are returned.</p>
<p><strong>php:</strong></p>
<p>The code in the example will stop if a filename which evaluates as FALSE is encountered. One such filename is "0". A safer way to iterate through the directory is:</p>
<div class="code">
<pre>
<code>if ($dir = opendir("/etc")) {
  while (FALSE !== ($file = readdir($dir))) {
    echo "$file\n";
  }
  closedir($dir);
}</code>
</pre></div>
<p><strong>python:</strong></p>
<p><tt>file()</tt> is the file handle constructor. <tt>file</tt> can be used as a local variable name but doing so hides the constructor. It can still be invoked by the synonym <tt>open()</tt>, however.</p>
<p><tt>os.listdir()</tt> does not return the special files . and .. which represent the directory itself and the parent directory.</p>
<p><a name="glob-note" id="glob-note"></a></p>
<h2 id="toc48"><span><a href="#glob">glob paths</a></span></h2>
<p>How to iterate over files using a glob pattern.</p>
<p>Glob patterns employ these special characters:</p>
<table class="wiki-content-table"><tr><td><span style="white-space: pre-wrap;">*</span></td>
<td>matches zero or more characters, the first of which is not . and none of which is /</td>
</tr><tr><td><span style="white-space: pre-wrap;">?</span></td>
<td>matches one character</td>
</tr><tr><td>[ ]</td>
<td>matches one character from the list inside the brackets</td>
</tr><tr><td><span style="white-space: pre-wrap;">\</span></td>
<td>escapes one of the previous characters</td>
</tr></table><p>Use glob patterns instead of simple directory iteration when</p>
<ul><li>dot files, including the directory itself (.) and the parent directory (..), should skipped</li>
<li>a subset of the files in a directory, where the subset can be specified with a glob pattern, is desired</li>
<li>files from multiple directories, where the directories can be specified with a glob pattern, are desired</li>
<li>the full pathnames of the files is desired</li>
</ul><p><strong>php:</strong></p>
<p><tt>glob</tt> takes a second argument for flags. The flag <tt>GLOB_BRACE</tt> enables brace notation.</p>
<p><strong>python:</strong></p>
<p><tt>glob.glob</tt> returns a list. <tt>glob.iglob</tt> accepts the same arguments and returns an iterator.</p>
<p><strong>ruby:</strong></p>
<p>Ruby globs support brace notation.</p>
<p>A brace expression matches any of the comma separated strings inside the braces.</p>
<div class="code">
<pre>
<code>Dir.glob("/{bin,etc,usr}/*").each do |path|
  puts path
end</code>
</pre></div>
<p><a name="mkdir-note" id="mkdir-note"></a></p>
<h2 id="toc49"><span><a href="#mkdir">make directory</a></span></h2>
<p>How to create a directory.</p>
<p>If needed, the examples will create more than one directory.</p>
<p>No error will result if a directory at the pathname already exists. An exception will be raised if the pathname is occupied by a regular file, however.</p>
<p><a name="recursive-cp-note" id="recursive-cp-note"></a></p>
<h2 id="toc50"><span><a href="#recursive-cp">recursive copy</a></span></h2>
<p>How to perform a recursive copy. If the source is a directory, then the directory and all its contents will be copied.</p>
<p><a name="rmdir-note" id="rmdir-note"></a></p>
<h2 id="toc51"><span><a href="#rmdir">remove empty directory</a></span></h2>
<p>How to remove an empty directory. The operation will fail if the directory is not empty.</p>
<p><a name="rm-rf-note" id="rm-rf-note"></a></p>
<h2 id="toc52"><span><a href="#rm-rf">remove directory and contents</a></span></h2>
<p>How to remove a directory and all its contents.</p>
<p><a name="dir-test-note" id="dir-test-note"></a></p>
<h2 id="toc53"><span><a href="#dir-test">directory test</a></span></h2>
<p>How to determine if a pathname is a directory.</p>
<p><a name="unused-dir-note" id="unused-dir-note"></a></p>
<h2 id="toc54"><span><a href="#unused-dir">generate unused directory</a></span></h2>
<p>How to generate an unused directory. The directory is created to avoid a race condition with another process looking for an unused directory.</p>
<p>The directory is not implicitly deleted.</p>
<p><strong>ruby:</strong></p>
<p>When <tt>Dir.mktmpdir</tt> is provided with a block the directory is deleted after the block finishes executing:</p>
<div class="code">
<pre>
<code>require 'tmpdir'
require 'fileutils'

Dir.mktmpdir("/tmp/foo") do |path|
  puts path
  FileUtils.cp("/etc/hosts", "#{path}/hosts")
end</code>
</pre></div>
<p><a name="system-tmp-dir-note" id="system-tmp-dir-note"></a></p>
<h2 id="toc55"><span><a href="#system-tmp-dir">system temporary file directory</a></span></h2>
<p>The name of the system provided directory for temporary files.</p>
<p>On Linux the directory is often <tt>/tmp</tt>, and the operating system is often configured to delete the contents of <tt>/tmp</tt> at boot.</p>
<p><a name="processes-environment-note" id="processes-environment-note"></a></p>
<h1 id="toc56"><span><a href="#processes-environment">Processes and Environment</a></span></h1>
<p><a name="cmd-line-arg-note" id="cmd-line-arg-note"></a></p>
<h2 id="toc57"><span><a href="#cmd-line-arg">command line arguments</a></span></h2>
<p>How to access arguments provided at the command line when the script was run; how to get the name of the script.</p>
<p><a name="env-var-note" id="env-var-note"></a></p>
<h2 id="toc58"><span><a href="#env-var">get and set environment variable</a></span></h2>
<p>How to get and set an environment variable. If an environment variable is set the new value is inherited by child processes.</p>
<p><strong>php:</strong></p>
<p><tt>putenv</tt> returns a boolean indicating success. The command can fail because when PHP is running in safe mode only some environment variables are writable.</p>
<p><a name="pid-note" id="pid-note"></a></p>
<h2 id="toc59"><span><a href="#pid">get pid, parent pid</a></span></h2>
<p>How to get the process id of the interpreter process; how to get the id of the parent process.</p>
<p><strong>ruby:</strong></p>
<p>The process pid is also available in the global variable <tt>$$</tt>.</p>
<p><a name="user-id-name-note" id="user-id-name-note"></a></p>
<h2 id="toc60"><span><a href="#user-id-name">get user id and name</a></span></h2>
<p>How to get the user id of the interpreter process; how to get the username associated with the user id.</p>
<p>When writing a setuid application on Unix, there is a distinction between the real user id and the effective user id. The code examples return the real user id.</p>
<p>The process may be able to determine the username by inspecting environment variables. A POSIX system is required to set the environment variable LOGNAME at login. Unix systems often set USER at login, and Windows systems set %USERNAME%. There is nothing to prevent the user from altering any of these environment variables after login. The methods illustrated in the examples are thus more secure.</p>
<p><strong>python:</strong></p>
<p>How to get the effective user id:</p>
<div class="code">
<pre>
<code>os.geteuid()</code>
</pre></div>
<p><strong>ruby:</strong></p>
<p>How to get the effective user id:</p>
<div class="code">
<pre>
<code>Process.euid</code>
</pre></div>
<p><a name="exit-note" id="exit-note"></a></p>
<h2 id="toc61"><span><a href="#exit">exit</a></span></h2>
<p><strong>python:</strong></p>
<p>It is possible to register code to be executed upon exit:</p>
<div class="code">
<pre>
<code>import atexit
atexit.register(print, "goodbye")</code>
</pre></div>
<p>It is possible to terminate a script without executing registered exit code by calling <em>os._exit</em>.</p>
<p><strong>ruby:</strong></p>
<p>It is possible to register code to be executed upon exit:</p>
<div class="code">
<pre>
<code>at_exit { puts "goodbye" }</code>
</pre></div>
<p>The script can be terminated without executing registered exit code by calling <em>exit!</em>.</p>
<p><a name="signal-handler-note" id="signal-handler-note"></a></p>
<h2 id="toc62"><span><a href="#signal-handler">set signal handler</a></span></h2>
<p>How to register a signal handling function.</p>
<p><a name="executable-test-note" id="executable-test-note"></a></p>
<h2 id="toc63"><span><a href="#executable-test">executable test</a></span></h2>
<p>How to test whether a file is executable.</p>
<p><a name="external-cmd-note" id="external-cmd-note"></a></p>
<h2 id="toc64"><span><a href="#external-cmd">external command</a></span></h2>
<p>How to execute an external command.</p>
<p><a name="escaped-external-cmd-note" id="escaped-external-cmd-note"></a></p>
<h2 id="toc65"><span><a href="#escaped-external-cmd">escaped external command</a></span></h2>
<p>How to prevent shell injection.</p>
<p><a name="backticks-note" id="backticks-note"></a></p>
<h2 id="toc66"><span><a href="#backticks">backticks</a></span></h2>
<p>How to invoke an external command and read its output into a variable.</p>
<p>The use of backticks for this operation goes back to the Bourne shell (1977).</p>
<p><strong>python:</strong></p>
<p>A more concise solution is:</p>
<div class="code">
<pre>
<code>file = os.popen('ls -l /tmp').read()</code>
</pre></div>
<p><tt>os.popen</tt> was marked as deprecated in Python 2.6 but it is still available in Python 2.7 and Python 3.2.</p>
<p><strong>ruby:</strong></p>
<p><tt>%x</tt> can be used with any delimiter. If the opening delimiter is (, [, or {, the closing delimiter must be ), ], or }.</p>
<p><a name="option-parsing-note" id="option-parsing-note"></a></p>
<h1 id="toc67"><span><a href="#option-parsing">Option Parsing</a></span></h1>
<p><a name="cmd-line-options-note" id="cmd-line-options-note"></a></p>
<h2 id="toc68"><span><a href="#cmd-line-options">command line options</a></span></h2>
<p>How to process command line options.</p>
<p>We describe the style used by <tt>getopt_long</tt> from the C standard library. The characteristics of this style are:</p>
<ul><li>Options can be short or long. Short options are a single character preceded by a hyphen. Long options are a word preceded by two hyphens.</li>
<li>A double hyphen by itself can be used to terminate option processing. Arguments after the double hyphen are treated as positional arguments and can start with a hyphen.</li>
<li>Options can be declared to be with or without argument. Options without argument are used to set a boolean value to true.</li>
<li>Short options without argument can share a hyphen.</li>
<li>Long options can be separated from their argument by a space or an equals sign (=). Short options can be separated from their argument by nothing, a space, or an equals sign (=).</li>
</ul><p>The option processing function should identify the positional arguments. These are the command line arguments which are not options, option arguments, or the double hyphen used to terminate option processing. <tt>getopt_long</tt> permits options to occur after positional arguments.</p>
<p><strong>python:</strong></p>
<p>The type of an argument can be specified using the named parameter <tt>type</tt>:</p>
<div class="code">
<pre>
<code>parser.add_argument('--count', '-c', dest='count', type=int)
parser.add_argument('--ratio', '-r', dest='ratio', type=float)</code>
</pre></div>
<p>If the argument cannot be converted to the type, the script prints out a usage statement and exits with a non-zero value.</p>
<p>The default value is <tt>None</tt>, but this can be changed using the named parameter <tt>default</tt>:</p>
<div class="code">
<pre>
<code>parser.add_argument('--file', '-f', dest='file', default='tmpfile')
parser.add_argument('--count', '-c', dest='count', type=int, default=1)
parser.add_argument('--ratio', '-r', dest='ratio', type=float, default=0.5)</code>
</pre></div>
<p><a name="libraries-namespaces-note" id="libraries-namespaces-note"></a></p>
<h1 id="toc69"><span><a href="#libraries-namespaces">Libraries and Namespaces</a></span></h1>
<p>Terminology used in this sheet:</p>
<ul><li><em>library:</em> code in its own file that can be included, <em>loaded</em>, or linked by client code.</li>
<li><em>client:</em> code which calls code in a separate file.</li>
<li><em>top-level file</em> or <em>top-level script:</em> the file containing the code in the program which executes first.</li>
<li><em>load:</em> to add definitions in a file to the text of a running process.</li>
<li><em>namespace:</em> a set of names that can be <em>imported</em> as a unit.</li>
<li><em>import:</em> to add definitions defined elsewhere to a scope.</li>
<li><em>unqualified import:</em> to add definitions to a scope using the same identifiers as where they are defined.</li>
<li><em>qualified import:</em> to add definitions to a scope. The identifiers in the scope are derived from the original identifiers in a formulaic manner. Usually the name of the namespace is added as a prefix.</li>
<li><em>label</em>: one of the parts of a qualified identifier.</li>
<li><em>alias import:</em> to add a definition to a scope under an identifier which is specified in the import statement.</li>
<li><em>package:</em> one or more libraries that can be installed by a <em>package manager</em>.</li>
</ul><p><a name="load-lib-note" id="load-lib-note"></a></p>
<h2 id="toc70"><span><a href="#load-lib">load library</a></span></h2>
<p>Execute the specified file. Normally this is used on a file which only contains declarations at the top level.</p>
<p><strong>php:</strong></p>
<p><tt>include_once</tt> behaves like <tt>require_once</tt> except that it is not fatal if an error is encountered executing the library.</p>
<p><a name="load-lib-subdir-note" id="load-lib-subdir-note"></a></p>
<h2 id="toc71"><span><a href="#load-lib-subdir">load library in subdirectory</a></span></h2>
<p>How to load a library in a subdirectory of the library path.</p>
<p><a name="hot-patch-note" id="hot-patch-note"></a></p>
<h2 id="toc72"><span><a href="#hot-patch">hot patch</a></span></h2>
<p>How to reload a library. Altered definitions in the library will replace previous versions of the definition.</p>
<p><strong>php:</strong></p>
<p>Also <tt>include</tt>.</p>
<p><a name="load-err-note" id="load-err-note"></a></p>
<h2 id="toc73"><span><a href="#load-err">load error</a></span></h2>
<p>How errors which are encountered while loading libraries are handled.</p>
<p><a name="main-in-lib-note" id="main-in-lib-note"></a></p>
<h2 id="toc74"><span><a href="#main-in-lib">main routine in library</a></span></h2>
<p>How to put code in a library which executes only when the file is run as a top-level script.</p>
<p><a name="lib-path-note" id="lib-path-note"></a></p>
<h2 id="toc75"><span><a href="#lib-path">library path</a></span></h2>
<p>The library path is a list of directory paths which are searched when loading libraries.</p>
<p><a name="lib-path-env-note" id="lib-path-env-note"></a></p>
<h2 id="toc76"><span><a href="#lib-path-env">library path environment variable</a></span></h2>
<p>How to augment the library path by setting an environment variable before invoking the interpreter.</p>
<p><a name="lib-path-cmd-line-note" id="lib-path-cmd-line-note"></a></p>
<h2 id="toc77"><span><a href="#lib-path-cmd-line">library path command line option</a></span></h2>
<p>How to augment the library path by providing a command line option when invoking the interpreter.</p>
<p><a name="simple-global-identifiers-note" id="simple-global-identifiers-note"></a></p>
<h2 id="toc78"><span><a href="#simple-global-identifiers">simple global identifiers</a></span></h2>
<p><a name="multiple-label-identifiers-note" id="multiple-label-identifiers-note"></a></p>
<h2 id="toc79"><span><a href="#multiple-label-identifiers">multiple label identifiers</a></span></h2>
<p><a name="label-separator-note" id="label-separator-note"></a></p>
<h2 id="toc80"><span><a href="#label-separator">label separator</a></span></h2>
<p>The punctuation used to separate the labels in the full name of a subnamespace.</p>
<p><a name="root-namespace-note" id="root-namespace-note"></a></p>
<h2 id="toc81"><span><a href="#root-namespace">root namespace definition</a></span></h2>
<p><a name="namespace-decl-note" id="namespace-decl-note"></a></p>
<h2 id="toc82"><span><a href="#namespace-decl">namespace declaration</a></span></h2>
<p>How to declare a section of code as belonging to a namespace.</p>
<p><a name="subnamespace-decl-note" id="subnamespace-decl-note"></a></p>
<h2 id="toc83"><span><a href="#subnamespace-decl">subnamespace declaration</a></span></h2>
<p>How to declare a section of code as belonging to a subnamespace.</p>
<p><a name="import-namespace-note" id="import-namespace-note"></a></p>
<h2 id="toc84"><span><a href="#import-namespace">import namespace</a></span></h2>
<p><a name="import-subnamespace-note" id="import-subnamespace-note"></a></p>
<h2 id="toc85"><span><a href="#import-subnamespace">import subnamespace</a></span></h2>
<p><a name="import-all-namespace-note" id="import-all-namespace-note"></a></p>
<h2 id="toc86"><span><a href="#import-all-namespace">import all definitions in namespace</a></span></h2>
<p>How to import all the definitions in a namespace.</p>
<p><a name="import-def-note" id="import-def-note"></a></p>
<h2 id="toc87"><span><a href="#import-def">import definitions</a></span></h2>
<p>How to import specific definitions from a namespace.</p>
<p><a name="pkg-management-note" id="pkg-management-note"></a></p>
<h2 id="toc88"><span><a href="#pkg-management">list installed packages, install a package</a></span></h2>
<p>How to show the installed 3rd party packages, and how to install a new 3rd party package.</p>
<p><strong>python</strong></p>
<p>Two ways to list the installed modules and the modules in the standard library:</p>
<div class="code">
<pre>
<code>$ pydoc modules</code>
</pre></div>
<div class="code">
<pre>
<code>$ python
&gt;&gt;&gt; help('modules')</code>
</pre></div>
<p>Most 3rd party Python code is packaged using <tt>distutils</tt>, which is in the Python standard library. The code is placed in a directory with a <tt>setup.py</tt> file. The code is installed by running the Python interpreter on <tt>setup.py</tt>:</p>
<p><a name="pkg-spec-note" id="pkg-spec-note"></a></p>
<h2 id="toc89"><span><a href="#pkg-spec">package specification format</a></span></h2>
<p>The format of the file used to specify a package.</p>
<p><strong>python:</strong></p>
<p><a href="http://docs.python.org/distutils/apiref.html#module-distutils.core">distutils.core reference</a></p>
<p>How to create a Python package using <tt>distutils</tt>. Suppose that the file <tt>foo.py</tt> contains the following code:</p>
<div class="code">
<pre>
<code>def add(x, y):
    return x+y</code>
</pre></div>
<p>In the same directory as <tt>foo.py</tt> create <tt>setup.py</tt> with the following contents:</p>
<div class="code">
<pre>
<code>#!/usr/bin/env python

from distutils.core import setup

setup(name='foo',
      version='1.0',
      py_modules=['foo'],
     )</code>
</pre></div>
<p>Create a tarball of the directory for distribution:</p>
<div class="code">
<pre>
<code>$ tar cf foo-1.0.tar foo
$ gzip foo-1.0.tar</code>
</pre></div>
<p>To install a tar, perform the following:</p>
<div class="code">
<pre>
<code>$ tar xf foo-1.0.tar.gz
$ cd foo
$ sudo python setup.py install</code>
</pre></div>
<p>If you want people to be able to install the package with <tt>pip</tt>, upload the tarball to the <a href="http://pypi.python.org/pypi">Python Package Index</a>.</p>
<p><strong>ruby:</strong></p>
<p><a href="http://docs.rubygems.org/read/chapter/20">gemspec attributes</a></p>
<p>For an example of how to create a gem, create a directory called <tt>foo</tt>. Inside it create a file called <tt>lib/foo.rb</tt> which contains:</p>
<div class="code">
<pre>
<code>def add(x, y)
  x + y
end</code>
</pre></div>
<p>Then create a file called <tt>foo.gemspec</tt> containing:</p>
<div class="code">
<pre>
<code>spec = Gem::Specification.new do |s|
  s.name = 'foo'
  s.authors = 'Joe Foo'
  s.version = '1.0'
  s.summary = 'a gem'
  s.files = Dir['lib/*.rb']
end</code>
</pre></div>
<p>To create the gem, run this command:</p>
<div class="code">
<pre>
<code>$ gem build foo.gemspec</code>
</pre></div>
<p>A file called <tt>foo-1.0.gem</tt> is created. To install <tt>foo.rb</tt> run this command:</p>
<div class="code">
<pre>
<code>$ gem install foo-1.0.gem</code>
</pre></div>
<p><a name="objects-note" id="objects-note"></a></p>
<h1 id="toc90"><span><a href="#objects">Objects</a></span></h1>
<p>An <em>object</em> is a set of functions called <em>methods</em> which have shared access to the object's <em>instance variables</em>. An object's methods and instance variables are collectively called its <em>members</em>. If a member of an object can be accessed or invoked by code which is not in a member of the object, it is <em>public</em>. Otherwise it is <em>private</em>.</p>
<p>A <em>class</em> is a set of objects which have the same method definitions. The objects in the set are <em>instances</em> of the class. Functions defined in the class namespace which are not object methods are called class methods. A class method which returns instances of the class is called a <em>factory method</em>. If there is class method which is responsible for creating all instances, it is called a <em>constructor</em>. The existence of a constructor does not preclude the existence of other factory methods since they can invoke the constructor and return its return value.</p>
<p>A class may contain <em>class variables</em>. These are global variables defined in the namespace of the class.</p>
<p>A method which returns the value of an instance variable is called a <em>getter</em>. A method which sets the value of an instance variable is called a <em>setter</em>. Getters and setters and seem pointless at first blush as one could make the underlying instance variable public instead. In practice getters and setters make code more maintainable. Consistent use of getters and setters conforms with the <em>Uniform Access Principle</em> and makes the API presented by an object to its clients simpler.</p>
<p>Perl instance variables are private, so Perl enforces a good practice at the cost of requiring boilerplate code for defining getters and setters.</p>
<p>Python instance variables are public. Although this permits concise class definitions, a maintainer of a Python class may find it difficult to replace an instance variable with a derived value when clients are accessing the instance variable directly. With an old-style Python class, the maintainer can't make the change without breaking the client code. With a new-style class the maintainer can replace an instance variable with a getter and setter and mark them with the <tt>@property</tt> decorator.</p>
<p>Ruby, like Perl, has private instance variables. It has the directives <tt>attr_reader</tt>, <tt>attr_writer</tt>, and <tt>attr_accessor</tt> for defining getters and setters. Ruby classes are objects and in particular they are instances of the <tt>Module</tt> class. The directives <tt>attr_reader</tt>, <tt>attr_writer</tt>, and <tt>attr_accessor</tt> are instance methods defined in the <tt>Module</tt> class which execute when the class block executes.</p>
<p><a name="def-class-note" id="def-class-note"></a></p>
<h2 id="toc91"><span><a href="#def-class">define class</a></span></h2>
<p><strong>php:</strong></p>
<p>Properties (i.e. instance variables) must be declared <em>public</em>, <em>protected</em>, or <em>private</em>. Methods can optionally be declared <em>public</em>, <em>protected</em>, or <em>private</em>. Methods without a visibility modifier are public.</p>
<p><strong>python:</strong></p>
<p>As of Python 2.2, classes are of two types: new-style classes and old-style classes. The class type is determined by the type of class(es) the class inherits from. If no superclasses are specified, then the class is old-style. As of Python 3.0, all classes are new-style.</p>
<p>New-style classes have these features which old-style classes don't:</p>
<ul><li>universal base class called <em>object</em>.</li>
<li>descriptors and properties. Also the <span style="white-space: pre-wrap;">__getattribute__</span> method for intercepting all attribute access.</li>
<li>change in how the <a href="http://en.wikipedia.org/wiki/Diamond_problem">diamond problem</a> is handled. If a class inherits from multiple parents which in turn inherit from a common grandparent, then when checking for an attribute or method, all parents will be checked before the grandparent.</li>
</ul><p><a name="create-obj-note" id="create-obj-note"></a></p>
<h2 id="toc92"><span><a href="#create-obj">create object</a></span></h2>
<p>How to create an object.</p>
<p><a name="getter-setter-note" id="getter-setter-note"></a></p>
<h2 id="toc93"><span><a href="#getter-setter">get and set attribute</a></span></h2>
<p>How to get and set an attribute.</p>
<p><strong>python:</strong></p>
<p>Defining explicit setters and getters in Python is considered poor style. Extra logic can be achieved without disrupting the clients of the class by creating a property:</p>
<div class="code">
<pre>
<code>def getValue(self):
  print("getValue called")
  return self.__dict__['value']

def setValue(self,v):
  print("setValue called")
  self.__dict__['value'] = v

value = property(fget=getValue, fset = setValue)</code>
</pre></div>
<p><a name="instance-var-note" id="instance-var-note"></a></p>
<h2 id="toc94"><span><a href="#instance-var">instance variable visibility</a></span></h2>
<p>How instance variable access works.</p>
<p><a name="def-method-note" id="def-method-note"></a></p>
<h2 id="toc95"><span><a href="#def-method">define method</a></span></h2>
<p>How to define a method.</p>
<p><a name="invoke-method-note" id="invoke-method-note"></a></p>
<h2 id="toc96"><span><a href="#invoke-method">invoke method</a></span></h2>
<p>How to invoke a method.</p>
<p><a name="destructor-note" id="destructor-note"></a></p>
<h2 id="toc97"><span><a href="#destructor">destructor</a></span></h2>
<p>How to define a destructor.</p>
<p><strong>python:</strong></p>
<p>A Python destructor is not guaranteed to be called when all references to an object go out of scope, but apparently this is how the CPython implementations work.</p>
<p><strong>ruby:</strong></p>
<p>Ruby lacks a destructor. It is possible to register a block to be executed before the memory for an object is released by the garbage collector. A ruby interpreter may exit without releasing memory for objects that have gone out of scope and in this case the finalizer will not get called. Furthermore, if the finalizer block holds on to a reference to the object, it will prevent the garbage collector from freeing the object.</p>
<p><a name="method-missing-note" id="method-missing-note"></a></p>
<h2 id="toc98"><span><a href="#method-missing">method missing</a></span></h2>
<p>How to handle when a caller invokes an undefined method.</p>
<p><strong>php:</strong></p>
<p>Define the method <em>__callStatic</em> to handle calls to undefined class methods.</p>
<p><strong>python:</strong></p>
<p><em><span style="white-space: pre-wrap;">__getattr__</span></em> is invoked when an attribute (instance variable or method) is missing. By contrast, <em><span style="white-space: pre-wrap;">__getattribute__</span></em>, which is only available in Python 3, is always invoked, and can be used to intercept access to attributes that exist. <em><span style="white-space: pre-wrap;">__setattr__</span></em> and <em><span style="white-space: pre-wrap;">__delattr__</span></em> are invoked when attempting to set or delete attributes that don't exist. The <em>del</em> statement is used to delete an attribute.</p>
<p><strong>ruby:</strong></p>
<p>Define the method <em>self.method_missing</em> to handle calls to undefined class methods.</p>
<p><a name="def-class-method-note" id="def-class-method-note"></a></p>
<h2 id="toc99"><span><a href="#def-class-method">define class method</a></span></h2>
<p><a name="invoke-class-method-note" id="invoke-class-method-note"></a></p>
<h2 id="toc100"><span><a href="#invoke-class-method">invoke class method</a></span></h2>
<p>How to invoke a class method.</p>
<p><a name="method-alias-note" id="method-alias-note"></a></p>
<h2 id="toc101"><span><a href="#method-alias">method alias</a></span></h2>
<p>How to create an alias for a method.</p>
<p><strong>ruby:</strong></p>
<p>Ruby provides the keyword <tt>alias</tt> and the method <tt>alias_method</tt> in the class <tt>Module</tt>. Inside a class body they behave idenitically. When called from inside a method <tt>alias</tt> has no effect but <tt>alias_method</tt> works as expected. Hence some recommend always using <tt>alias_method</tt>.</p>
<p><a name="polymorphism-note" id="polymorphism-note"></a></p>
<h1 id="toc102"><span><a href="#polymorphism">Polymorphism</a></span></h1>
<p>A <em>subclass</em> is a class whose objects contain all of the methods from another class called the <em>superclass</em>. Objects in the subclass should in principle be usable anywhere objects in the superclass can be used. The subclass may have extra methods which are not found in the superclass. Moreover it may replace method definitions in the superclass with its own definitions provided the signature remains the same. This is called <em>overriding</em>.</p>
<p>It is sometimes useful to define superclass which is never instantiated. Such a class is called an <em>abstract class</em>. An abstract class is way to share code between two or more subclasses or to define the API that two or more subclasses should implement.</p>
<p><a name="inheritance-note" id="inheritance-note"></a></p>
<h2 id="toc103"><span><a href="#inheritance">inheritance</a></span></h2>
<p>How to use inheritance.</p>
<p><a name="op-overload-note" id="op-overload-note"></a></p>
<h2 id="toc104"><span><a href="#op-overload">operator overloading</a></span></h2>
<p>How to define the behavior of the binary operators.</p>
<p><a name="reflection-note" id="reflection-note"></a></p>
<h1 id="toc105"><span><a href="#reflection">Reflection</a></span></h1>
<p><a name="object-id-note" id="object-id-note"></a></p>
<h2 id="toc106"><span><a href="#object-id">object id</a></span></h2>
<p>How to get an identifier for an object or a value.</p>
<p><a name="inspect-type-note" id="inspect-type-note"></a></p>
<h2 id="toc107"><span><a href="#inspect-type">inspect type</a></span></h2>
<p><strong>php:</strong></p>
<p>The PHP manual says that the strings returned by <tt>gettype</tt> are subject to change and advises using the following predicates instead:</p>
<div class="code">
<pre>
<code>is_null
is_bool
is_numeric
is_int
is_float
is_string
is_array
is_object
is_resource</code>
</pre></div>
<p>All possible return values of <tt>gettype</tt> are listed.</p>
<p><a name="types-note" id="types-note"></a></p>
<h2 id="toc108"><span><a href="#types">basic types</a></span></h2>
<p><a name="inspect-class-note" id="inspect-class-note"></a></p>
<h2 id="toc109"><span><a href="#inspect-class">inspect class</a></span></h2>
<p>How to get the class of an object.</p>
<p><strong>javascript:</strong></p>
<p><a name="inspect-class-hierarchy-note" id="inspect-class-hierarchy-note"></a></p>
<h2 id="toc110"><span><a href="#inspect-class-hierarchy">inspect class hierarchy</a></span></h2>
<p><a name="has-method-note" id="has-method-note"></a></p>
<h2 id="toc111"><span><a href="#has-method">has method?</a></span></h2>
<p><strong>python:</strong></p>
<p><tt>hasattr(o,'reverse')</tt> will return <tt>True</tt> if there is an instance variable named 'reverse'.</p>
<p><a name="msg-passing-note" id="msg-passing-note"></a></p>
<h2 id="toc112"><span><a href="#msg-passing">message passing</a></span></h2>
<p><strong>javascript:</strong></p>
<p>The following works in Firefox:</p>
<div class="code">
<pre>
<code>var o = {}
o.__noSuchMethod__ = function(name) { alert('you called ' + name) }
o.whoopsie()</code>
</pre></div>
<p><a name="eval-note" id="eval-note"></a></p>
<h2 id="toc113"><span><a href="#eval">eval</a></span></h2>
<p>How to interpret a string as code and return its value.</p>
<p><strong>php:</strong></p>
<p>The value of the string is the value of of the return statement that terminates execution. If execution falls off the end of the string without encountering a return statement, the <tt>eval</tt> evaluates as <tt>NULL</tt>.</p>
<p><strong>python:</strong></p>
<p>The argument of <tt>eval</tt> must be an expression or a <tt>SyntaxError</tt> is raised. The Python version of the mini-REPL is thus considerably less powerful than the versions for the other languages. It cannot define a function or even create a variable via assignment.</p>
<p><a name="list-obj-methods-note" id="list-obj-methods-note"></a></p>
<h2 id="toc114"><span><a href="#list-obj-methods">list object methods</a></span></h2>
<p><a name="list-obj-attr-note" id="list-obj-attr-note"></a></p>
<h2 id="toc115"><span><a href="#list-obj-attr">list object attributes</a></span></h2>
<p><strong>python:</strong></p>
<p><em>dir(o)</em> returns methods and instance variables.</p>
<p><a name="pretty-print-note" id="pretty-print-note"></a></p>
<h2 id="toc116"><span><a href="#pretty-print">pretty print</a></span></h2>
<p>How to display the contents of a data structure for debugging purposes.</p>
<p><a name="src-line-file-note" id="src-line-file-note"></a></p>
<h2 id="toc117"><span><a href="#src-line-file">source line number and file name</a></span></h2>
<p>How to get the current line number and file name of the source code.</p>
<p><a name="cmd-line-doc-note" id="cmd-line-doc-note"></a></p>
<h2 id="toc118"><span><a href="#cmd-line-doc">command line documentation</a></span></h2>
<p>How to get documentation from the command line.</p>
<p><strong>ruby:</strong></p>
<p>Searching for <tt>Math.atan2</tt> will return either class method or instance method documentation. If there is documentation for both one can be specific with the following notation:</p>
<div class="code">
<pre>
<code>$ ri Math::atan2
$ ri Math#atan2</code>
</pre></div>
<p><a name="net-web-note" id="net-web-note"></a></p>
<h1 id="toc119"><span><a href="#net-web">Net and Web</a></span></h1>
<p><a name="hostname-ip-note" id="hostname-ip-note"></a></p>
<h2 id="toc120"><span><a href="#hostname-ip">get local hostname, dns lookup, reverse dns lookup</a></span></h2>
<p>How to get the hostname and the ip address of the local machine without connecting to a socket.</p>
<p>The operating system should provide a method for determining the hostname. Linux provides the <tt>uname</tt> system call.</p>
<p>A DNS lookup can be performed to determine the IP address for the local machine. This may fail if the DNS server is unaware of the local machine or if the DNS server has incorrect information about the local host.</p>
<p>A reverse DNS lookup can be performed to find the hostname associated with an IP address. This may fail for the same reasons a forward DNS lookup might fail.</p>
<p><a name="http-get-note" id="http-get-note"></a></p>
<h2 id="toc121"><span><a href="#http-get">http get</a></span></h2>
<p>How to make an HTTP GET request and read the response into a string.</p>
<p><a name="http-post-note" id="http-post-note"></a></p>
<h2 id="toc122"><span><a href="#http-post">http post</a></span></h2>
<p><a name="serve-pwd-note" id="serve-pwd-note"></a></p>
<h2 id="toc123"><span><a href="#serve-pwd">serve working directory</a></span></h2>
<p>A command line invocation to start a single process web server which serves the working directory at <span style="white-space: pre-wrap;">http://localhost:8000</span>.</p>
<div class="code">
<pre>
<code>$ sudo cpan -i IO::All

$ perl -MIO::All -e 'io(":8000")-&gt;fork-&gt;accept-&gt;(sub { $_[0] &lt; io(-x $1 ? "./$1 |" : $1) if /^GET \/(.*) / })'</code>
</pre></div>
<p><a name="absolute-url-note" id="absolute-url-note"></a></p>
<h2 id="toc124"><span><a href="#absolute-url">absolute url</a></span></h2>
<p>How to construct an absolute URL from a base URL and a relative URL as documented in <a href="http://www.ietf.org/rfc/rfc1808.txt">RFC 1808</a>.</p>
<p>When constructing the absolute URL, the rightmost path component of the base URL is removed unless it ends with a slash /. The query string and fragment of the base URL are always removed.</p>
<p>If the relative URL starts with a slash / then the entire path of the base URL is removed.</p>
<p>If the relative URL starts with one or more occurrences of ../ then one or more path components are removed from the base URL.</p>
<p>The base URL and the relative URL will be joined by a single slash / in the absolute URL.</p>
<p><strong>php:</strong></p>
<p>Here is a <a href="http://stackoverflow.com/questions/4444475/transfrom-relative-path-into-absolute-url-using-php#answer-4444490">PHP function which computes absolute urls</a>.</p>
<p><a name="parse-url-note" id="parse-url-note"></a></p>
<h2 id="toc125"><span><a href="#parse-url">parse url</a></span></h2>
<p>How to extract the protocol, host, port, path, query string, and fragment from a URL. How to extract the parameters from the query string.</p>
<p><strong>python:</strong></p>
<p><tt>urlparse</tt> can also be used to parse FTP URLs:</p>
<div class="code">
<pre>
<code>up = urlparse.urlparse('ftp://foo:bar@google.com/baz;type=binary')

# 'foo'
up.username

# 'bar'
up.password

# 'type=binary'
up.params</code>
</pre></div>
<p><strong>ruby:</strong></p>
<p>How to parse an FTP URL:</p>
<div class="code">
<pre>
<code>up = URI('ftp://foo:bar@google.com/baz;type=binary')

# "foo"
 up.user

# up.password
"bar"

# "binary"
up.typecode</code>
</pre></div>
<p><a name="url-encode-note" id="url-encode-note"></a></p>
<h2 id="toc126"><span><a href="#url-encode">url encode/decode</a></span></h2>
<p>How to URL encode and URL unencode a string.</p>
<p>URL encoding, also called percent encoding, is described in <a href="http://www.ietf.org/rfc/rfc3986.txt">RFC 3986</a>. It replaces all characters except for the letters, digits, and a few punctuation marks with a percent sign followed by their two digit hex encoding. The characters which are not escaped are:</p>
<div class="code">
<pre>
<code>A-Z a-z 0-9 - _ . ~</code>
</pre></div>
<p>URL encoding can be used to encode UTF-8, in which case each byte of a UTF-8 character is encoded separately.</p>
<p>When form data is sent from a browser to a server via an HTTP GET or an HTTP POST, the data is percent encoded but spaces are replaced by plus signs <tt>+</tt> instead of <tt>%20</tt>. The MIME type for form data is <tt>application/x-www-form-urlencoded</tt>.</p>
<p><strong>python:</strong></p>
<p>In Python 3 the functions <tt>quote_plus</tt>, <tt>unquote_plus</tt>, <tt>quote</tt>, and <tt>unquote</tt> moved from <tt>urllib</tt> to <tt>urllib.parse</tt>.</p>
<p><tt>urllib.quote</tt> replaces a space character with <tt>%20</tt>.</p>
<p><tt>urllib.unquote</tt> does not replace <tt>+</tt> with a space character.</p>
<p><a name="base64-note" id="base64-note"></a></p>
<h2 id="toc127"><span><a href="#base64">base64 encode/decode</a></span></h2>
<p>How to encode binary data in ASCII using the Base64 encoding scheme.</p>
<p>A popular Base64 encoding is the one defined by <a href="http://www.ietf.org/rfc/rfc2045.txt">RFC 2045</a> for MIME. Every 3 bytes of input is mapped to 4 of these characters: <tt>[A-Za-z0-9/+]</tt>.<br />
If the input does not consist of a multiple of three characters, then the output is padded with one or two hyphens: =.</p>
<p>Whitespace can inserted freely into Base64 output; this is necessary to support transmission by email. When converting Base64 back to binary whitespace is ignored.</p>
<p><a name="unit-tests-note" id="unit-tests-note"></a></p>
<h1 id="toc128"><span><a href="#unit-tests">Unit Tests</a></span></h1>
<p><a name="test-class-note" id="test-class-note"></a></p>
<h2 id="toc129"><span><a href="#test-class">test class</a></span></h2>
<p>How to define a test class and make a truth assertion.</p>
<p>The argument of a truth assertion is typically an expression. It is a good practice to include a failure message as a second argument which prints out variables in the expression.</p>
<p><a name="run-test-note" id="run-test-note"></a></p>
<h2 id="toc130"><span><a href="#run-test">run tests; run test method</a></span></h2>
<p>How to run all the tests in a test class; how to run a single test from the test class.</p>
<p><a name="assert-equal-note" id="assert-equal-note"></a></p>
<h2 id="toc131"><span><a href="#assert-equal">equality assertion</a></span></h2>
<p>How to test for equality.</p>
<p><strong>python:</strong></p>
<p>Note that <tt>assertEquals</tt> does not print the values of its first two arguments when the assertion fails. A third argument can be used to provide a more informative failure message.</p>
<p><a name="assert-approx-note" id="assert-approx-note"></a></p>
<h2 id="toc132"><span><a href="#assert-approx">approximate assertion</a></span></h2>
<p>How to assert that two floating point numbers are approximately equal.</p>
<p><a name="assert-regex-note" id="assert-regex-note"></a></p>
<h2 id="toc133"><span><a href="#assert-regex">regex assertion</a></span></h2>
<p>How to test that a string matches a regex.</p>
<p><a name="assert-exc-note" id="assert-exc-note"></a></p>
<h2 id="toc134"><span><a href="#assert-exc">exception assertion</a></span></h2>
<p>How to test whether an exception is raised.</p>
<p><a name="mock-method-note" id="mock-method-note"></a></p>
<h2 id="toc135"><span><a href="#mock-method">mock method</a></span></h2>
<p>How to create a mock method.</p>
<p>A mock method is used when calling the real method from a unit test would be undesirable. The method that is mocked is not in the code that is being tested, but rather a library which is used by that code. Mock methods can raise exceptions if the test fails to invoke them or if the wrong arguments are provided.</p>
<p><strong>python:</strong></p>
<p><tt>assert_called_once_with</tt> can takes the same number of arguments as the method being mocked.</p>
<p>If the mock method was called multiple times, the method <tt>assert_called_with</tt> can be used in place of <tt>asert_called_once_with</tt> to make an assertion about the arguments that were used in the most recent call.</p>
<p>A mock method which raises an exception:</p>
<div class="code">
<pre>
<code>foo = Foo()
foo.run = mock.Mock(side_effect=KeyError('foo'))

with self.assertRaises(KeyError):
  foo.run(13)

foo.run.assert_called_with(13)</code>
</pre></div>
<p><strong>ruby:</strong></p>
<p>The <tt>with</tt> method takes the same number of arguments as the method being mocked.</p>
<p>Other methods are available for use in the chain which defines the assertion. The <tt>once</tt> method can be replaced by <tt>never</tt> or <tt>twice</tt>. If there is uncertainty about how often the method will be called one can used <tt>at_least_once</tt>, <tt>at_least(m)</tt>, <tt>at_most_once</tt>, <tt>at_most(n)</tt> to set lower or upper bounds. <tt>times(m..n)</tt> takes a range to set both the lower and upper bound.</p>
<p>A mock method which raises an exception:</p>
<div class="code">
<pre>
<code>    foo = mock()
    foo.expects(:run).
      raises(exception = RuntimeError, message = 'bam!').
      with(13).
      once

    assert_raises(RuntimeError) do
      foo.run(13)
    end</code>
</pre></div>
<p>There is also a method called <tt>yields</tt> which can be used in the chain which defines the assertion. It makes the mock method yield to a block. It takes as arguments the arguments it passes to the block.</p>
<p><a name="test-setup-note" id="test-setup-note"></a></p>
<h2 id="toc136"><span><a href="#test-setup">setup</a></span></h2>
<p>How to define a setup method which gets called before every test.</p>
<p><a name="test-teardown-note" id="test-teardown-note"></a></p>
<h2 id="toc137"><span><a href="#test-teardown">teardown</a></span></h2>
<p>How to define a cleanup method which gets called after every test.</p>
<p><a name="debugging-profiling-note" id="debugging-profiling-note"></a></p>
<h1 id="toc138"><span><a href="#debugging-profiling">Debugging and Profiling</a></span></h1>
<p><a name="check-syntax-note" id="check-syntax-note"></a></p>
<h2 id="toc139"><span><a href="#check-syntax">check syntax</a></span></h2>
<p>How to check the syntax of code without executing it.</p>
<p><a name="warnings-flag-note" id="warnings-flag-note"></a></p>
<h2 id="toc140"><span><a href="#warnings-flag">flags for stronger and strongest warnings</a></span></h2>
<p>Flags to increase the warnings issued by the interpreter.</p>
<p><strong>python:</strong></p>
<p>The -t flag warns about inconsistent use of tabs in the source code. The -3 flag is a Python 2.X option which warns about syntax which is no longer valid in Python 3.X.</p>
<p><a name="lint-note" id="lint-note"></a></p>
<h2 id="toc141"><span><a href="#lint">lint</a></span></h2>
<p>A lint tool.</p>
<p><a name="src-cleanup-note" id="src-cleanup-note"></a></p>
<h2 id="toc142"><span><a href="#src-cleanup">source cleanup</a></span></h2>
<p>A tool which detects or removes semantically insignificant variation in the source code.</p>
<p><a name="debugger-note" id="debugger-note"></a></p>
<h2 id="toc143"><span><a href="#debugger">run debugger</a></span></h2>
<p>How to run a script under the debugger.</p>
<p><a name="debugger-cmds-note" id="debugger-cmds-note"></a></p>
<h2 id="toc144"><span><a href="#debugger-cmds">debugger commands</a></span></h2>
<p>A selection of commands available when running the debugger. The gdb commands are provided for comparison.</p>
<table class="wiki-content-table"><tr><th>cmd</th>
<th>perl -d</th>
<th>python -m pdb</th>
<th>rdebug</th>
<th>gdb</th>
</tr><tr><td>help</td>
<td>h</td>
<td>h</td>
<td>h</td>
<td>h</td>
</tr><tr><td>list</td>
<td>l [<span style="color: gray"><em>first</em></span>, <span style="color: gray"><em>last</em></span>]</td>
<td>l [<span style="color: gray"><em>first</em></span>, <span style="color: gray"><em>last</em></span>]</td>
<td>l [<span style="color: gray"><em>first</em></span>, <span style="color: gray"><em>last</em></span>]</td>
<td>l [<span style="color: gray"><em>first</em></span>, <span style="color: gray"><em>last</em></span>]</td>
</tr><tr><td>next statement</td>
<td>n</td>
<td>n</td>
<td>n</td>
<td>n</td>
</tr><tr><td>step into function</td>
<td>s</td>
<td>s</td>
<td>s</td>
<td>s</td>
</tr><tr><td>set breakpoint</td>
<td>b</td>
<td>b [<span style="color: gray"><em>file</em></span>:]<span style="color: gray"><em>line</em></span><br />
b <span style="color: gray"><em>function</em></span></td>
<td>b [<span style="color: gray"><em>file</em></span>:]<span style="color: gray"><em>line</em></span><br />
b <span style="color: gray"><em>class</em></span>[.<span style="color: gray"><em>method</em></span>]</td>
<td>b [<span style="color: gray"><em>file</em></span>:]<span style="color: gray"><em>line</em></span></td>
</tr><tr><td>list breakpoints</td>
<td>L</td>
<td>b</td>
<td>info b</td>
<td>i b</td>
</tr><tr><td>delete breakpoint</td>
<td>B <span style="color: gray"><em>num</em></span></td>
<td>cl <span style="color: gray"><em>num</em></span></td>
<td>del <span style="color: gray"><em>num</em></span></td>
<td>d <span style="color: gray"><em>num</em></span></td>
</tr><tr><td>continue</td>
<td>c</td>
<td>c</td>
<td>c</td>
<td>c</td>
</tr><tr><td>show backtrace</td>
<td>T</td>
<td>w</td>
<td>w</td>
<td>bt</td>
</tr><tr><td>move up stack</td>
<td></td>
<td>u</td>
<td>u</td>
<td>u</td>
</tr><tr><td>move down stack</td>
<td></td>
<td>d</td>
<td>down</td>
<td>do</td>
</tr><tr><td>print expression</td>
<td>p <span style="color: gray"><em>expr</em></span></td>
<td>p <span style="color: gray"><em>expr</em></span></td>
<td>p <span style="color: gray"><em>expr</em></span></td>
<td>p <span style="color: gray"><em>expr</em></span></td>
</tr><tr><td>(re)run</td>
<td>R</td>
<td>restart [<span style="color: gray"><em>arg1</em></span>[, <span style="color: gray"><em>arg2</em></span> …]]</td>
<td>restart [<span style="color: gray"><em>arg1</em></span>[, <span style="color: gray"><em>arg2</em></span> …]]</td>
<td>r [<span style="color: gray"><em>arg1</em></span>[, <span style="color: gray"><em>arg2</em></span> …]]</td>
</tr><tr><td>quit debugger</td>
<td>q</td>
<td>q</td>
<td>q</td>
<td>q</td>
</tr></table><p><a name="benchmark-note" id="benchmark-note"></a></p>
<h2 id="toc145"><span><a href="#benchmark">benchmark code</a></span></h2>
<p>How to run a snippet of code repeatedly and get the user, system, and total wall clock time.</p>
<p><a name="profile-note" id="profile-note"></a></p>
<h2 id="toc146"><span><a href="#profile">profile code</a></span></h2>
<p>How to run the interpreter on a script and get the number of calls and total execution time for each function or method.</p>
<p><a name="java-interop-note" id="java-interop-note"></a></p>
<h1 id="toc147"><span><a href="#java-interop">Java Interoperation</a></span></h1>
<p><a name="java-version-note" id="java-version-note"></a></p>
<h2 id="toc148"><span><a href="#java-version">version</a></span></h2>
<p>Version of the scripting language JVM implementation used in this reference sheet.</p>
<p><a name="java-repl-note" id="java-repl-note"></a></p>
<h2 id="toc149"><span><a href="#java-repl">repl</a></span></h2>
<p>Command line name of the repl.</p>
<p><a name="java-interpreter-note" id="java-interpreter-note"></a></p>
<h2 id="toc150"><span><a href="#java-interpreter">interpreter</a></span></h2>
<p>Command line name of the interpreter.</p>
<p><a name="java-compiler-note" id="java-compiler-note"></a></p>
<h2 id="toc151"><span><a href="#java-compiler">compiler</a></span></h2>
<p>Command line name of the tool which compiles source to java byte code.</p>
<p><a name="java-prologue-note" id="java-prologue-note"></a></p>
<h2 id="toc152"><span><a href="#java-prologue">prologue</a></span></h2>
<p>Code necessary to make java code accessible.</p>
<p><a name="java-new-note" id="java-new-note"></a></p>
<h2 id="toc153"><span><a href="#java-new">new</a></span></h2>
<p>How to create a java object.</p>
<p><a name="java-method-note" id="java-method-note"></a></p>
<h2 id="toc154"><span><a href="#java-method">method</a></span></h2>
<p>How to invoke a java method.</p>
<p><a name="java-import-note" id="java-import-note"></a></p>
<h2 id="toc155"><span><a href="#java-import">import</a></span></h2>
<p>How to import names into the current namespace.</p>
<p><a name="java-non-bundled-note" id="java-non-bundled-note"></a></p>
<h2 id="toc156"><span><a href="#java-non-bundled">import non-bundled java library</a></span></h2>
<p>How to import a non-bundled Java library</p>
<p><a name="java-shadow-note" id="java-shadow-note"></a></p>
<h2 id="toc157"><span><a href="#java-shadow">shadowing avoidance</a></span></h2>
<p>How to import Java names which are the same as native names.</p>
<p><a name="java-to-array-note" id="java-to-array-note"></a></p>
<h2 id="toc158"><span><a href="#java-to-array">convert native array to java array</a></span></h2>
<p>How to convert a native array to a Java array.</p>
<p><a name="java-subclassable-note" id="java-subclassable-note"></a></p>
<h2 id="toc159"><span><a href="#java-subclassable">are java classes subclassable?</a></span></h2>
<p>Can a Java class be subclassed?</p>
<p><a name="java-open-note" id="java-open-note"></a></p>
<h2 id="toc160"><span><a href="#java-open">are java classes open?</a></span></h2>
<p>Can a Java array be monkey patched?</p>

                    </div>
        </div>
      </div>
      <div id="license-area" class="license-area">
        content of this page licensed under
        <a rel="license" href="http://creativecommons.org/licenses/by-sa/3.0/">
        creative commons attribution-sharealike 3.0</a>
      </div>
    </div>
  </div>
</div>

<script type="text/javascript">

  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-17129977-2']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();

</script>

</body>
</html>
